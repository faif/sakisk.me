[{"content":"\u003cp\u003e\u003cimg src=\"/assets/IAM-Identity-center.png\" alt=\"Identity Center\"\u003e\u003c/p\u003e\n\u003ch2 id=\"intro\"\u003eIntro\u003c/h2\u003e\n\u003cp\u003eCorporate cloud environments usually consist of multiple accounts. Managing the different users, groups, and access\npolicies per account can be a complex and daunting process. \u003cabbr title=\"Identity and Access Management\"\u003eIAM\u003c/abbr\u003e\nidentity center to the rescue! With IAM identity center we can use \u003cabbr title=\"Single Sign On\"\u003eSSO\u003c/abbr\u003e effectively\nto switch quickly between different \u003cabbr title=\"Amazon Web Services\"\u003eAWS\u003c/abbr\u003e accounts that we have been given access.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/assets/AWS-SSO-multi-account.jpg\" alt=\"AWS SSO multiple accounts\"\u003e\u003c/p\u003e\n\u003ch2 id=\"managing-users-and-groups\"\u003eManaging users and groups\u003c/h2\u003e\n\u003cp\u003eAlthough we can create users and groups directly in IAM Identity Center and manage them using \u003cabbr title=\"Infrastructure\nas Code\"\u003eIaC\u003c/abbr\u003e, it is more efficient to use an enterprise identity provider (IdP), such as Entra ID, Okta, etc. Using\nan IdP, offers the SSO advantage: no need to generate new credentials, the existing credentials used to login to the corporate\naccount are sufficient.\u003c/p\u003e\n\u003cp\u003eAt Mentech we are using Entra ID, which supports provisioning users and groups to IAM Identity Center. So, the first step is to\ndefine those groups and users and provision them.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/assets/idc-groups.png\" alt=\"AWS Identity Center provisioned groups\"\u003e\u003c/p\u003e\n\u003ch2 id=\"managing-account-access-and-permissions\"\u003eManaging account access and permissions\u003c/h2\u003e\n\u003cp\u003eNow that the groups and users are there, it\u0026rsquo;s time to give them the required access to the relevant AWS accounts. That is optimally\ndone with IaC, and at Mentech we use terraform. The terraform registry has \u003ca href=\"https://registry.terraform.io/modules/aws-ia/iam-identity-center/aws/latest\"\u003ean identity center\nmodule\u003c/a\u003e, but I prefer using the \u003ca href=\"https://github.com/aws-samples/identity-center-with-terraform\"\u003eofficial AWS\nmodule\u003c/a\u003e, currently hosted only on GitHub. The repo contains nice\nexamples of giving access to accounts and defining permissions, thus I won\u0026rsquo;t repeat that here to keep it short. Leave a comment\nbelow if you need help.\u003c/p\u003e\n\u003ch2 id=\"caveats\"\u003eCaveats\u003c/h2\u003e\n\u003cp\u003eWhen defining fine-grained permission sets, it is advised to maximise the use of \u003ca href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html#aws-managed-policies\"\u003eAWS managed\npolicies\u003c/a\u003e.\nUnfortunately, there is a \u003ca href=\"https://docs.aws.amazon.com/singlesignon/latest/userguide/limits.html#awsaccountlimits\"\u003ehard quota\u003c/a\u003e of\n20 managed + customer policies per account. For lengthy permission sets that reach this quota, or when there are no suiting managed\npolicies available (yes, it can happen), the referenced module supports defining an inline policy, as shown below:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eSampleGroupPermissionSet\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003edescription\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Permission set of a sample group\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003etags\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003esession_duration\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;PT4H\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003einline_policy\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;sample-group-perms\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# the inline policy is in the file sample-groups-perms.json\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003eaws_managed_policies\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    - \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;AmazonEC2ReadOnlyAccess\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    - \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;AmazonS3ReadOnlyAccess\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003ecustomer_managed_policies\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003epermissions_boundary\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","description":null,"image":null,"permalink":"http://localhost:1313/blog/show-me-your-id/","title":"Show me your Identity (Center)"},{"content":"\u003cp\u003e\u003cimg src=\"/assets/bluesky.jpeg\" alt=\"Bluesky\"\u003e\u003c/p\u003e\n\u003ch2 id=\"background\"\u003eBackground\u003c/h2\u003e\n\u003cp\u003eWhenever I have something to share with the world (mainly technical content), I post it on social media so that other\npeople can also check it out. I usually post about articles and books that I\u0026rsquo;ve read, new blogposts that I\u0026rsquo;ve\nwritten, and discounts on my book. The two social media platforms I was using until now were LinkedIn and X (former\nTwitter). But it\u0026rsquo;s time to replace X with something else, for administrative purposes\u0026hellip;\u003c/p\u003e\n\u003ch2 id=\"the-problem\"\u003eThe problem\u003c/h2\u003e\n\u003cp\u003eWhen X was still named Twitter, it offered a public API. That made it possible to create a new post on LinkedIn and\nconfigure LinkedIn to also post the same content to Twitter. Posting to only one social media platform and reposting\nto others is very convenient. Sadly, this is not possible anymore for X, because X does no longer offer a public API.\nThat annoys me, thus I\u0026rsquo;ve decided to replace X with Bluesky, and write a program that supports posting to both\nplatforms using their APIs. An extra benefit of switching to Bluesky is that it doesn\u0026rsquo;t have ads (so far); I\u0026rsquo;m not a\nbig fan of ads.\u003c/p\u003e\n\u003ch2 id=\"linkedsky\"\u003eLinkedSky\u003c/h2\u003e\n\u003cp\u003eI wrote a free software terminal-based Python program that allows me to post both to LinkedIn and Bluesky, without\nneeding to use a Web Browser and interact with their Web \u003cabbr title=\"User Interface\"\u003eUI\u003c/abbr\u003e. Source code and\ndocumentation are available on GitHub: \u003ca href=\"https://github.com/faif/linkedsky\"\u003eLinkedSky repo\u003c/a\u003e.\u003c/p\u003e\n","description":null,"image":null,"permalink":"http://localhost:1313/blog/posting-to-linkedin-and-bluesky-programmatically/","title":"Posting to LinkedIn and Bluesky programmatically"},{"content":"\u003cp\u003e\u003cimg src=\"/assets/cloud.png\" alt=\"Cloud and Linux\"\u003e\u003c/p\u003e\n\u003cp\u003eIdeally, all resources of a cloud environment should be handled by Infrastructure As Code (\u003cabbr title=\"Infrastructure As Code\"\u003eIAC\u003c/abbr\u003e). At work, we are using Terraform to do this. But as usual, the ideal situation is never what happens in practice. So, it is not uncommon for people to change things directly on the cloud environment: in our case, using the AWS console.\u003c/p\u003e\n\u003cp\u003eIf the resource that is \u0026ldquo;dirty\u0026rdquo; is already tracked in source code, it is usually fine. When trying to deploy, Terraform will report the difference, so that gives us the chance to update the code and fix the dirty change issue. Note: Always inspect carefully the recommended Terraform action(s) before deploying, because a dirty change has often unwanted effects. A concrete example is when a user makes a relational database change directly on the cloud environment, like increasing the size of a connection pool. As soon as you try to deploy using IAC, Terraform suggests to drop and create the database again. That\u0026rsquo;s the last thing that we want for a database, because all existing data will be lost! The proper action in this case is to modify the code so that the connection pool size number matches the one of the cloud environment.\u003c/p\u003e\n\u003cp\u003eAnother problem with dirty clouds appears when people create a new resource that was not previously tracked in IAC. That\u0026rsquo;s similar to making code changes without using any form of source control. It\u0026rsquo;s not possible to know who did what, and there\u0026rsquo;s no change history whatsoever. What do we do in that case? Although it\u0026rsquo;s not possible to recover the history of changes that happened so far, we can still import the resource to IAC and track all future changes. Importing is a two step process. First, we need to define the resource in infrastructure code, so that it matches (exactly) the cloud resource. The next step is to import the resource using a command like \u003ccode\u003eterraform import\u003c/code\u003e. Hashicorp has a nice hands-on\n\u003ca href=\"https://developer.hashicorp.com/terraform/tutorials/state/state-import\"\u003etutorial\u003c/a\u003e about importing cloud resources.\u003c/p\u003e\n","description":null,"image":null,"permalink":"http://localhost:1313/blog/2022-12-29-dirty-clouds/","title":"Dirty clouds"},{"content":"\u003cp\u003e\u003cimg src=\"/assets/experia.jpeg\" alt=\"WAN settings\"\u003e\u003c/p\u003e\n\u003cp\u003eThis is something that I wanted to do for years, and it finally happened. I got rid of the Experia Box.\u003c/p\u003e\n\u003cp\u003eYou know the story. You switched to a fiber Internet connection. Is there anything better? I love it!\u003c/p\u003e\n\u003cp\u003eAnd then comes your \u0026ldquo;generous\u0026rdquo; \u003cabbr title=\"Internet Service Provider\"\u003eISP\u003c/abbr\u003e. They gave you the Experia Box, in my case V10 (ZTE H369A). A crappy device with poor WiFi connectivity and insecure protocols, limited configuration options, and no firmware upgrade possibilities.\u003c/p\u003e\n\u003cp\u003eThe easiest way to fix most of these issues is to buy a decent router that supports installing custom firmware (in my case dd-wrt) and connect it to the Experia Box. The Experia Box then still acts as the Internet gateway, but you can disable all other options (e.g. WiFi) and use your router\u0026rsquo;s better features instead.\u003c/p\u003e\n\u003cp\u003eSo first step, find a good router that supports custom firmware. I bought a Netgear R6700 v3 and replaced the stock firmware with dd-wrt (not covered here, there is enough good material of how to do that out there). Connecting the new router to the Experia Box worked like a charm, and fixed the WiFi connectivity and security issues.\u003c/p\u003e\n\u003cp\u003eBut I don’t want to stop there. I have that extra ugly box that acts as my \u003cabbr title=\"Wide Area Network\"\u003eWAN\u003c/abbr\u003e gateway. I really, really, want to replace it with my router. Is that even possible? Checked online, and there was a lot of confusion. People claiming that this is not possible, because you need the modem capabilities of the Experia Box, and a router doesn\u0026rsquo;t support this. But such statement doesn’t make sense. I’m using fiber, not \u003cabbr title=\"Digital Subscriber Line\"\u003eDSL\u003c/abbr\u003e or the cable network, so why do I need a modem? To be sure, I called my ISP, and they confirmed that it should be possible to replace the Experia Box with my own router.\u003c/p\u003e\n\u003cp\u003eAnd now comes the tricky part. After a lot of reading (and cursing) due to the infamous WAN \u003cabbr title=\"Internet Protocol\"\u003eIP\u003c/abbr\u003e 0.0.0.0 (basically, no Internet) issue, I’m happy to share with you the working settings. Disclaimer: The following settings are working for me because I only use Internet, no IP TV (who needs that when there’s Netflix and online TV channels) or a landline. People claim that it’s still possible to use those with the proper router and cofigurations, but I don’t need them, so that\u0026rsquo;s not my problem :)\u003c/p\u003e\n\u003cp\u003eStep 1: \u003cabbr title=\"Point-to-Point Protocol over Ethernet\"\u003ePPoE\u003c/abbr\u003e. You will find the credentials in the Experia\u0026rsquo;s config settings. Your ISP can also help you with this.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/assets/ppoe.png\" alt=\"PPoE settings\"\u003e\u003c/p\u003e\n\u003cp\u003eStep 2: \u003cabbr title=\"Virtual Local Area Network\"\u003eVLAN\u003c/abbr\u003e. My ISP says that Internet goes over VLAN 6, which must be tagged and have priority 1.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/assets/vlan.png\" alt=\"VLAN settings\"\u003e\u003c/p\u003e\n\u003cp\u003eStep 3: Configure the WAN port to use VLAN 6 (under Setup/Networking).\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/assets/wan.png\" alt=\"WAN settings\"\u003e\u003c/p\u003e\n\u003cp\u003eStep 4: Reboot the router.\u003c/p\u003e\n\u003cp\u003eYou should now get a WAN IP. Looks simple when you see it complete, but it was very painful and frustrating to achieve this. So goodbye Experia Box, I hope that I won’t need you ever again.\u003c/p\u003e\n","description":null,"image":null,"permalink":"http://localhost:1313/blog/2022-11-09-bye-experia/","title":"Bye bye Experia Box (V10)"},{"content":"\u003cp\u003eWhen we want to write code that operates on a data structure, it is common to initially implement it for a single item, and then make it more general. In functional languages like Clojure, I use the following pattern a lot, to execute a function on all items of a data structure (aka collection, or seq):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-clojure\" data-lang=\"clojure\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e(\u003cspan style=\"color:#66d9ef\"\u003edefn \u003c/span\u003esingle-item-function [item]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    (\u003cspan style=\"color:#a6e22e\"\u003edostuff\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e(\u003cspan style=\"color:#66d9ef\"\u003edefn \u003c/span\u003ecollection-function [collection]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    (map \u003cspan style=\"color:#f92672\"\u003e#\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003esingle-item-function\u003c/span\u003e %) collection))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSo far so good, until I found out that only one of the functions \u003ca href=\"https://github.com/faif/sub-matcher\"\u003ein my hobby project\u003c/a\u003e was working fine at the \u003cabbr title=\"Read-Eval-Print-Loop\"\u003eREPL\u003c/abbr\u003e (Read-Eval-Print-Loop), but not outside of it. Guess what was wrong with that function: It had side-effects!\u003c/p\u003e\n\u003cp\u003eWhat\u0026rsquo;s a side-effect?\u003c/p\u003e\n\u003cp\u003eGenerally speaking, a part of code has side-effects when it is nondeterministic. A good example is code that involves \u003cabbr title=\"Input/Output\"\u003eI/O\u003c/abbr\u003e (Input/Output), like opening a file. You cannot guarantee what the behaviour of that code is, for many reasons. You might execute it once and all goes well; then execute it a second time and it fails badly due to a disk failure, the file was removed or renamed, file permission changes, etc.\u003c/p\u003e\n\u003cp\u003eSo after banging my head for some time, I found out that when calling code with side-effects using \u003ccode\u003emap\u003c/code\u003e, the behaviour is undefined. And that explains why that particular function was working \u0026ldquo;fine\u0026rdquo; in the REPL, but not when executing the program normally.\u003c/p\u003e\n\u003cp\u003eBut wait, how can we fix this? Functional languages have ways of dealing with side-effects, and in Clojure this is done via \u003ca href=\"https://clojuredocs.org/clojure.core/doseq\"\u003e\u003ccode\u003edoseq\u003c/code\u003e\u003c/a\u003e. So in my case, replacing \u003ccode\u003emap\u003c/code\u003e with \u003ccode\u003edoseq\u003c/code\u003e \u003ca href=\"https://github.com/faif/sub-matcher/blob/main/src/sub_matcher/core.clj#L128\"\u003ein that function\u003c/a\u003e was sufficient.\u003c/p\u003e\n","description":null,"image":null,"permalink":"http://localhost:1313/blog/2022-07-29-map-no-side-effects/","title":"Map results should be free from side-effects"},{"content":"\u003cp\u003eAfter doing an IAM cleanup and creating user groups to limit user permissions, our data scientists at work reported a problem. They are using Athena and boto3 to access S3 buckets programmatically, and that stopped working. They started seeing the following error message instead:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eAn error occurred \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eAccessDeniedException\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e when calling the StartQueryExecution operation...\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhile looking for solutions, I was disappointed to see that almost all of them suggested modifying the bucket\u0026rsquo;s policy. Adding a custom S3 bucket policy means disabling the \u0026ldquo;Block all public access\u0026rdquo; default setting. Blocking all public access on S3 is a great practice. That\u0026rsquo;s what AWS recommends and we should not change it unless there\u0026rsquo;s a very serious reason to do so.\u003c/p\u003e\n\u003cp\u003eSo, after rejecting these suggestions I checked a bit more carefully our IAM user group policies and found that Force_MFA was attached to our data science group. Although forcing MFA is a very good practice when it comes to individual user accounts, it can cause problems when attached to a user group. The policy documentation says that:\u003c/p\u003e\n\u003cp\u003e\u0026ldquo;This policy allows users to manage their own passwords and MFA devices but nothing else unless they authenticate with MFA.\u0026rdquo;\u003c/p\u003e\n\u003cp\u003eWell, when accessing an S3 bucket programmatically, you are not expected to use an MFA device. Thus, removing the Force_MFA policy from the user group fixed the issue.\u003c/p\u003e\n","description":null,"image":null,"permalink":"http://localhost:1313/blog/2022-05-26-no-s3-public/","title":"Making S3 buckets public is not the solution"},{"content":"\u003cp\u003e\u003cimg src=\"/assets/tar.png\" alt=\"xkcd tar\"\u003e\u003c/p\u003e\n\u003cp\u003eI was configuring a new server and what\u0026rsquo;s the first thing that we want to setup when doing that? Passwordless ssh of course.\u003c/p\u003e\n\u003cp\u003eSo after following all required steps, I tried to connect. And it failed (still required a password)… So what do we do in that case?\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eEnsure that the key was copied to the remote machine (e.g. by \u003ccode\u003essh-copy-id\u003c/code\u003e). Yep, looks good.\u003c/li\u003e\n\u003cli\u003eCheck all related dir and file permissions of both local and remote computers (\u003ccode\u003e.ssh\u003c/code\u003e and its contents). All good.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSo what the heck is wrong? Let\u0026rsquo;s run ssh in (max) verbosity using \u003ccode\u003essh -vvv\u003c/code\u003e (3 v is the max, adding more v is just for fun):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e…\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edebug1: Skipping ssh-dss key .ssh/id_dsa - not in PubkeyAcceptedKeyTypes\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e…\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eGotcha! The server is properly configured to reject DSA keys, since \u003ca href=\"https://security.stackexchange.com/questions/112802/why-openssh-deprecated-dsa-keys\"\u003eDSA is deprecated\u003c/a\u003e because it is considered insecure.\u003c/p\u003e\n\u003cp\u003eSo what went wrong here? Well, I have both DSA and RSA keys in my \u003ccode\u003e.ssh\u003c/code\u003e dir, and I copied the wrong key using \u003ccode\u003essh-copy-id\u003c/code\u003e. I should probably get rid of the DSA key completely at some point :)\u003c/p\u003e\n","description":null,"image":null,"permalink":"http://localhost:1313/blog/2022-01-02-when-in-trouble-ssh/","title":"When in trouble, ssh -vvvvvv :)"},{"content":"\u003cp\u003e\u003cimg src=\"/assets/uml.png\" alt=\"UML class diagram\"\u003e\u003c/p\u003e\n\u003cp\u003eAre you using UML? The Unified Modeling language is a very useful notation, especially when it comes to explaining the structure and behavior of object-oriented systems. It is language-independent and offers a wide range of models/diagrams that cover the different aspects (static, dynamic, threading, etc.) of a system.\u003c/p\u003e\n\u003cp\u003eI like UML but I was never happy with the tooling around it. My biggest objection is that most of the UML tools use binary formats for storing the models, which makes version-controlling and collaborating for creating them impossible. That is against the nature of modern software development, which should be incremental and based on a team effort. Another thing that I don\u0026rsquo;t like is spending time on the layout of those models (e.g. rearranging boxes because they are not readable). I\u0026rsquo;d rather have the tool take care of this automatically, and only if I\u0026rsquo;m picky about something, e.g. the position of a specific box, to do it myself.\u003c/p\u003e\n\u003cp\u003eGood news. There is at least one tool that got this right: \u003ca href=\"https://plantuml.com\"\u003ePlantUML\u003c/a\u003e. PlantUML offers a textual notation for creating UML models. That means that we can store our models as plain text files and version-control them. So when multiple members of a team make modifications to the same model, merging the changes is similar to merging source code changes. All diff tools work fine. PlantUML also does its best to ensure that all parts of a model are readable, using an automatic placement algorithm. It has also some other nice features, like being able to change the look and feel of the displayed components. What I find really important is that we can do everything on the Web. Although there are native applications that we can install, using the official (or any other unofficial) PlantUML Web Server we can render our models in different formats (e.g. PNG or the more scalable SVG) with minimal effort.\u003c/p\u003e\n\u003cp\u003eHere\u0026rsquo;s an example of a sequence diagram, and how it is rendered by default as a PNG file:\u003c/p\u003e\n\u003cscript src=\"https://gist.github.com/faif/fc541deea2bf29f13e97d21234a279a2.js\"\u003e\u003c/script\u003e\n\u003cp\u003e\u003cimg src=\"/assets/uml-sequence.png\" alt=\"UML sequence diagram\"\u003e\u003c/p\u003e\n","description":null,"image":null,"permalink":"http://localhost:1313/blog/2021-09-11-plantuml/","title":"Let's plant some UML"},{"content":"\u003cp\u003eI like Prolog. I think that it\u0026rsquo;s a brilliant tool. And not purely educational, unlike what many people think. You can actually use it to build real, useful, and practical applications: sudoku solvers, adventure games, formal logical systems, and a lot more. It might not be the best tool for developing AAA games and real-time systems, but that doesn\u0026rsquo;t make it useless. I discovered Prolog during university, and I appreciate it since then.\u003c/p\u003e\n\u003cp\u003eAt that (university) time, Paul Graham\u0026rsquo;s \u0026ldquo;Hackers and painters\u0026rdquo; was considered a good book containing innovating programming ideas, so I decided to read it. In one section of the book, Paul is comparing a few programming languages, but Prolog is not mentioned at all. So I decided to send him an email and ask his thoughts about it. His answer was something like the following (paraphrasing): \u0026ldquo;Forget about Prolog and use Lisp which is a real programming language\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eI actually like Lisp (a lot), but I think that this is a bad answer. There\u0026rsquo;s no such thing as a real programming language. And there\u0026rsquo;s no single language that beats them all. That was only a Middle Earth thing, when Sauron made the one ring to rule them all. But in the programming world things are different. It is ok to have a single favorite language, but all programming languages have strengths and weaknesses, so being a polyglot is also a good thing. Here\u0026rsquo;s my humble opinion: Use the language that clicks with you. Don\u0026rsquo;t listen to the crowd. And avoid toxic people and opinions, everything that tries to make you feel bad for using your favorite language.\u003c/p\u003e\n\u003cp\u003eAnd an advice to you dear language zealots. When somebody tells you that their favorite language is X, instead of discarding them and trying to convert them because your favorite language Y is superior, ask why. They will most likely give you a very valid reason. For example, they might tell you that they use PHP because they are developing WordPress websites to pay their bills, or Python/R because they are working in Machine Learning and these languages have the best library and community support. It\u0026rsquo;s good if we speak less, and listen more. And by listen I mean try to understand the speaker\u0026rsquo;s point, not act kind and then start our monologue.\u003c/p\u003e\n\u003cp\u003eHappy Coding :)\u003c/p\u003e\n","description":null,"image":null,"permalink":"http://localhost:1313/blog/2021-06-21-real-languages/","title":"Don't use a real programming language"},{"content":"\u003cp\u003eWhen writing code, we need to handle errors. What happens if you are trying to read a corrupt file? Or if the network goes down while receiving data? The programming language runtime will try to\ngive you an error message that makes sense, but that doesn\u0026rsquo;t mean that this is what you want to show to your application/API users.\u003c/p\u003e\n\u003cp\u003eThere are two traditional ways of doing error handling. One is using error codes. That means returning a code (usually a number) to the users when something goes wrong, and let them interpret\nthat number using a lookup table. In languages that support exceptions, the recommended way is using exception handling.\u003c/p\u003e\n\u003cp\u003eC++ has a well-defined exception hierarchy. But the default exception types are very generic, and in most cases we should create our own custom types. Throwing custom exceptions gives more accurate\ninfo about what went wrong to the client code, so that it can react accordingly (when possible). It is better to throw a \u003ccode\u003eCorruptFileError\u003c/code\u003e or a \u003ccode\u003eConnectionDroppedError\u003c/code\u003e than an \u003ccode\u003estd::runtime_error\u003c/code\u003e. When the client code sees that a \u003ccode\u003eConnectionDroppedError\u003c/code\u003e occcured, a simple retry after a few seconds might be enough.\u003c/p\u003e\n\u003cp\u003eCustom exception types should extend the default types. That lets the client code be generic by default, and specific when needed. If a \u003ccode\u003eCorruptFileError\u003c/code\u003e doesn\u0026rsquo;t extend \u003ccode\u003estd::exception\u003c/code\u003e (or any\nrelevant \u003ccode\u003estd::exception\u003c/code\u003e subclass), the following \u003ccode\u003etry catch\u003c/code\u003e block is useless.\u003c/p\u003e\n\u003cscript src=\"https://gist.github.com/faif/ba36bd5e84939c2ece4936b6e9cbb1be.js?file=corrupt_file_example.cpp\"\u003e\u003c/script\u003e\n\u003cp\u003eA nice property of exceptions is that we can use many \u003ccode\u003ecatch\u003c/code\u003e blocks to cover a whole hierarchy of exceptions and react accordingly. In that case, we should always start from the most specific\nexception type(s) and move on to the more generic.\u003c/p\u003e\n\u003cscript src=\"https://gist.github.com/faif/ba36bd5e84939c2ece4936b6e9cbb1be.js?file=exception_hierarchy.cpp\"\u003e\u003c/script\u003e\n\u003cp\u003eThat\u0026rsquo;s nice, but if we have to copy this code block to all functions we end up with a lot of redundancy. Is there a better way?\u003c/p\u003e\n\u003cp\u003eActually, there is. Notice the \u003ccode\u003e...\u003c/code\u003e block. I still remember the university programming professor telling us that if you reach that block, something catastrophic has happened and the only thing\nthat you can do is to show a generic error message and abort. That was true then, but things have changed. Thanks to C++11, we can actually use only a single \u003ccode\u003e...\u003c/code\u003e block, get the actual\nexception details using something called the exception pointer, and call a function that handles all known exception types to do the real work.\u003c/p\u003e\n\u003cscript src=\"https://gist.github.com/faif/ba36bd5e84939c2ece4936b6e9cbb1be.js?file=one_catch.cpp\"\u003e\u003c/script\u003e\n\u003cp\u003eMuch better. Now, if only C++ had something similar to \u003ca href=\"https://medium.com/swlh/handling-exceptions-in-python-a-cleaner-way-using-decorators-fae22aa0abec\"\u003ePython\u0026rsquo;s decorators\u003c/a\u003e, we wouldn\u0026rsquo;t need to pollute our functions with \u003ccode\u003etry catch\u003c/code\u003e blocks. Perhaps there is something and I missed it, or there will be in a future C++ version :)\u003c/p\u003e\n","description":null,"image":null,"permalink":"http://localhost:1313/blog/2020-08-19-one-catch/","title":"One catch to rule them all"},{"content":"\u003cp\u003eWelcome to the new (infinite) series \u0026ldquo;Everyday command line\u0026rdquo;, in which I\u0026rsquo;ll cover use cases where the command line still shines compared to your favorite file manager, IDE, editor, and the like :)\u003c/p\u003e\n\u003cp\u003eAt times, I receive emails with lists of items that need to be modified using code. Let\u0026rsquo;s assume that a colleague sends us a list of 200 object IDs. I\u0026rsquo;ll include only 5 here for brevity:\u003c/p\u003e\n\u003cp\u003e| 29045  |\n| 14874  |\n| 33457  |\n| 21094  |\n| 36842  |\n| \u0026hellip;    |\u003c/p\u003e\n\u003cp\u003eWe want to use those IDs in Python code, specifically as items of a Python list. That means that they need to be quoted, separated by commas. Although not necessary, it\u0026rsquo;s also nice to remove the newlines for compactness:\u003c/p\u003e\n\u003cp\u003e\u0026ldquo;29045\u0026rdquo;, \u0026ldquo;14874\u0026rdquo;, \u0026hellip;\u003c/p\u003e\n\u003cp\u003eAlthough we don\u0026rsquo;t have to, it\u0026rsquo;s convenient to first create a temporary file with the IDs. Assuming that we have copied the ID list to the clipboard, we can store it to a file:\u003c/p\u003e\n\u003cscript id=\"asciicast-QtK1vFyUO2Qoe9xF9eN0PjbWX\" src=\"https://asciinema.org/a/QtK1vFyUO2Qoe9xF9eN0PjbWX.js\"\u003e\u003c/script\u003e\n\u003cp\u003eNow that we have the values in a file we can filter them. There are many different ways of achieving this. Here, I\u0026rsquo;m using the (very powerful) awk programming language to achieve everything in a single step:\u003c/p\u003e\n\u003cscript id=\"asciicast-SKbG4zndUkhDiKYUNpACKNtcI\" src=\"https://asciinema.org/a/SKbG4zndUkhDiKYUNpACKNtcI.js\" async\u003e\u003c/script\u003e\n\u003cp\u003eSo there we have it. If we omit the extra comma at the end, we can copy-paste the output to our Python list and use it as is.\u003c/p\u003e\n","description":null,"image":null,"permalink":"http://localhost:1313/blog/2019-04-10-everyday/","title":"Everyday command line: Quoting, splitting, and removing newlines"},{"content":"\u003cp\u003e\u003cimg src=\"/assets/computer-says-no.jpeg\" alt=\"Computer says no\"\u003e\u003c/p\u003e\n\u003cp\u003eAfter porting one of our libraries at work in Python 3, I wanted to publish it as a package. The tool that we are using to distribute packages is\n\u003ca href=\"https://pythonwheels.com\"\u003ewheels\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eUnfortunately, wheels was refusing to create the package. It was reporting an error similar to the following: \u003ccode\u003ewheel.cli.WheelError: \u0026quot;Bad wheel  filename mypackage-latest-cp36-cp36m-linux_x86_64.whl\u0026quot;\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eAfter searching online without any luck, I found a GitHub issue mentioning \u003ca href=\"https://www.python.org/dev/peps/pep-0440/\"\u003ePEP 440\u003c/a\u003e. Well, it turns out\nthat the \u0026ldquo;latest\u0026rdquo; part of the package name is not very PEP 440 compliant\u0026hellip; So wheels was right to complain. And all I had to do was modify the\nname to make it compliant. The PEP document has many \u003ca href=\"https://www.python.org/dev/peps/pep-0440/#examples-of-compliant-version-schemes\"\u003eexamples\u003c/a\u003e of\ncompliant schemes, so if you are facing a similar error pick any scheme that fits you.\u003c/p\u003e\n","description":null,"image":null,"permalink":"http://localhost:1313/blog/2018-11-02-wheels-pep/","title":"Wheels says no..."},{"content":"\u003cp\u003eI wanted to do a rather simple thing in a dockerfile: read a value from an external file and use it in a \u003ccode\u003eRUN\u003c/code\u003e command.\nDoing all this inside the dockerfile was a requirement, so I couldn\u0026rsquo;t pass the version while building the image using \u003ccode\u003ebuild-args\u003c/code\u003e or a similar solution.\u003c/p\u003e\n\u003cp\u003eThere\u0026rsquo;s nothing hard about achieving this, as long as you keep something in mind: Docker creates intermediate containers\nfor a lot of things, including \u003ccode\u003eRUN\u003c/code\u003e commands. So that means that everything needs to be done in the same \u003ccode\u003eRUN\u003c/code\u003e pipeline.\nThe following example shows how we can read a version from an external file and export a variable that we can use (in the\nsame pipeline).\u003c/p\u003e\n\u003cscript src=\"https://gist.github.com/faif/98631ee46dc557bdd5ab1dc42abae47f.js\"\u003e\u003c/script\u003e","description":null,"image":null,"permalink":"http://localhost:1313/blog/2018-09-23-docker-env/","title":"Read a version from an external file in a dockerfile"},{"content":"\u003cp\u003eIf you are dealing a lot with the terminal you probably use the \u003ccode\u003ecd\u003c/code\u003e command very often. \u003ccode\u003ecd here\u003c/code\u003e, \u003ccode\u003ecd there\u003c/code\u003e, \u003ccode\u003ecd ..\u003c/code\u003e, etc. What if I told you that you can avoid typing the \u003ccode\u003ecd\u003c/code\u003e command completely? That can save you a lot of keystrokes which is good because it:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMakes you more productive\u003c/li\u003e\n\u003cli\u003eHelps you avoid \u003cabbr title=\"Repetitive Strain Injury\"\u003eRSI\u003c/abbr\u003e problems, such as the infamous \u003cabbr title=\"Carpal Tunnel Syndrome\"\u003eCTS\u003c/abbr\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe first tool that I want to show you is \u003ca href=\"https://github.com/wting/autojump\"\u003eautojump\u003c/a\u003e. Once installed, autojump (abbreviated by the command \u003ccode\u003ej\u003c/code\u003e) maintains its own database to help you navigate to a directory without the need to remember:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWhere the directory actually is\u003c/li\u003e\n\u003cli\u003eThe full name of the directory (partial names will do)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHere\u0026rsquo;s an example of using autojump to quickly open my website\u0026rsquo;s repo directory.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/assets/autojump.gif\" alt=\"autojump example\"\u003e\u003c/p\u003e\n\u003cp\u003eIf you give to autojump a name pattern that is not yet familiar with, it will simply ignore it and stay to the current directory. So what can you do to save some keystrokes until the database of autojump is good enough, or when visiting unexplored territories? \u003ccode\u003eautocd\u003c/code\u003e to the rescue!\u003c/p\u003e\n\u003cp\u003eModern bash versions (\u0026gt;= 4.0) support a builtin option called \u003ccode\u003eautocd\u003c/code\u003e. That allows you to navigate through directories without the need to use the \u003ccode\u003ecd\u003c/code\u003e command. Combine it with a few shell wildcards and it will save a lot of routine typing. To enable the \u003ccode\u003eautocd\u003c/code\u003e option all you need is \u003ccode\u003eshopt -s autocd\u003c/code\u003e. Put the command in a profile/initialization file to make the setting persistent. Follows an example of how you can use \u003ccode\u003eautocd\u003c/code\u003e to quickly (and using minimum keys) open a (yet unknown to \u003ccode\u003eautojump\u003c/code\u003e) directory.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/assets/autocd.gif\" alt=\"autocd example\"\u003e\u003c/p\u003e\n","description":null,"image":null,"permalink":"http://localhost:1313/blog/2018-02-10-keystrokes/","title":"Type less, do more..."},{"content":"\u003cp\u003eIn this tutorial I\u0026rsquo;ll show you how to send MQTT data to \u003ca href=\"https://io.adafruit.com\"\u003eAdafruit IO\u003c/a\u003e. The hardware that I\u0026rsquo;m using is a \u003ca href=\"https://www.pycom.io/product/lopy/\"\u003eLoPy\u003c/a\u003e (only its WiFi interface) and an analog temperature sensor \u003ca href=\"https://www.adafruit.com/product/165\"\u003eTMP36\u003c/a\u003e. The circuit is rather simple:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/assets/tmp36.png\" alt=\"Electronic circuit\"\u003e\u003c/p\u003e\n\u003cp\u003eThe capacitor between the A/D pin and the ground is used to eliminate noise, but you can skip that if you don\u0026rsquo;t care. For the same reason (increasing the measurement accuracy) I\u0026rsquo;m averaging 100 sample A/D measurements. Measuring only once works too, but it\u0026rsquo;s less accurate.\u003c/p\u003e\n\u003cp\u003eEnough with the theory, let\u0026rsquo;s move on to the code. I\u0026rsquo;ll reuse most of Pycom\u0026rsquo;s \u003ca href=\"https://docs.pycom.io/pycom_esp32/pycom_esp32/tutorial/includes/mqtt.html\"\u003eMQTT tutorial code\u003c/a\u003e. The main difference is that I\u0026rsquo;ll connect to Adafruit IO instead of HiveMQ. So if you don\u0026rsquo;t have an Adafruit account yet, now is a good time to create one. Here\u0026rsquo;s the code:\u003c/p\u003e\n\u003cscript src=\"https://gist.github.com/faif/6da69d341a29c2b29c450343d2c20ddf.js\"\u003e\u003c/script\u003e\n\u003cp\u003eNote that I\u0026rsquo;m sending the temperature value every 30 seconds which is an overkill. In practice you should use a more pragmatic interval. By default Adafruit IO feed creates a private feed showing the measurements and a nice graph. I\u0026rsquo;ve changed it to public so that you can \u003ca href=\"https://io.adafruit.com/ierax/feeds/office-temperature\"\u003etake a look too\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eHappy Hacking :)\u003c/p\u003e\n","description":null,"image":null,"permalink":"http://localhost:1313/blog/2017-07-11-mqtt-adafruit/","title":"Sending MQTT data to Adafruit IO using a Pycom board"},{"content":"\u003cp\u003eI\u0026rsquo;m busy with a Node.js project at work. The project requires SFTP support and for that we decided to use the \u003ca href=\"https://www.npmjs.com/package/ftps\"\u003eftps\u003c/a\u003e module. Although I was able\nto connect to the SFTP server using \u003ccode\u003elftp\u003c/code\u003e and FileZilla without any problems, the Node.js project was failing. By checking the logs of the project I noticed that the cause was the infamous \u0026ldquo;Host key verification failed\u0026rdquo; problem.\u003c/p\u003e\n\u003cp\u003eSince SFTP uses SSH, it requires an initial key exchange between the client (in this case, my computer) and the server. Apparently the ftps Node\nmodule cannot deal with this key exchange. One solution is to force this procedure using the classic \u003ccode\u003essh\u003c/code\u003e command. Even if the SFTP server is\nconfigured not to allow remote shell connections (usually it connects to \u003ccode\u003enologin\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e), it will do the job.\u003c/p\u003e\n\u003cp\u003eSo, if you are using SFTP in your software project and you are dealing with host key verification failures, try connecting to the server using an\nSSH client first.\u003c/p\u003e\n","description":null,"image":null,"permalink":"http://localhost:1313/blog/2017-05-24-host-verification-key-failed/","title":"SFTP: How to fix the \"Host key verification failed\" problem"},{"content":"\u003cp\u003e\u003cimg src=\"/assets/spa.jpg\" alt=\"Book cover\"\u003e\u003c/p\u003e\n\u003cp\u003eI decided to read \u003ca href=\"https://www.manning.com/books/single-page-web-applications\"\u003ethis book\u003c/a\u003e because I wanted to learn about the architecture\nand implementation of a Single Page Application (SPA). And it turned out to be\na good choice.\u003c/p\u003e\n\u003cp\u003eWhat I particularly liked about the book is that it begins from scratch and\nshows how to implement a SPA without relying on heavy frameworks. Whenever a\nlibrary is used, it is done with a purpose (clearly explained by the authors).\u003c/p\u003e\n\u003cp\u003eThat helps to understand the internals of a SPA without any framework getting\nin your way. Once you understand how a SPA works, using a framework is not a\nproblem. But you have the option of using it or going your own way.\u003c/p\u003e\n\u003cp\u003eSince I\u0026rsquo;m not very experienced in JavaScript, I found Chapter 2 (Reintroducing\nJavaScript) very useful. It covers topics like the two code passes of the\nJavaScript engine, how JavaScript is different than common OOP languages by\nbeing a prototyping language, the module pattern, and self-executing anonymous\nfunctions.\u003c/p\u003e\n\u003cp\u003eThere are more interesting stuff covered in this SPA book: Static code analysis\nusing jslint, unit testing, and persistence using MongoDB are some of them.\u003c/p\u003e\n\u003cp\u003eThe only cons are that it (1) is a big book, (2) doesn\u0026rsquo;t demonstrate\nhow to plug many features of modern SPAs (for example smooth scrolling,\ninfinite scrolling, and jumbotron) in the proposed architecture.\u003c/p\u003e\n\u003cp\u003eRecommended to anyone interested in implementing SPAs and/or improving their\nJavaScript skills :)\u003c/p\u003e\n","description":null,"image":null,"permalink":"http://localhost:1313/blog/2016-10-15-book-review-spa/","title":"Book review: Single Page Web Applications"},{"content":"\u003cp\u003eBefore the release of \u003ca href=\"https://swift.org\"\u003eSwift\u003c/a\u003e I had no interest in doing mobile development. The reason\nwas that I\u0026rsquo;m not a big fan of Objective-C (the only official iOS language before Swift was\nreleased) and Java (the official Android language). I know that there are workarounds for using\nother languages but when it comes to mobile development I prefer using the oficially supported tooling.\u003c/p\u003e\n\u003cp\u003eAlthough I am a programming language enthusiast Objective-C never got me excited. And after having worked\nwith (or at least explored) languages that are more pragmatic and functional (for example Python, Scala,\nand Clojure) my feelings for Java are similar. Both Objective-C and Java are too verbose and not pragmatic\nenough for doing modern development.\u003c/p\u003e\n\u003cp\u003eThe rather minimal functional programming support offered by both languages is nothing more than hacks that\nwere added after the fact. Programming language features that are not well thought are not a good thing.\nThis feels as bad as first implementing a software system and then trying to make it secure: security as an\nafterthought is one of the biggest problems of today\u0026rsquo;s insecure systems. Although I\u0026rsquo;m still exploring functional\nprogramming I\u0026rsquo;m pretty sure that most professional functional programmers will agree with me on this.\u003c/p\u003e\n\u003cp\u003eFortunately Swift has changed the game. By releasing Swift and also making it free software (or open source if you\nprefer this term) Apple surprised me in a positive way and caught my interest. And although I have already bought\na (so far good) book about \u003ca href=\"https://pragprog.com/book/adios3/ios-9-sdk-development\"\u003eiOS development using Swift\u003c/a\u003e I feel that I haven\u0026rsquo;t explored core Swift as a\nlanguage enough \u0026ndash; especially its functional features.\u003c/p\u003e\n\u003cp\u003eThat\u0026rsquo;s why I\u0026rsquo;ve decided to re-read some articles I\u0026rsquo;ve been reading since the initial release of Swift. But\nthis time instead of just reading, I created a playground and fixed/cleaned-up the deprecated features of the\ngiven examples (Swift is evolving very fast, version 3 will be released at the end of 2016). I\u0026rsquo;ll keep my findings\nin the following Gist. If you have any suggestions let me know.\u003c/p\u003e\n\u003cscript src=\"https://gist.github.com/faif/ed9f30e921798299005eb2ebc684451f.js\"\u003e\u003c/script\u003e\n","description":null,"image":null,"permalink":"http://localhost:1313/blog/2016-07-28-swift-walkthrough/","title":"Exploring Swift"},{"content":"\u003cp\u003e\u003cimg src=\"https://d.gr-assets.com/books/1348576641l/9586547.jpg\" alt=\"book cover\"\u003e\u003c/p\u003e\n\u003cp\u003eThe title of this book describes it correctly. It is a compact guide\ncovering the basic (and a few more advanced) use cases of Git. If you\nhave already used Git you most likely know everything (or almost\neverything) explained in this book. That was my case, but I\u0026rsquo;ve also\nlearnt a few new commands and concepts (like why it\u0026rsquo;s useful to use\n\u003ccode\u003e--\u003c/code\u003e before providing any file/path names to avoid clashing).\u003c/p\u003e\n\u003cp\u003eDo not expect an in depth explanation of how Git works under the hood.\nIt is not the focus of this book and there is at least \u003ca href=\"https://git-scm.com/book/en/v2\"\u003eone free book\u003c/a\u003e\nthat does this well. But since I find the documentation of Git (yes, I\u0026rsquo;m talking\nabout you man pages) chaotic it is still useful for me to have a book which is\ntask-oriented and I can always refer to if I forget a specific Git command or\nconcept.\u003c/p\u003e\n","description":null,"image":null,"permalink":"http://localhost:1313/blog/2016-07-23-book-review-pragmatic-git/","title":"Book review: Pragmatic Guide to Git"},{"content":"\u003cp\u003eI decided to watch some programming-related videos and I began with uncle Bob\u0026rsquo;s\nkeynote \u003ca href=\"https://cleancoders.com/episode/clean-code-episode-0/show?autoplay=true\"\u003eThe Last Programming Language\u003c/a\u003e. In  general I agree with what\nhe says, with one exception. Uncle Bob believes that functional programming is important\nbecause it plays well with multicore programming.\u003c/p\u003e\n\u003cp\u003eI don\u0026rsquo;t think that this is the most important value of functional programming. First of\nall, there\u0026rsquo;s a lot of code written out there that is not multicore-aware. That can happen\nfor example when single core performance is sufficient. You can laugh as much as you want\nabout this statement but there are many programs where it is actually very true.\u003c/p\u003e\n\u003cp\u003eOn top of that, there are many non functional programming languages that can support multicore\nprogramming without necessarily using threads. For example C++ code can use Open MPI, and Python\ncode can use the multiprocessing module.\u003c/p\u003e\n\u003cp\u003eSo what\u0026rsquo;s the real added-value of functional programming? From what I have seen so far and\nwithout being an expert I see that functional code is:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eShorter because it uses higher-order functions that can generally be applied to all (uniform)\ncollections/data structures\u003c/li\u003e\n\u003cli\u003eEasier to test because functions use immutable code and are side-effect free\u003c/li\u003e\n\u003cli\u003eEasier to read because it avoids branching\u003c/li\u003e\n\u003cli\u003eIn general easier to \u003ca href=\"http://www.lispcast.com/reasoning-about-code\"\u003ereason about\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eOf course we need to be careful about point 3, especially when we talk about parentheses in Lisp code\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://imgs.xkcd.com/comics/lisp_cycles.png\" alt=\"parentheses in Lisp\"\u003e\u003c/p\u003e\n\u003cp\u003eor code like the \u003ca href=\"http://www.willamette.edu/~fruehr/haskell/evolution.html\"\u003eCombinatory Haskell programmer\u003c/a\u003e (disclaimer: I have never coded in Haskell)\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-haskell\" data-lang=\"haskell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e f g x \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e f x (g x)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ek\u003c/span\u003e x y   \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e x\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e f g x \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e f (g x)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e f g x \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e f x g\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e f     \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e f (y f)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003econd\u003c/span\u003e p f g x \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e p x \u003cspan style=\"color:#66d9ef\"\u003ethen\u003c/span\u003e f x \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e g x\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003efac\u003c/span\u003e  \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e y (b (cond ((\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e) \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) (k \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)) (b (s (\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e)) (c b pred)))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBut in general I believe that with good coding conventions functional code can be\nreadable and easy to understand.\u003c/p\u003e\n","description":null,"image":null,"permalink":"http://localhost:1313/blog/2016-07-06-last-language/","title":"About uncle Bob's The Last Programming Language keynote"},{"content":"\u003cp\u003eIt\u0026rsquo;s sad that there are no good programming conferences in the South of the Netherlands and especially around the Eindhoven\narea which is considered very innovative and has a strong university. Fortunately, \u003ca href=\"http://nextbuild.nl\"\u003eNextBuild\u003c/a\u003e is an exception.\u003c/p\u003e\n\u003cp\u003e2016 was the second year of the NextBuild conference. I missed the first one so I can\u0026rsquo;t comment about it, but I can say a few\nthings about the 2016 version. First of all it\u0026rsquo;s important to stress that this is a free (gratis) one day conference, which is\nnot the usual case when it comes to conferences (\u003ca href=\"%7B%7Bsite.url%7D%7D/2016/05/21/and-first-conference-of-year-was-dutch.html\"\u003eDutch Clojure Days\u003c/a\u003e was another good exception). And even though NextBuild is free,\nwe were offered free coffee, juice, cookies, sandwiches, and beers. Not bad\u0026hellip;\u003c/p\u003e\n\u003cp\u003eBut let\u0026rsquo;s move one to the interesting parts: the actual content. The agenda was full of \u003ca href=\"http://nextbuild.nl/agenda/\"\u003eparallel talks\u003c/a\u003e so I had to make my\nchoices. But the first keynote was common. Pini Reznik talked about \u003cem\u003eCloud Native Applications and Post-DevOps\u003c/em\u003e. Pini obviously believes in\nsoftware automation since he said that:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eAutonomous software is as inevitable as autonomous cars and planes\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003ePini\u0026rsquo;s ideas involve self-healing and auto-scaling cloud software. Not only I agree with those ideas, but as an operating system fan I would\nlike to see them be supported not only in cloud software, but in all software, including operating systems.\u003c/p\u003e\n\u003cp\u003eThe next keynote I joined was \u003cem\u003eCoding the Next Build\u003c/em\u003e by Niek Palm. This keynote focused on using Docker for everything, especially on stuff that\nare usually not version-controlled, like the build system\u0026rsquo;s configuration. I have not even played with Docker yet, but what I see is that people are\nvery passionate about it. This is usually a bad sign (think of XML), since geeks are not subjective about a technology when they get very\nexcited with it. In general the war between package managers, virtual machines, and containers is a mess. Although I see the point behind Docker, it is\ngenerally accepted that it needs more mature tooling and that it is not the solution for all problems.\u003c/p\u003e\n\u003cp\u003eNext, Joost den Boer talked about \u003cem\u003eGettings started with cool IoT stuff\u003c/em\u003e. What I liked about this keynote was that Joost did not talk about Arduino or\nRaspberry Pi, which by now everybody knows about (or at least has heard of). Instead he showed alternative (and actually cheaper) platforms that can be\nused for IoT development. Particularly, \u003ca href=\"https://github.com/redbear/Duo\"\u003eRedBear Duo\u003c/a\u003e and \u003ca href=\"http://pine64.com\"\u003ePINE64\u003c/a\u003e look very interesting. But for now, I\u0026rsquo;ll stick to my (nowadays old\nschool!) \u003ca href=\"https://developer.mbed.org/platforms/mbed-LPC1768/\"\u003embed LPC1768\u003c/a\u003e microcontroller :)\u003c/p\u003e\n\u003cp\u003eMatthijs Groen spoke about \u003cem\u003eSpeedLazer: Lunch break game development\u003c/em\u003e. Developing a functional game during lunch breaks is remarkable. But apparently it\nis possible using modern frameworks like \u003ca href=\"http://phaser.io\"\u003ePhaser\u003c/a\u003e. Brian Hogan wrote a nice article in June\u0026rsquo;s pragpub about \u003cem\u003eMaking a 2D Game in Phaser\u003c/em\u003e. It\u0026rsquo;s\n\u003ca href=\"http://theprosegarden.com/wp-content/uploads/2013/09/Hogan.pdf\"\u003eavailable for free\u003c/a\u003e, so download it and have some fun!\u003c/p\u003e\n\u003cp\u003eIn the next talk Yegor Bugayenko mentioned the \u003cem\u003eSeven Deadly Sins of a Software Project\u003c/em\u003e. If there\u0026rsquo;s one thing that should be kept from this talk is:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe history of commits is as valuable as the source code\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eIndeed the commit history is very important and that\u0026rsquo;s why we should not create a monster out of it. So this advice goes hand-by-hand with \u003ca href=\"http://chris.beams.io/posts/git-commit/\"\u003eHow to Write\na Git Commit Message\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eNext, I joined the keynote \u003cem\u003eService Discovery in a Microservice Architecture using Consul\u003c/em\u003e by Jos Dirksen. I haven\u0026rsquo;t heard of \u003ca href=\"https://www.consul.io\"\u003eConsul\u003c/a\u003e before so it was\ngood to see some demos about how it can be used in a microservice based architecture. No further comments\u0026hellip;\u003c/p\u003e\n\u003cp\u003eMarcin Czenko\u0026rsquo;s talk was about \u003cem\u003eFast prototyping with React and Firebase\u003c/em\u003e. \u003ca href=\"https://firebase.google.com\"\u003eFirebase\u003c/a\u003e is yet another tool that I didn\u0026rsquo;t know about. I am aware of\n\u003ca href=\"https://facebook.github.io/react/\"\u003eReact\u003c/a\u003e but I have never used it. The nice thing about Firebase is that it supports many languages (including Swift) and many platforms.\u003c/p\u003e\n\u003cp\u003eThe last presentation of the day was \u003cem\u003eModern JavaScript: Object-oriented thinking in a functional world\u003c/em\u003e by Egbert Teeselink. Egbert talked about\n\u003ca href=\"https://github.com/facebook/immutable-js\"\u003eimmutable-js\u003c/a\u003e which is a soft way of introducing support for immutable, persistent data structures in JavaScript. It\u0026rsquo;s nice to see that\nJavaScript is trying to follow the examples of the functional programming languages that I like, namely Clojure and Scala. I\u0026rsquo;m still busy with how\nto write proper modern mutable JavaScript code, but when I\u0026rsquo;m passed this stage immutable-js is something to consider. Although I have the impression that ClojureSript\nis a better approach.\u003c/p\u003e\n\u003cp\u003eSee you next year NextBuild ;)\u003c/p\u003e\n","description":null,"image":null,"permalink":"http://localhost:1313/blog/2016-07-03-and-second-conference-of-year-was-nextbuild/","title":"And the second conference of the year was... NextBuild"},{"content":"\n\u003cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003e\u003ca href=\"http://clojure.org/\"\u003eClojure\u003c/a\u003e is a very interesting programming language. If you haven't checked it yet, go ahead. Apart from being a pragmatic Lisp that offers easy Java interop, it also has a nice community. So far I haven't spent as much time on the language as I would like, but I'm planning to do that.\u003cbr /\u003e\u003cbr /\u003eI was planning to write a few comments about each talk of the first (ever) \u003ca href=\"http://clojuredays.org/\"\u003eDutch Clojure Days\u003c/a\u003e event, but I just noticed that the whole conference is now available \u003ca href=\"https://www.youtube.com/playlist?list=PLjzcwcP9P2LeiVXofnnXcxAqvmVNn3fTD\"\u003eonline\u003c/a\u003e.\u003cbr /\u003e\u003cbr /\u003eIf you don't want to watch every keynote, there's one that intrigued me: \u003ca href=\"https://www.youtube.com/watch?v=at6Q8sNx95A\u0026amp;list=PLjzcwcP9P2LeiVXofnnXcxAqvmVNn3fTD\u0026amp;index=3\"\u003eConversational Computing:  How Okasaki made McCarthy right yet again\u003c/a\u003e. I liked the way Michiel is trying to connect the dots.\u003cbr /\u003e\u003cbr /\u003eAnd if you liked my recommendation and want a second one, try \u003cspan class=\"watch-title\" dir=\"ltr\" id=\"eow-title\" title=\"Clojure for Data Science  the good, the bad, and the ugly by Simon Belak\"\u003e\u003ca href=\"https://www.youtube.com/watch?v=uZ_3phggAJ8\u0026amp;index=4\u0026amp;list=PLjzcwcP9P2LeiVXofnnXcxAqvmVNn3fTD\"\u003eClojure for Data Science:  the good, the bad, and the ugly\u003c/a\u003e. Simon covers many nice concepts of functional programming, without being afraid to criticize the ugly parts and express his ideas on how things can be improved.\u003c/span\u003e\u003cbr /\u003e\u003cspan class=\"watch-title\" dir=\"ltr\" id=\"eow-title\" title=\"Clojure for Data Science  the good, the bad, and the ugly by Simon Belak\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003cspan class=\"watch-title\" dir=\"ltr\" id=\"eow-title\" title=\"Clojure for Data Science  the good, the bad, and the ugly by Simon Belak\"\u003eI'm very glad that I attended this conference. It was free (gratis) but thanks to the kind sponsors we had everything (coffee, muffins, and sandwiches). The venue was nice, and the location great (well, I love Amsterdam anyway). So yeah, nice work guys and until next year happy Lisping in Clojure ;)\u003c/span\u003e\u003c/div\u003e","description":null,"image":null,"permalink":"http://localhost:1313/blog/2016-05-21-and-first-conference-of-year-was-dutch/","title":"And the first conference of the year was... Dutch Clojure Days"},{"content":"\n\u003cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003eLast month I followed a course about Git. The name of the course was \"Git key user\" and it was organized by \u003ca href=\"http://tmcporch.com/\"\u003eTMC\u003c/a\u003e.\u003cbr /\u003e\u003cbr /\u003eObviously Git is a tool that you learn by doing, and indeed the lesson of the day was the following: \"Do not afraid to experiment\".\u003cbr /\u003e\u003cbr /\u003eIn general Git behaves as a \u003ca href=\"http://www.jayway.com/2013/03/03/git-is-a-purely-functional-data-structure/\"\u003epurely functional data structure\u003c/a\u003e\u0026nbsp;(or a copy-on-write filesystem)\u0026nbsp;in the sense that it never overwrites or directly removes data. All orphan nodes are kept for two weeks (I assume that this is configurable) and only if you don't touch them for that period of time they will be cleaned by Git's garbage collector.\u003cbr /\u003e\u003cbr /\u003eDuring the course we have learnt how to use:\u003cbr /\u003e\u003cbr /\u003e\u003cul style=\"text-align: left;\"\u003e\u003cli\u003e\u003cspan style=\"font-family: \u0026quot;courier new\u0026quot; , \u0026quot;courier\u0026quot; , monospace;\"\u003egit commit --amend\u003c/span\u003e to make changes related to the most recent commit. Examples include writing a better commit message or removing a file that is not required. The same actions can be applied \u0026nbsp;to any past commit using a combination of \u003cspan style=\"font-family: \u0026quot;courier new\u0026quot; , \u0026quot;courier\u0026quot; , monospace;\"\u003egit rebase -i\u003c/span\u003e and \u003cspan style=\"font-family: \u0026quot;courier new\u0026quot; , \u0026quot;courier\u0026quot; , monospace;\"\u003egit commit --amend\u003c/span\u003e.\u003c/li\u003e\u003cli\u003e\u003cspan style=\"font-family: \u0026quot;courier new\u0026quot; , \u0026quot;courier\u0026quot; , monospace;\"\u003egit cherry-pick\u003c/span\u003e to apply specific changes from one or more branches to a destination branch. This is useful when for instance a required feature was developed to an incorrect branch.\u003c/li\u003e\u003cli\u003e\u003cspan style=\"font-family: \u0026quot;courier new\u0026quot; , \u0026quot;courier\u0026quot; , monospace;\"\u003egit checkout\u003c/span\u003e combined with \u003cspan style=\"font-family: \u0026quot;courier new\u0026quot; , \u0026quot;courier\u0026quot; , monospace;\"\u003egit stash\u003c/span\u003e to clean up a messed up repository.\u003c/li\u003e\u003cli\u003e\u003cspan style=\"font-family: \u0026quot;courier new\u0026quot; , \u0026quot;courier\u0026quot; , monospace;\"\u003egit rebase -i\u003c/span\u003e with the options s(quash) and p(ick) to group/restructure related commits and create a better/cleaner commit history.\u003c/li\u003e\u003cli\u003e\u003cspan style=\"font-family: \u0026quot;courier new\u0026quot; , \u0026quot;courier\u0026quot; , monospace;\"\u003egit bisect\u003c/span\u003e to go back to a good version of a branch. That's necessary after finding out (too late) that the current branch is broken but you are not sure when the bug that broke the code was introduced.\u003c/li\u003e\u003c/ul\u003e\u003cdiv\u003eOverall, it was nice to see some concrete use cases of the commands because Git has so many features that it's not hard to get lost...\u003c/div\u003e\u003cbr /\u003e\u003cbr /\u003e\u003c/div\u003e","description":null,"image":null,"permalink":"http://localhost:1313/blog/2016-04-17-course-review-git-key-user/","title":"Course review: Git key user"},{"content":"\n\u003cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003e\u003cdiv class=\"description markdown collapsible\" style=\"display: block;\"\u003e                \u003cbr /\u003e\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\u003ca href=\"http://3.bp.blogspot.com/-2EpVD--5rCA/VlR2jm1W2II/AAAAAAAAAKY/L8DEgKZl4Dk/s1600/rwdata_xlargecover.jpg\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" height=\"200\" src=\"http://3.bp.blogspot.com/-2EpVD--5rCA/VlR2jm1W2II/AAAAAAAAAKY/L8DEgKZl4Dk/s200/rwdata_xlargecover.jpg\" width=\"166\" /\u003e\u003c/a\u003e\u003c/div\u003e\u003cbr /\u003eThat's a really nice book. From the seven databases  that are covered I was familiar with PostgreSQL and only briefly with  Neo4j. So the book gave me the chance to explore some more databases and  find out about their strengths and weaknesses. In the following  paragraphs I'll explain what I found nice and what not so nice about  each of them. Before I start: if you are planning to buy this book, I  want to warn you that some features are deprecated or even removed,  because some of the database systems have evolved since the time the  book was written (2012). For example the largest part of the Neo4j  chapter is useless, because it doesn't use the Cypher language.\u003cbr /\u003e\u003cbr /\u003e \u003cem\u003ePostgreSQL rocks\u003c/em\u003e. It's a very powerful RDBMS and I  acknowledge that since I have used it professionally. Postgres is  mature, fast, and rock-solid. For those reasons I would choose it for  all problems that play nicely with relational DBs. And yes, an RDBMS is  not the answer to all problems. For example distributed computations do  not fit well into this model. Scaling is limited to making your single  DB server/cluster more powerful by upgrading/extending its hardware. And  not all problems require full ACID compliance and strict schema  enforcement.\u003cbr /\u003e\u003cbr /\u003e \u003cem\u003eRiak\u003c/em\u003e is flexible. Being able to interact with a DB using a REST interface and a tool like \u003ccode\u003ecurl\u003c/code\u003e should not be underestimated. What I like about Riak is that you can  store whatever resource (be it a document, an image, etc.) you like on  the fly and map it to your URL of preference. It just works! I see Riak  as a Web filesystem that supports distributed computations through  mapreduce. But Riak also supports connecting resources and traversing  between those connections (link walking). On the down side configuring,  and understanding some Riak concepts (for example conflict resolution  and adding indexes) is currently a pain. And you can only find prebuilt  binaries for your operating system (Windows is not supported at all) on basho.com.\u003cbr /\u003e\u003cbr /\u003e \u003cem\u003eHBase\u003c/em\u003e is unusual. It takes some time to understand the way a  column-oriented DB works. What I found great is that versioning is  builtin. If you care about data history that's a big deal. Another plus:  compression and fast lookups using bloom filters are also builtin.  Great features, that can save a lot of time of development. The  negatives: no REST interface, complex configuration, and no prebuilt  binaries -- you need to compile HBase on your own, so forget Windows  unless you like pain.\u003cbr /\u003e\u003cbr /\u003e \u003cem\u003eMongoDB\u003c/em\u003e is all about JavaScript. Having the full  support of a powerful language like Javascript while using a DB is very  valuable. Being able to save JSON documents adds a lot of flexibility  since they can nest arbitrary. But this flexibility comes with a cost:  updating a document means replacing it without a warning, deleting  specific elements of a document is not supported and debugging  JavaScript code is a pain. On the contrary: the mapreduce support of  Mongo is nice, and it also supports indexing documents. Configuring  replicas and sharding is also quite easy. And operating system support  is very good.\u003cbr /\u003e\u003cbr /\u003e \u003cem\u003eCouchDB\u003c/em\u003e is cute. The Futon Web interface makes CouchDB very user-friendly. Its REST interface and the ability to use \u003ccode\u003ecurl\u003c/code\u003e makes it developer-friendly. Moreover, CouchDB has an interesting  approach regarding replication, since all servers are treated equally  (no master-slave model). The same is true for conflict resolution: one  of the conflicting updates is automatically considered the winner, and  this is consistent through all nodes. But that's not necessarily the  \"correct\" update... One last thing: CouchDB is easy to install on all  popular platforms.\u003cbr /\u003e\u003cbr /\u003e \u003cem\u003eNeo4j\u003c/em\u003e is \u003cstrong\u003ethe\u003c/strong\u003e graph database. There are  simply no competitors when it comes to modelling relationships (think of  social networks, movies, food, drinks) using graphs. Neo4j has its own  query language (Cypher) and a very nice browser that makes experimenting  easy. The documentation is also extensive and interactive. Building a  cluster is easy. The negatives: learning curve (new concepts and new  language), the enterprise edition is not free (gratis).\u003cbr /\u003e\u003cbr /\u003e \u003cem\u003eRedis\u003c/em\u003e is generic. It's not a DB as such, but more an  in-memory data structure storage toolkit. Redis is simple to use, fast,  and supports transactions. Its commands have strange names though,  probably the result of an effort to avoid verbosity. Because it is very  generic, Redis can be used as a fast in-memory cache for applications  that require high performance.\u003cbr /\u003e\u003cbr /\u003e Final comments: Some people have proposed a better definition of the  name NoSQL: Not only SQL. I like this definition. Similar to programming  paradigms and languages, different database systems have both strengths  and weaknesses. Why not use more than one to achieve our goals? That's  the main idea behind the polyglot persistence concept, as suggested by  the authors. Polyglot persistence means using more than one databases to  target different application layers. For example Redis for caching,  Neo4j for modelling relationships, and PostgreSQL for persistence.\u003cbr /\u003e              \u003c/div\u003e\u003c/div\u003e","description":null,"image":null,"permalink":"http://localhost:1313/blog/2015-11-24-book-review-seven-databases-in-seven/","title":"Book review: Seven Databases in Seven Weeks"},{"content":"\n\u003cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003eLike \u003ca href=\"http://sakiskasampalis.blogspot.nl/2014/03/joy-of-coding-2014-my-impressions.html\"\u003elast year\u003c/a\u003e, Joy of Coding 2015 was a great conference. This year the conference took place during May, for once again in Rotterdam. The organisation was similar to that of last year: A few common talks, but also parallel talks and workshops.\u003cbr /\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003eThe conference this year started with a keynote by Chris Granger (@ibdknox): \"Programming as distributed cognition: Defining a super power\". I missed the beginning of the keynote but AFAIU Chris wanted to stress the importance of using programming as an exploration tool. In that sense, we should create programming tools that make it easier for scientists to model problems and experiment quickly. His tools\u0026nbsp;\u003ca href=\"http://lighttable.com/\"\u003eLight Table\u003c/a\u003e\u0026nbsp;and Eve focus on those aspects.\u003c/div\u003e\u003cdiv\u003e\u003cdiv style=\"text-align: left;\"\u003e\u003cbr /\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv\u003eNext, I watched the presentation \"Joy of testing\" by John Hughes. The quote of this presentation was \"Do not write tests, generate them!\". Indeed, using the Erlang version of QuickCheck, John showed a live demo of discovering and fixing bugs using generated tests. John also explained his personal experiences of using the same tools to discover and fix bugs that existed in concurrent Erlang production code (AFAIR the code was used in the automotive industry).\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003eThe next speaker was Laurent Bossavit (@Morendil). This keynote was more over psychology than technology. But it seems that there's a deep connection between the two. Laurent suffered by depression and according to him depression is a feature and not a bug. It is very important to be able to debug ourselves, and not just programs. We should stay away from things that make as sad and focus on the things that make us happy. As an example, you might be able to find a COBOL job that pays well, but does COBOL really make you happy? Maybe a job with a lower salary but more fun (think of python, arduino, etc.) is better for you.\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003eThe next keynote was about \"Mutation testing\" by Roy van Rijn. Roy believes that mutation testing, a technique for measuring the quality of unit tests, is better than code coverage. There's an actual Java tool that can be used to explore this area: \u003ca href=\"http://mutationtesting.org/\"\u003eJudy\u003c/a\u003e. A mutant is a version of a program with a modified operator. For example replacing logical AND with logical OR. Killing a mutant means that the incorrect behaviour of the modified code is detected properly and reported, and that's what basically Judy does. I've never tried mutation testing. Maybe one day I will...\u003cbr /\u003e\u003cbr /\u003eI enjoyed the next talk by Crista Lopes (@cristalopes) a lot. Crista is the author of a really nice programming book that anyone who is involved with programming should read:\u0026nbsp;\u003ca href=\"http://www.amazon.com/Exercises-Programming-Style-Cristina-Videira/dp/1482227371/\"\u003eExercises in Programming Style\u003c/a\u003e. The book uses a simple concept: Implement the same program using the \u0026nbsp;same language (Python) in 33 different styles! A style is basically a form of a programming paradigm (think of object-oriented, functional, procedural, etc.). During the talk Crista demonstrated a subset of the 33 styles of her book. The purpose of Crista's talk (and AFAIU that's also the focus point of the book) was not to compare the different styles and take sides, but to stress the importance of recognising and understanding the different styles. I can't agree more. There's no best programming style for all purposes, and we should be able to work with all of them. BTW there's a GitHub \u003ca href=\"https://github.com/crista/exercises-in-programming-style\"\u003erepository\u003c/a\u003e with the styles.\u003cbr /\u003e\u003cbr /\u003eThe workshop that I picked for Joy of Coding 2015 was about \"Property based testing\", by Marc Evers, Rob Westgeest, and Willem van den Ende. Property based testing is about the automatic generation of unit tests for a system by describing its properties. The benefit of using property based testing instead of unit testing is that it (a) takes less time since the tests are generated, (b) is more reliable than manual writing since humans tend to forget to cover all possible cases.\u003cbr /\u003eDuring the workshop we used Javascript (NodeJs and JSVerify) and went through several examples.\u003cbr /\u003e\u003cbr /\u003eThe closing keynote couldn't be better. A mix of jokes and programming advices by Kevlin Henney (@KevlinHenney), by checking nice (and not so nice) pieces of code written by various programmers in different languages. Studying code written by others is something that is important and we all need to do.\u003cbr /\u003e\u003cbr /\u003eYet another good year for Joy of Coding. I hope that it will continue to use the same successful recipe in the years to come... :)\u003c/div\u003e\u003c/div\u003e","description":null,"image":null,"permalink":"http://localhost:1313/blog/2015-11-20-joy-of-coding-2015-review/","title":"Joy Of Coding 2015 Review"},{"content":"\n\u003cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003e\u003cdiv class=\"description markdown collapsible\"\u003e                \u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\u003ca href=\"http://2.bp.blogspot.com/-c6J5_vJHboc/VkB_haMGIvI/AAAAAAAAAKA/2Q5WiYw-ljk/s1600/41D%252BipxJ7tL._SX331_BO1%252C204%252C203%252C200_.jpg\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" height=\"320\" src=\"http://2.bp.blogspot.com/-c6J5_vJHboc/VkB_haMGIvI/AAAAAAAAAKA/2Q5WiYw-ljk/s320/41D%252BipxJ7tL._SX331_BO1%252C204%252C203%252C200_.jpg\" width=\"213\" /\u003e\u003c/a\u003e\u003c/div\u003e\u003cbr /\u003eThis was my first JavaScript book and I consider it a  good overview covering the pros and cons of the language. The author  gives good advice regarding which features of pure JavaScript are fine  to use and for which features a framework should be preferred to avoid  browser incompatibilities.\u003cbr /\u003e\u003cbr /\u003e Many popular applications are demonstrated (custom tooltips, infinite  scrolling, form validation, autocompletion, lightbox, 3rd party APIs)  and concepts such as client vs server programming are clearly explained.  Christophe's \u003ca href=\"http://www.amazon.com/Pragmatic-Guide-JavaScript-Programmers/product-reviews/1934356670/ref=cm_cr_dp_see_all_summary?ie=UTF8\u0026amp;showViewpoints=1\u0026amp;sortBy=byRankDescending\"\u003efocus on Prototype\u003c/a\u003e is not a problem for me. It's his  favorite framework and the one that he knows well, so it make sense that  he's using it for the demos.\u003cbr /\u003e\u003cbr /\u003eOne practical problem: this book is not maintained any more, and as a consequence a few examples are broken, due to a domain that has expired and changes to the Twitter API. I contacted the author on \u003ca href=\"https://github.com/tdd/pragmatic-javascript/issues/2\"\u003eGitHub \u003c/a\u003eand he confirmed it. But still, for a book that was published five years ago it's a nice compact guide to people who are familiar with programming and want to focus on the specifics of JavaScript.\u003cbr /\u003e              \u003c/div\u003e\u003c/div\u003e","description":null,"image":null,"permalink":"http://localhost:1313/blog/2015-11-09-book-review-pragmatic-guide-to/","title":"Book review: Pragmatic Guide to JavaScript"},{"content":"\n\u003cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003eThe last training course that I followed was about programming microcontrollers. The course was given by Leon van Snippenberg, who has very good expertise in microcontrollers.\u003cbr /\u003e\u003cbr /\u003eFor the practical part of the course we used the Microchip dsPIC33F, a 16-bit architecture 40 MHZ microcontroller (system on a chip solution). I admit that I'm not very fond of this proprietary platform, so I enjoyed the theoretical part of the course much more than the practical. I would be more excited if we have used an open hardware solution like arduino, Raspberry Pi, or something comparable.\u003cbr /\u003e\u003cbr /\u003eA few highlights from the course:\u003cbr /\u003e\u003cul style=\"text-align: left;\"\u003e\u003cli\u003eA three-operand assembly instruction does not necessarily mean that three registers are used. For example \u003cspan style=\"font-family: Courier New, Courier, monospace;\"\u003eADD W0, W1, W0\u003c/span\u003e uses only one register.\u003c/li\u003e\u003cli\u003eMost microcontrollers use the Harvard instead of the\u0026nbsp;\u003cspan style=\"color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22px;\"\u003eVon Neumann\u003c/span\u003e\u0026nbsp;architecture. This means that there are two distinct address buses, as well as two data buses (instead of one address and one data bus).\u003c/li\u003e\u003cli\u003eWhen writing code in assembly we should avoid thinking about code optimisation, since the code is usually very fast to execute (but very slow to produce).\u003c/li\u003e\u003cli\u003eA common problem when programming microcontrollers is \u003ca href=\"http://www.piclist.com/techref/readmodwrite.htm\"\u003eread-modify-write\u003c/a\u003e. One way to solve it is using shadow registers.\u003c/li\u003e\u003cli\u003eWhen programming a microcontroller using a C interface and interrupts, it is very important to use the \u003cspan style=\"font-family: Courier New, Courier, monospace;\"\u003evolatile\u003c/span\u003e keyword to disable optimisations that might remove code that seems to be dead but is actually used. Because of that, it is also very important to test the code with all compiler optimisation levels enabled, to ensure that it doesn't break.\u003c/li\u003e\u003cli\u003eThe hardware timers of a platform do not need to follow the same architecture with the processor. For example a platform might use a 16-bit processor with 32-bit timers.\u003c/li\u003e\u003cli\u003eBuffers and interrupts are used to solve communication problems between different devices (e.g. a computer communicating with a microcontroller using the serial port).\u003c/li\u003e\u003cli\u003eWhen dealing with non-deterministic problems, disabling interrupts is the most favoured solution.\u003c/li\u003e\u003cli\u003eUsing a real-time operating system (RTOS) simplifies programming, because we avoid the need to write complex state machines and custom schedulers (those problems are already solved in the RTOS).\u003c/li\u003e\u003cli\u003eMulticore support in RTOS is a challenge (unsolved problem?).\u003c/li\u003e\u003c/ul\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003eWe (me and my colleague) challenged Leon by questioning why would one prefer a much more expensive solution like the dsPIC* family of Microchip instead of Raspberry Pi or arduino. The price of the latest Pi is unbeatable. The response was that we should use whatever fits our purpose, and that the Pi manages to achieve such a low price because its makers can estimate in advance the minimum numbers of units that will be sold. Those manufacturing deals are critical in forming the end price of a prototyping platform.\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003eSo far I only own an mbed LPC1768 and I'm very satisfied with it. I hope that I'll build some more advanced prototypes in the future, but you have to start from something. I began with flashing LEDs\u003cbr /\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003e\u003ciframe allowfullscreen=\"\" frameborder=\"0\" height=\"889\" mozallowfullscreen=\"\" src=\"https://player.vimeo.com/video/120307094\" webkitallowfullscreen=\"\" width=\"500\"\u003e\u003c/iframe\u003e\u003cbr /\u003e\u003cbr /\u003e\u003cbr /\u003eContinued with adding some basic components like a button\u003cbr /\u003e\u003cbr /\u003e\u003ciframe allowfullscreen=\"\" frameborder=\"0\" height=\"889\" mozallowfullscreen=\"\" src=\"https://player.vimeo.com/video/120957456\" webkitallowfullscreen=\"\" width=\"500\"\u003e\u003c/iframe\u003e\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003cbr /\u003eAnd at some point I built my first practical prototype: a darkness-activated LED\u003cbr /\u003e\u003cbr /\u003e\u003c/div\u003e\u003ciframe allowfullscreen=\"\" frameborder=\"0\" height=\"889\" mozallowfullscreen=\"\" src=\"https://player.vimeo.com/video/120970019\" webkitallowfullscreen=\"\" width=\"500\"\u003e\u003c/iframe\u003e \u003cbr /\u003eIsn't that nice? In my future posts the plan is to spend more time on explaining the code of prototypes like the last one. For now you can check my \u003ca href=\"http://developer.mbed.org/users/faif/\"\u003embed repository\u003c/a\u003e page.\u003c/div\u003e","description":null,"image":null,"permalink":"http://localhost:1313/blog/2015-03-15-playing-with-microcontrollers/","title":"Playing with microcontrollers"},{"content":"\n\u003cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003eAfter \u003ca href=\"http://sakiskasampalis.blogspot.nl/2013/11/my-first-book-review.html\"\u003ereviewing\u003c/a\u003e \u003ca href=\"http://sakiskasampalis.blogspot.nl/2014/05/being-technical-reviewer-again.html\"\u003etwo\u003c/a\u003e books about Python, people from Packt asked me if I was willing to write a Python book. I'm glad to see that my first book, \u003ca href=\"https://www.packtpub.com/application-development/mastering-python-design-patterns\"\u003eMastering Python Design Patterns\u003c/a\u003e is published!\u003cbr /\u003e\u003cbr /\u003eAs I expected, writing a book is much tougher than reviewing one. Especially if you have a full-time job, like in my case. I had to deliver a chapter about every week. This is very challenging, since it means that I had to spend many evenings and weekends focusing on delivering a chapter on time.\u003cbr /\u003e\u003cbr /\u003eI hope that my book will be appreciated by the Python (3.x) community. I tried to focus on doing things the Python way instead of reproducing Java-ish or C++-style solutions. To be honest I preferred a different title: I recommended the title \"Idiomatic Python Design Patterns\" but my proposal was rejected, mainly for marketing reasons.\u003cbr /\u003e\u003cbr /\u003eIf you are also considering writing a book, I think that it is a very good idea, but take into account the following:\u003cbr /\u003e\u003cbr /\u003e\u003cul style=\"text-align: left;\"\u003e\u003cli\u003eDo you have the time to do it? Unless your book is self-published, you'll need to sign a contract with a publisher and that means that there will be deadlines. Make sure that you discuss it first with your partner/family, since it is a demanding task.\u003c/li\u003e\u003cli\u003eDoes it fill a missing gap? I don't recommend you to write a book just for the money (yes, you are paid for writing the book and depending on the contract you can also get a share from the sales). I have seen many examples of poorly-written books that were created only because the author wanted to make some money. Don't do it. It might be good for you pocket, but it can harm your reputation, your career, and your psychology (think of bad reviews).\u003c/li\u003e\u003c/ul\u003e\u003cdiv\u003eTo expand a little bit more on point two: I feel that my book is indeed filling a gap. Although there are other books about Design Patterns in Python, none of them focuses on Python 3. In fact, I reviewed one of them, and apart from targeting only Python 2.x, IMHO it is not using idiomatic Python solutions in many cases.\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003eMy book is not perfect in any way. The lack of time meant that some examples had to be smaller and more trivial than expected. But this is part of the game. If you are working full-time and you are writing a book, time is your enemy! Be prepared to make compromises...\u003c/div\u003e\u003c/div\u003e","description":null,"image":null,"permalink":"http://localhost:1313/blog/2015-02-02-on-writing-book/","title":"On writing a book"},{"content":"\n\u003cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003e\u003cb\u003eUpdate:\u003c/b\u003e Markus was kind enough to comment on my review. Regarding the \"minimise the number of tables to limit joins\" he said:\u003cbr /\u003e\u003cblockquote class=\"tr_bq\"\u003e\u003cspan style=\"font-family: Helvetica; font-size: 12px;\"\u003eit is often the best approach to store some attribute redundant (e.g.\u0026nbsp;\u003c/span\u003e\u003cspan style=\"font-family: Helvetica;\"\u003e\u003cspan style=\"font-size: 12px;\"\u003enormalised\u0026nbsp;as before plus wherever needed). Maintenance of this\u0026nbsp;\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"font-family: Helvetica; font-size: 12px;\"\u003eredundancy should be delegated to the database whenever possible (e.g.\u0026nbsp;\u003c/span\u003e\u003cspan style=\"font-family: Helvetica;\"\u003e\u003cspan style=\"font-size: 12px;\"\u003eusing triggers or\u0026nbsp;materialised\u0026nbsp;view). You should not do that before\u0026nbsp;having those performance problems (avoid \"premature\u0026nbsp;optimisation\").\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"font-family: Helvetica; font-size: 12px;\"\u003eReducing the number of joins is a good way to get performance. But only once you are in that situation. And of course, there are other, simpler ways to improve performance that should be leveraged first (e.g, good-old indexing).\u003c/span\u003e\u003c/blockquote\u003eSo I'm glad that we agree that normalisation is a good thing and that we should only try to find alternative solutions if nothing else (e.g. proper indexing) works.\u003cbr /\u003e\u003cbr /\u003eMarkus also made an important comment about the column order in the WHERE clause that is not clarified in my original post:\u003cbr /\u003e\u003cblockquote class=\"tr_bq\"\u003e\u003cul style=\"text-align: left;\"\u003e\u003cli\u003e\u003cspan style=\"font-family: Helvetica; font-size: 12px;\"\u003eThe column order in indexes matters a lot\u003c/span\u003e\u0026nbsp;\u003c/li\u003e\u003c/ul\u003e\u003c/blockquote\u003e\u003cblockquote class=\"tr_bq\"\u003e\u003cul style=\"text-align: left;\"\u003e\u003cli\u003e\u003cspan style=\"font-family: Helvetica; font-size: 12px;\"\u003eThe column order in the WHERE clause doesn't matter (rare exceptions exist, but generally, it doesn't!).\u003c/span\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/blockquote\u003e\u003cbr /\u003e\u003cbr /\u003eThe original post starts here...\u003cbr /\u003e\u003cbr /\u003eLast \u003cstrike\u003eOctober\u003c/strike\u003e\u0026nbsp;November I followed a course related to the performance of SQL. The course was given by \u003ca href=\"http://use-the-index-luke.com/\"\u003eMarkus Winand\u003c/a\u003e. Although we don't agree on everything (for example I don't like the \"create as few tables as possible to minimise joins and achieve better performance\" principle because it is against normalisation) Markus has a great knowledge of general and RDBMS-specific performance related issues.\u003cbr /\u003e\u003cbr /\u003eI'm glad that I followed this course. Markus gave us a copy of \u003ca href=\"http://sql-performance-explained.com/?utm_source=UTIL\u0026amp;utm_medium=main\u0026amp;utm_campaign=second\"\u003ehis book\u003c/a\u003e which is very compact and to the point. This is an example of a book that I would never consider reading but it turns out to be a hidden gem. I recommend it to everyone working with relational databases.\u003cbr /\u003e\u003cbr /\u003eIt took me some time to write this post because I wanted to read the book first. In this book you will find things that you don't know for sure. For example, did you know that:\u003cbr /\u003e\u003cul style=\"text-align: left;\"\u003e\u003cli\u003eWhen building indexes on more than one columns (concatenated indexes), the order of the columns matters a lot?\u003c/li\u003e\u003cli\u003eThe order of the statements in the \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003eWHERE\u003c/span\u003e part of a query affects whether a concatenated index is used or not?\u003c/li\u003e\u003cli\u003e\u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003eLIKE\u003c/span\u003e expressions with leading wildcards (eg. \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003e'%SQL'\u003c/span\u003e) cannot make use of an index?\u003c/li\u003e\u003cli\u003eORMs can cause big performance problems because of the bad queries that they generate?\u003c/li\u003e\u003cli\u003eSelecting only the necessary columns (avoid \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003eSELECT *\u003c/span\u003e) can improve the performance of joins?\u003c/li\u003e\u003cli\u003eAn index that covers all the columns of an SQL query (including the columns of the \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003eSELECT\u003c/span\u003e part) does not need to access any other data structures except the index and improves the performance of a query enormously?\u003c/li\u003e\u003cli\u003e\u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003eORDER BY\u003c/span\u003e and \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003eGROUP BY\u003c/span\u003e can also be indexed?\u003c/li\u003e\u003c/ul\u003e\u003cbr /\u003eThe main message of the book is that indexes should be built by us, the developers, not by DBAs or anyone else. That's because only we know how the data are queried, and therefore only we can build the proper indexes.\u003cbr /\u003e\u003cbr /\u003ePersonally, I'm very sad to see how many features that are supported by other RDBMS are not supported by MySQL. To mention a few: indexing functions and expressions, partial indexes, indexing using \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003eASC\u003c/span\u003e and \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003eDESC\u003c/span\u003e, window functions. Fortunately, MariaDB is getting there and I hope that we'll switch to it (at work) at some point.\u003c/div\u003e","description":null,"image":null,"permalink":"http://localhost:1313/blog/2015-01-14-course-review-sql-performance/","title":"Course review: SQL Performance"},{"content":"\n\u003cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003eLast week I followed a two-day course called \"Language Engineering with MPS\". The course was given by \u003ca href=\"http://voelter.de/\"\u003eMarkus Voelter\u003c/a\u003e.\u003cbr /\u003e\u003cbr /\u003e\u003ca href=\"https://www.jetbrains.com/mps/\"\u003eMPS\u003c/a\u003e is a free software (using the Apache 2.0 license) framework built on top of Intellij IDEA. Both MPS and Intellij IDEA are actively developed by JetBrains. MPS can be used for implementing Domain-Specific Languages (DSLs), usually by extending a base language which by default is Java. Extending Java is not a requirement. In fact, Markus is involved in the development of \u003ca href=\"http://mbeddr.com/\"\u003embeddr,\u003c/a\u003e which uses a clean version of the C language as the base for targeting embedded system development.\u003cbr /\u003e\u003cbr /\u003eAccording to Markus textual-based language development tools such as Yacc, lex, Bison, ANTLR, and so forth are fading out because they lack support of an intelligent IDE. Although I'm not fully convinced about this statement I agree that IDE support when developing DSLs is a big plus. Do not overlook IDE support. It gives you (for free) autocompletion, a nice user interface, very readable error messages, instant deployment and debugging, and much more.\u003cbr /\u003e\u003cbr /\u003eDuring the course we covered only external (context-free) DSLs,  because Markus considers internal (context-sensitive) DSLs hacky, since  they usually rely on the metaprogramming features of a specific language  (Ruby, Lisp, etc.). This is most times either very limited or too  complex (for example you end up with unreadable error messages).\u003cbr /\u003e\u003cbr /\u003eMarkus has a good knowledge in language design. He gave us some good tips regarding DSL development, such as forbidding Turing-completeness in the DSL to make the static analysis of a code block possible. Another tip was to support many keywords in the DSL (instead of having as few keywords as possible, which is considered good in general purpose languages like C) for giving the chance to the DSL user to provide hints  about the performance and behavior of a code block. For example provide two keywords  for \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003efor\u003c/span\u003e loops: the default \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003efor\u003c/span\u003e is (or actually tries to be) concurrent, while the alternative \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003eforseq\u003c/span\u003e is always sequential.\u003cbr /\u003e\u003cbr /\u003eOur main course activity was to use MPS for developing an Entities DSL. An Entity is an abstraction that can have a variable number of attributes with validated types. We created our own typing system for that (using Java's typing system as a basis), which supports strings and numbers. An Entity can also have references to other Entities. Finally, we can define functions inside an Entity using the \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003efun\u003c/span\u003e keyword. Here's an example of an Entity:\u003cbr /\u003e\u003cbr /\u003e\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\u003ca href=\"http://2.bp.blogspot.com/-ok0xc7r19Lo/VGjorqzg9gI/AAAAAAAAAIw/A1SfNoafxD4/s1600/entity.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" src=\"http://2.bp.blogspot.com/-ok0xc7r19Lo/VGjorqzg9gI/AAAAAAAAAIw/A1SfNoafxD4/s1600/entity.png\" height=\"167\" width=\"400\" /\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\u003ca href=\"http://3.bp.blogspot.com/-EnvUEcH9CXI/VGjnMD73AkI/AAAAAAAAAIk/w_NgdkPACPs/s1600/entity.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cbr /\u003e\u003c/a\u003e\u003c/div\u003e\u003cbr /\u003eNotice how we can create custom error messages for informing the DSL users when they are trying to do erroneous things such as define a variable with the same name twice. Another error reported (underlined in red on the picture) is when the user tries to return an incorrect type from a function, in this case a string from a function that should return an integer (notice the \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003e:number\u003c/span\u003e part).\u003cbr /\u003e\u003cbr /\u003eFrom what I've seen in the course I feel that MPS is an interesting tool with the following pros and cons.\u003cbr /\u003e\u003cbr /\u003ePros:\u003cbr /\u003e\u003cul style=\"text-align: left;\"\u003e\u003cli\u003eAutocompletion.\u003c/li\u003e\u003cli\u003eReadable error messages. Even if a message is not very readable you can jump to the source code immediately using a single click.\u003c/li\u003e\u003cli\u003eNice user interface.\u003c/li\u003e\u003cli\u003eIn general it offers all the goodies of an IDE. Integrated debugging, many ways of searching, refactoring, and so forth. \u003c/li\u003e\u003c/ul\u003eCons:\u003cbr /\u003e\u003cul style=\"text-align: left;\"\u003e\u003cli\u003eThe DSL user (domain expert) needs to install MPS for using our DSL. This usually requires some effort, because we need to create a customized (clean) version of MPS with all development features hidden/disabled to avoid confusing the user.\u003c/li\u003e\u003cli\u003eLike all tools, MPS requires time and effort to feel confident with it. Especially typing in the MPS editor can be confusing and frustrating because it is very different from free-text typing which is the usual way of writing code.\u003c/li\u003e\u003cli\u003eDocumentation. There is only one book targeting explicitly MPS so far.\u003c/li\u003e\u003cli\u003eLag on Windows. The hired laptops that we used during the course were quite powerful but MPS was still lagging on Windows. I have tested it on GNU/Linux and I don't have any issues (and neither did Markus on his MacBook). It seems that MPS has performance issues on Windows.\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e","description":null,"image":null,"permalink":"http://localhost:1313/blog/2014-11-16-course-review-language-engineering-with/","title":"Course review: Language Engineering with MPS"},{"content":"\n\u003cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003e\u003cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003e\u003cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003eRecently I faced an SQL performance issue. What I wanted to do was rather common: Apply the (set) difference operation on two tables.\u003cbr /\u003e\u003cbr /\u003eIn relational algebra, the difference operation applied on two tables \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003eA\u003c/span\u003e and \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003eB\u003c/span\u003e gives as a result a new table \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003eC\u003c/span\u003e that contains all the elements that are in table \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003eA\u003c/span\u003e but \u003cb\u003earen't\u003c/b\u003e in table \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003eB\u003c/span\u003e.\u003cbr /\u003e\u003cbr /\u003eThat's a very common operation. A common example is having the table \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003eStudents\u003c/span\u003e and the table \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003eGrades\u003c/span\u003e. To find all Students that have not been graded yet you can use the difference operation. Or in terms of set theory and using \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003e\\\u003c/span\u003e as the notation of difference:\u003cbr /\u003e\u003cbr /\u003e\u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003e{1,2,3}\u0026nbsp;∖\u0026nbsp;{2,3,4} = {1}\u003c/span\u003e\u003cbr /\u003e\u003cbr /\u003eSome RDBMS have the difference operation built-in using the \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003eEXCEPT\u003c/span\u003e keyword. So the query in this case would be something like:\u003cbr /\u003e\u003cscript src=\"https://gist.github.com/faif/bee76fa49c0885d7b2dc.js?file=except.sql\"\u003e\u003c/script\u003e \u003cbr /\u003eBut that's not the case for MySQL. MySQL does not support \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003eEXCEPT\u003c/span\u003e but we can get the same result using a \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003eLEFT (OUTER) JOIN\u003c/span\u003e: \u003c/div\u003e\u003cscript src=\"https://gist.github.com/faif/bee76fa49c0885d7b2dc.js?file=left-join.sql\"\u003e\u003c/script\u003e\u003c/div\u003eOK, so I used a \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003eLEFT JOIN\u003c/span\u003e to find out that the query was painfully slow. One table had 700 thousand records and the other 130 thousand records. For a relational database that's not a big deal (only a few seconds, let's say maximum 3).\u003cbr /\u003e\u003cbr /\u003eIf you search on the Web for slow \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003eLEFT JOIN\u003c/span\u003e query you'll see that everyone recommends (a) adding indexes and (b) using the SQL optimizer. Well, I had already done both things without achieving my goal. I added the indexes using \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003eCREATE INDEX\u003c/span\u003e and then used the optimizer by adding \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003eEXPLAIN\u003c/span\u003e in front of my query and made sure that the indexes were used properly.\u003cbr /\u003e\u003cbr /\u003eSo, what's left? Actually there are two other important things to check. The first is to inspect the output of \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003eSHOW PROCESSLIST\u003c/span\u003e. This will show you the list of active processes on the server. When writing queries killing the SQL client because it crashed/became unresponsive due to a bad query is not unusual. But killing the client does not necessarily mean that the query is killed. There might still be orphan queries that eat the resources of your server but you have no control of them. You can kill them using \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003eKILL PROCESS_ID\u003c/span\u003e (replace PROCESS_ID with the actual ID of the orphan process).\u003cbr /\u003e\u003cbr /\u003eThe second thing that really impacts the performance of MySQL is when trying to join tables that use different collations. MySQL uses by default the legacy latin1_swedish_ci collation, so if one of the tables you are trying to join is using a different collation (for example utf8_unicode_ci, which makes much more sense as a default nowadays) the joins become terribly slow. Just make sure that all database tables use the same collation.\u003cbr /\u003e\u003cbr /\u003eHappy querying!\u003c/div\u003e","description":null,"image":null,"permalink":"http://localhost:1313/blog/2014-11-08-two-less-common-tricks-for-improving/","title":"Two less common tricks for improving unexplained slow MySQL queries"},{"content":"\n\u003cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003e\u003cdiv class=\"description markdown collapsible\"\u003e                In \u003ca href=\"https://pragprog.com/book/bksqla/sql-antipatterns\"\u003eSQL Antipatterns\u003c/a\u003e, Bill Karwin does a great job in explaining how to  make efficient use of the relational model, instead of abusing it like  it's usually done. Many developers abuse relational databases using  antipatterns such as ID required, entity-attribute-value, index  overkill, and so forth (you should read this book without second  thought). Some developers go as far as trying to implement a search  engine based on the \u003ccode\u003eLIKE\u003c/code\u003e keyword.\u003cbr /\u003e\u003cbr /\u003e All those are examples of not using the relational model properly. If  we want to bypass referential integrity or save everything in one  table, then we should not use a relational DB in the first place.  Cursing on the performance of a relational DB when it's not properly  used is very wrong.\u003cbr /\u003e              \u003c/div\u003e\u003c/div\u003e","description":null,"image":null,"permalink":"http://localhost:1313/blog/2014-09-29-book-review-sql-antipatterns/","title":"Book review: SQL Antipatterns"},{"content":"\n\u003cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003eA few months ago I experienced (for the first time) how it feels to be part of a technical reviewing team. I reviewed a packt introductory \u003ca href=\"http://sakiskasampalis.blogspot.nl/2013/11/my-first-book-review.html\"\u003ebook\u003c/a\u003e about Design Patterns.\u003cbr /\u003e\u003cbr /\u003eToday I'm glad to see that another packt book, of which I was for once again one of the technical reviewers, has been published. The book is called \u003ca href=\"http://www.packtpub.com/mastering-object-oriented-python/book\"\u003eMastering Object-oriented Python\u003c/a\u003e. It's a book that focuses on writing OOP code in Python 3.\u003cbr /\u003e\u003cbr /\u003eI would recommend this book to all Python programmers, both beginners and advanced. It covers all aspects of the language (to mention a few: special methods, unit testing, decorators, serialization, etc.) and shows different possible designs, explaining the pros and cons of each design. What I really like is that the code in the book is written in a Pythonic style, and the author makes a good job at explaining how Python differs from Java/C++.\u003cbr /\u003e\u003cbr /\u003eA few warnings: This is a big book (~ 600 pages). You can read the whole thing, but I believe that it will be much more useful as a handbook. Also note that the book assumes familiarity with Python 3 and Design Patterns.\u003cbr /\u003e\u003cbr /\u003eYou might wonder why I accepted to do again a technical review. Some people find technical reviewing a waste of time. But I disagree. To become a good programmer, you need to read a lot of code instead of just writing. In fact, programmers tend to read much more existing code than write new code. If reading code is important, reading good code is much more important. And I believe that the code in this book is well written.\u003c/div\u003e","description":null,"image":null,"permalink":"http://localhost:1313/blog/2014-05-04-being-technical-reviewer-again/","title":"Being a technical reviewer (again)"},{"content":"\n\u003cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003eAfter making some portability and readability improvements to \u003ca href=\"https://github.com/faif/shell-utils\"\u003e\u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003eshell-utils\u003c/span\u003e\u003c/a\u003e, I used BASH, sh, and dash to test it. While sh and dash were fine, BASH returned the error:\u003cbr /\u003e\u003cbr /\u003e\u003cb\u003eline 358: syntax error near unexpected token `('\u003c/b\u003e\u003cbr /\u003e\u003cb\u003eline 358: `ls ()'\u003c/b\u003e\u003cbr /\u003e\u003cbr /\u003eThat is strange. BASH usually introduces shell portability issues because of the extra features it provides, so I would expect to have a problem with the other shells.\u003cbr /\u003e\u003cbr /\u003eIt turns out that BASH did a pretty good job with reporting the source of the error. Note that \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003eshell-utils\u003c/span\u003e redefines a few everyday commands as functions, to make them more verbose and \u003cstrike\u003esecure\u003c/strike\u003e safe (eg. \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003els\u003c/span\u003e becomes \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003els --color=auto\u003c/span\u003e, \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003erm\u003c/span\u003e becomes \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003erm -i\u003c/span\u003e, etc.). But usually those everyday commands are already defined as aliases in .bashrc. Aliases are evaluated before functions, and defining a function that has the same name as an alias is not allowed. And that's what BASH is trying to tell me in the error message. Commenting all aliases in .bashrc fixed the issue :)\u003cbr /\u003e\u003cbr /\u003e\u003c/div\u003e","description":null,"image":null,"permalink":"http://localhost:1313/blog/2014-04-19-bash-syntax-error-near-unexpected-token/","title":"BASH: syntax error near unexpected token `('"},{"content":"\n\u003cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003eI haven't been to a conference for years, but this year I decided to join \u003ca href=\"http://joyofcoding.org/\"\u003eJoy of Coding\u003c/a\u003e. And I don't regret it!\u003cbr /\u003e\u003cbr /\u003eThe conference started with a keynote by Dan North: \"Accelerating Agile: hyper-performing       without the hype\". Dan described what he learnt about Agile while working in the trading domain. The most interesting advice that I kept from his presentation is that being a good programmer is not enough: What really makes a difference is to become a domain expert. For example, if you are working as a stock market programmer, your superior programming skills don't matter if you have no clue about what the numbers mean.\u003cbr /\u003e\u003cbr /\u003eNext, I joined the \"Let Me Graph That For You: An Introduction to Neo4j\" workshop, by Ian Robinson. The first part of the workshop was an introduction to Graph Databases and Neo4j. At the second part we used Neo4j and its query language Cypher to create a few graphs and query them. I am impressed by how easy is to get started with Neo4j. I find its web interface very intuitive. We had a few questions for Ian (S = Sakis, I = Ian, O = Other conference participant):\u003cbr /\u003e\u003cul style=\"text-align: left;\"\u003e\u003cli\u003eS: Is there any relation between Neo4j and RDF?\u003c/li\u003e\u003cli\u003eI: Not really. In RDF you typically end up with more connections because everything is modelled as a triple. But there are libraries that can extract a Neo4j graph as RDF.\u003c/li\u003e\u003cli\u003eS: Are all the common graph algorithms (eg. SPF, BFS, Bellman-Ford, etc.) available?\u003c/li\u003e\u003cli\u003eI: Most of the well-known graph algorithms are available, and furthermore there is a Java API that is exposed and can be extended with your own algorithms.\u003c/li\u003e\u003cli\u003eS: Is Cypher case-sensitive?\u003c/li\u003e\u003cli\u003eI: Partly. The identifiers of a query are case-sensitive, but the rest parts of the query aren't.\u003c/li\u003e\u003cli\u003eO: Are there any cases where RDBMS should still be used instead of Graph Databases?\u003c/li\u003e\u003cli\u003eI: If you have tabular data and you want to focus on set theory operations (eg. union, intersection, etc.) an RDBMS is preferable.\u003c/li\u003e\u003c/ul\u003e\u0026nbsp;I'll definitely look more into Graph Databases and Neo4j.\u003cbr /\u003e\u003cbr /\u003eThe next keynote was \"Contravariance is the Dual of Covariance\", by Erik Meijer. I'm not very familiar with Reactive Programming and Rx, thus I couldn't follow everything. But at least I enjoyed the jokes and the funny examples that Erik used. Using Scala as a reference, he explained the meanings of covariance and contra-variance, and showed how they can be used to create reusable code.\u003cbr /\u003e\u003cdiv\u003e\u003cbr /\u003eThe second workshop that I joined was \"An Introduction to Actors and Concurrency\", by Michel Rijnders and Matthijs Ooms. The first part of the workshop was basically an introduction to Erlang, thus nothing special if you are familiar with Prolog. The fun started at the second part, where we experienced how straightforward is to communicate asynchronously through the network using Erlang's actor model and message-passing primitives.\u003cbr /\u003e\u003cbr /\u003eLast but not least was the keynote \"The Tao, of the Joy, of Coding\", by Dick Wall. This was by far the most inspiring keynote. Dick, using ancient Chinese philosophy as a reference, talked about many interesting topics, including programming honesty (saying \"I don't understand this\" and learning from your colleagues is a good thing), looking back as a programmer (eg. if you used your programming skills to find a cure for a disease you really changed the world), and getting a life (being proud about working until 2 AM is a very bad mentality).\u003cbr /\u003e\u003cbr /\u003eAll in all, a great conference that I will keep in my agenda every year!\u003c/div\u003e\u003c/div\u003e","description":null,"image":null,"permalink":"http://localhost:1313/blog/2014-03-08-joy-of-coding-2014-my-impressions/","title":"Joy of Coding 2014 - My impressions"},{"content":"\n\u003cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003eDuring the last month(s) I participated in the review process of a book about Design Patterns in Python. I am happy to see that the book has been released. The title of it is \u003ca href=\"http://www.packtpub.com/learning-python-design-patterns/book\"\u003eLearning Python Design Patterns\u003c/a\u003e.\u003cbr /\u003e\u003cbr /\u003eReviewing a book is definitely not harder than writing one, but that doesn't mean that it's not challenging. The comments must be clear in context, useful, and not offensive. The process requires a considerable amount of time since all comments/remarks/notes must be backed by research and reliable references.\u003cbr /\u003e\u003cbr /\u003eNevertheless, I enjoyed the whole procedure which thanks to the people of packt publishing (packtpub) was flexible and clear. Plus, I'll receive a free hard-copy of the book that I reviewed and a copy of my favourite packtpub ebook. Not bad!\u003cbr /\u003e\u003cbr /\u003eIn the future I hope that I'll have the chance (and the time) to write my own book about a topic that I like.\u003c/div\u003e","description":null,"image":null,"permalink":"http://localhost:1313/blog/2013-11-28-my-first-book-review/","title":"My first book review"},{"content":"\n\u003cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003eUSB communication with mbed is easy. That's because USB is the default protocol used to transfer programs from a computer to an mbed.\u003cbr /\u003e\u003cbr /\u003eIn this prototype I measure the analog value of a pot, I convert it to  voltage, and finally I use USB to print it on my computer's  screen. That's a simplistic voltage meter! Here's the schematic:\u003cbr /\u003e\u003cbr /\u003e\u003cbr /\u003e\u003ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd style=\"text-align: center;\"\u003e\u003ca href=\"http://4.bp.blogspot.com/-zjXcdWLTPi8/UfVJyejZJTI/AAAAAAAAAG4/g1aEkW9UG1w/s1600/voltmeter-schematic.jpg\" style=\"margin-left: auto; margin-right: auto;\"\u003e\u003cimg border=\"0\" height=\"207\" src=\"https://images-blogger-opensocial.googleusercontent.com/gadgets/proxy?url=http%3A%2F%2F4.bp.blogspot.com%2F-zjXcdWLTPi8%2FUfVJyejZJTI%2FAAAAAAAAAG4%2Fg1aEkW9UG1w%2Fs1600%2Fvoltmeter-schematic.jpg\u0026amp;container=blogger\u0026amp;gadget=a\u0026amp;rewriteMime=image%2F*\" width=\"400\" /\u003e\u003c/a\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd class=\"tr-caption\" style=\"text-align: center;\"\u003eUSB voltage meter schematic. Image courtesy of Bert Van Dam\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\u003ca href=\"http://4.bp.blogspot.com/-PDXtSfs8K2E/UfQjbnRkuyI/AAAAAAAAAGo/L5tAUyAeiWo/s1600/usb-voltmeter.jpg\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cbr /\u003e\u003c/a\u003e\u003c/div\u003e\u003cbr /\u003eAnd a picture of the actual circuit:\u003cbr /\u003e\u003cbr /\u003e\u003ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd style=\"text-align: center;\"\u003e\u003ca href=\"http://4.bp.blogspot.com/-PDXtSfs8K2E/UfQjbnRkuyI/AAAAAAAAAGo/L5tAUyAeiWo/s1600/usb-voltmeter.jpg\" style=\"margin-left: auto; margin-right: auto;\"\u003e\u003cimg border=\"0\" height=\"640\" src=\"https://images-blogger-opensocial.googleusercontent.com/gadgets/proxy?url=http%3A%2F%2F4.bp.blogspot.com%2F-PDXtSfs8K2E%2FUfQjbnRkuyI%2FAAAAAAAAAGo%2FL5tAUyAeiWo%2Fs1600%2Fusb-voltmeter.jpg\u0026amp;container=blogger\u0026amp;gadget=a\u0026amp;rewriteMime=image%2F*\" width=\"480\" /\u003e\u003c/a\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd class=\"tr-caption\" style=\"text-align: center;\"\u003eUSB voltage meter circuit\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003cdiv style=\"text-align: left;\"\u003e\u003cbr /\u003eNote that the pot is used just for testing purposes. It can actually be replaced by any other part. Just make sure that you're not trying to measure voltage \u0026gt; 3.3 volts, or your mbed is in danger!\u003c/div\u003e\u003ch3 style=\"text-align: left;\"\u003eThe code \u003c/h3\u003e\u003cdiv style=\"text-align: left;\"\u003eFirst the header file. It defines the USB connection, the analog input pin used to read the pot's value, a few constants, and a function that will be used for converting the pot's value from [0 - 1] to the voltage [0 - 3.3] volts.\u003c/div\u003e\u003cbr /\u003e\u003cscript src=\"https://gist.github.com/faif/6099348.js?file=voltmeter.h\"\u003e\u003c/script\u003e\u003cbr /\u003eAnd the source file. It contains the body of the conversion function, two terminal control commands for clearing the screen and moving to the top, and the commands for reading the pot's value and printing it (together with its voltage) to the terminal through the USB port.\u003cbr /\u003e\u003cbr /\u003e\u003cscript src=\"https://gist.github.com/faif/6099348.js?file=voltmeter.cpp\"\u003e\u003c/script\u003e\u003cbr /\u003e\u003cbr /\u003e\u003ch3 style=\"text-align: left;\"\u003eDemo\u003c/h3\u003e\u003cdiv style=\"text-align: left;\"\u003eI'm on a GNU/Linux system, where the mbed is identified as \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003e/dev/ttyACM0\u003c/span\u003e. A simple tool to use for connecting with it is \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003escreen\u003c/span\u003e (eg. \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003esudo screen /dev/ttyACM0\u003c/span\u003e). Pardon me for the bad quality of the video, it's the first time that I used YouTube capture with my phone and it didn't work as well as I expected :)\u003c/div\u003e\u003cdiv style=\"text-align: left;\"\u003e\u003cbr /\u003e\u003c/div\u003e\u003ciframe allowfullscreen=\"\" frameborder=\"0\" height=\"315\" src=\"//www.youtube-nocookie.com/embed/Z-bx2zrV7SE?rel=0\" width=\"560\"\u003e\u003c/iframe\u003e \u003cbr /\u003e\u003ch3 style=\"text-align: left;\"\u003e\u0026nbsp;\u003c/h3\u003e\u003ch3 style=\"text-align: left;\"\u003eAcknowledgements\u003c/h3\u003e\u003cdiv style=\"text-align: left;\"\u003eSpecial thanks to my good friend and Arduino hacker \u003ca href=\"http://efxa.org/\"\u003eefxa\u003c/a\u003e, for without his parts it wouldn't be possible to play with mbed.\u003c/div\u003e\u003cdiv style=\"text-align: left;\"\u003e\u003cbr /\u003e\u003c/div\u003e\u003ch3 style=\"text-align: left;\"\u003eReferences \u003c/h3\u003e\u003cul style=\"text-align: left;\"\u003e\u003cli\u003e\u003ci\u003eBert Van Dam.\u003c/i\u003e \u003ca href=\"http://www.elektor.com/products/books/microcontrollers/arm-microcontrollers-1-%28uk%29.1625568.lynkx\"\u003eARM Microcontrollers part 1 \u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ci\u003embed handbook. \u003c/i\u003e\u003ca href=\"https://mbed.org/handbook/SerialPC\"\u003eSerial Communication with a PC\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e","description":null,"image":null,"permalink":"http://localhost:1313/blog/2013-07-28-mbed-usb-voltmeter/","title":"mbed USB voltmeter"},{"content":"\nThe problem: You have an unsorted array of strings (product codes, area codes, etc.) containing both letters and numbers (for example 'A28', 'A3', 'A1', etc.) and you want to sort them numerically (that is, 'A1', 'A2', ..., 'An'). Ruby offers a \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003esort\u003c/span\u003e method, so let's see what it does...\u003cbr /\u003e\u003cbr /\u003e\u003cscript src=\"https://gist.github.com/faif/5786178.js?file=sort.rb\"\u003e\u003c/script\u003e Nope, that's not what I want. But no worries, \u003ca href=\"http://ruby-doc.org/core-1.8.6/Enumerable.html\"\u003eenumerable\u003c/a\u003e is here to help me. Enumerable is a great mixin inspired by functional programming. Functional programming relies heavily on data transformations: The input is a data structure, we transform the data of the structure by applying one or more functions, and the output is a new data structure. In this particular example the input is an unsorted array of strings, I want to apply a function that will change their order, and the output will be a new array with the strings sorted numerically.\u003cbr /\u003e\u003cbr /\u003eWhat is the data transformation in this case? A string is a data structure that can be treated as an array in most programming languages, and ruby is not an exception. Therefore the problem can be solved by using as a sorting key the numeric part of a string and treating that key as a number.\u003cbr /\u003e\u003cbr /\u003e\u003cscript src=\"https://gist.github.com/faif/5786178.js?file=sort_by.rb\"\u003e\u003c/script\u003e And we are done :)","description":null,"image":null,"permalink":"http://localhost:1313/blog/2013-06-15-numeric-string-sorting-in-ruby/","title":"Numerical string sorting in Ruby"},{"content":"\n\u003cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003eAre you a GNU Bash user but you are not using Emacs? Perhaps you should consider trying it. You will be amazed by the similarities...\u003cbr /\u003e\u003cbr /\u003eI know, your IDE (Eclipse, QT, etc.) is superior and you are extremely productive with it. Why bother using an ancient editor like Emacs? I will not begin another flamewar by comparing popular IDEs with Emacs. Choose whatever you prefer during programming. But if you want to be productive while using a UNIX-like system, Emacs (and of course Vim but I can't speak for Vim since I'm an Emacs user) can really help you.\u003cbr /\u003e\u003cbr /\u003eThe truth is that if you are already productive in Bash (mandatory reading: \u003ca href=\"http://www.skorks.com/2009/09/bash-shortcuts-for-maximum-productivity/\"\u003eBash Shortcuts For Maximum Productivity\u003c/a\u003e) you are familiar with Emacs but you don't know it yet :) The default key bindings of Bash are also used by Emacs. Let me show you some examples (my apologies to screencast haters but that's the best way of demonstrating keyboard typing):\u003cbr /\u003e\u003cbr /\u003e\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\u003cobject class=\"BLOGGER-youtube-video\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" codebase=\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0\" data-thumbnail-src=\"https://ytimg.googleusercontent.com/vi/SPSoT22fwzM/0.jpg\" height=\"266\" width=\"320\"\u003e\u003cparam name=\"movie\" value=\"https://www.youtube.com/v/SPSoT22fwzM?version=3\u0026f=user_uploads\u0026c=google-webdrive-0\u0026app=youtube_gdata\" /\u003e\u003cparam name=\"bgcolor\" value=\"#FFFFFF\" /\u003e\u003cparam name=\"allowFullScreen\" value=\"true\" /\u003e\u003cembed width=\"320\" height=\"266\"  src=\"https://www.youtube.com/v/SPSoT22fwzM?version=3\u0026f=user_uploads\u0026c=google-webdrive-0\u0026app=youtube_gdata\" type=\"application/x-shockwave-flash\" allowfullscreen=\"true\"\u003e\u003c/embed\u003e\u003c/object\u003e\u003c/div\u003e\u003cbr /\u003eSo, what does this screencast demonstrate? My goal is to use the \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003efind\u003c/span\u003e command for searching all files with the suffix \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003e.conf\u003c/span\u003e that live under the \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003e/etc\u003c/span\u003e directory. First fix: I mistyped \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003e.cofn\u003c/span\u003e instead of \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003e.conf\u003c/span\u003e and used the transpose character function \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003e(C-t)\u003c/span\u003e* to correct the mistake. Second fix: I forgot that \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003efind\u003c/span\u003e expects the searching path as its first argument and incorrectly provided it as the second. To fix that I first used \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003eC-p\u003c/span\u003e to access the most recent command in the command history (this functionality is not offered by Emacs as such). I then used the kill function \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003e(C-w)\u003c/span\u003e to \"cut\" backwards one word, \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003eC-a\u003c/span\u003e to go to the beginning of the line, \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003eM-f\u003c/span\u003e to go one word forward, and the yank function \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003e(C-y)\u003c/span\u003e to \"paste\" the most recently killed word (that is, the search path) at the expected place.\u003cbr /\u003e\u003cbr /\u003eThe moral of the story: When you learn about a new shortcut in Emacs, try it also in Bash. There's a great chance that its behavior will be very similar (if not exactly the same).\u003cbr /\u003e\u003cbr /\u003e\u003cspan style=\"font-size: x-small;\"\u003e* In case you are not familiar with the Emacs terminology: \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003eC\u003c/span\u003e typically means the Ctrl keyboard button, and \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003eM\u003c/span\u003e means the Alt keyboard button. As an example\u003cspan style=\"font-size: x-small;\"\u003e \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003eM-f\u003c/span\u003e means\u003c/span\u003e pressing first Alt followed by \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003ef\u003c/span\u003e (move the prompt one word forward).\u003c/span\u003e\u003c/div\u003e","description":null,"image":null,"permalink":"http://localhost:1313/blog/2013-03-23-why-you-should-try-emacs-if-you-are/","title":"Why you should try Emacs if you are a Bash user"},{"content":"\n\u003cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003e\u003ch3 style=\"text-align: left;\"\u003eDefinition \u003c/h3\u003eThink of a queue as a line of people waiting to buy a ticket for an event (music concert, film, etc.).\u003cbr /\u003e\u003cbr /\u003e\u003ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd style=\"text-align: center;\"\u003e\u003ca href=\"http://4.bp.blogspot.com/-KwTq6z26_yo/UNyrDwvyqPI/AAAAAAAAAE8/SImW5YezxFo/s1600/line.jpg\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003e\u003cimg border=\"0\" src=\"http://4.bp.blogspot.com/-KwTq6z26_yo/UNyrDwvyqPI/AAAAAAAAAE8/SImW5YezxFo/s400/line.jpg\" height=\"300\" width=\"400\" /\u003e\u003c/a\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd class=\"tr-caption\" style=\"text-align: center;\"\u003ePhoto Credit: Bryan Bedder/Getty Images for Tribeca Film Festival\u003c/td\u003e\u003ctd class=\"tr-caption\" style=\"text-align: center;\"\u003e\u003cdiv style=\"background-color: white; border: medium none; color: black; overflow: hidden; text-align: left; text-decoration: none;\"\u003e\u003cbr /\u003e\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003eIn the queue shown at the picture, a person who just arrives to buy a ticket goes to the left side (unless cheating) and a person who just bought a ticket leaves the queue from the right side (to avoid conflicts).\u003cbr /\u003e\u003cbr /\u003eIn queue terminology, adding a new item means \u003cb\u003eenqueuing\u003c/b\u003e it to one side of the queue (either side is fine), while removing an item means \u003cb\u003edequeuing\u003c/b\u003e\u003cb\u003e\u003c/b\u003e it from the opposite side of the queue.\u003cbr /\u003e\u003cbr /\u003e\u003ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd style=\"text-align: center;\"\u003e\u003ca href=\"http://3.bp.blogspot.com/-6Nzg7D6jK4I/UNy5rhd0LGI/AAAAAAAAAFM/beBuJgq65pk/s1600/queue.jpg\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003e\u003cimg border=\"0\" src=\"http://3.bp.blogspot.com/-6Nzg7D6jK4I/UNy5rhd0LGI/AAAAAAAAAFM/beBuJgq65pk/s400/queue.jpg\" height=\"98\" width=\"400\" /\u003e\u003c/a\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd class=\"tr-caption\" style=\"text-align: center;\"\u003eFundamental queue operations\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003eThe first item that enters a queue is the first item that exits the queue (first come-first served). For that reason, we call queues \u003cb\u003eFirst In First Out (FIFO)\u003c/b\u003e data structures.\u003cbr /\u003e\u003cbr /\u003e\u003ch3 style=\"text-align: left;\"\u003eUsage and performance\u003c/h3\u003e\u003cdiv style=\"text-align: left;\"\u003eQueues have many \u003ca href=\"http://introcs.cs.princeton.edu/java/43stack/\"\u003epractical applications\u003c/a\u003e (search for \"applications\"). A simple example is printing documents. Documents are sent to the printer using a first come-first served policy (let's skip priorities for simplicity). If the printer is busy and we are trying to print a document, it will enqueue it and begin printing it only after it has finished with printing (dequeuing) all the existing documents.\u003c/div\u003e\u003cdiv style=\"text-align: left;\"\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv style=\"text-align: left;\"\u003eEnqueuing and dequeuing items in a queue takes \u003cb\u003econstant time - O(1)\u003c/b\u003e.  On the other hand, queues (like \u003ca href=\"http://sakiskasampalis.blogspot.nl/2012/09/data-structures-and-algorithms-101-part.html\"\u003estacks\u003c/a\u003e) are not optimized for searching or adding/removing items from arbitrary positions. These operations take \u003cb\u003elinear time - O(n)\u003c/b\u003e.\u003cbr /\u003e\u003cbr /\u003e\u003ch3 style=\"text-align: left;\"\u003eImplementation\u003c/h3\u003eLike my \u003ca href=\"http://sakiskasampalis.blogspot.nl/2012/09/data-structures-and-algorithms-101-part.html\"\u003estack\u003c/a\u003e implementation, I will use python and the built-in list data structure to implement a queue. Notice the similarities between stacks and queues. The only difference is the way the elements are accessed. \u003c/div\u003e\u003cdiv style=\"text-align: left;\"\u003e\u003cspan style=\"font-family: Verdana,sans-serif;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003cscript src=\"https://gist.github.com/4436181.js?file=myqueue.py\"\u003e\u003c/script\u003e\u003c/div\u003e\u003cdiv style=\"text-align: left;\"\u003e\u003cdiv style=\"text-align: left;\"\u003eIf you are not familiar with \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003e__iter__\u003c/span\u003e and \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003e__next__ \u003c/span\u003ethey are special functions for \u003ca href=\"http://www.diveintopython3.net/iterators.html\"\u003eimplementing iterators in python\u003c/a\u003e. In short, we can now say \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003efor i in mq\u003c/span\u003e where \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003emq\u003c/span\u003e is an instance of \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003emyqueue\u003c/span\u003e. Quite convenient! I am going to use it in the sample problem.\u003c/div\u003e\u003cdiv style=\"text-align: left;\"\u003e\u003cbr /\u003e\u003c/div\u003e\u003ch3 style=\"text-align: left;\"\u003eSample problem\u003c/h3\u003eImplement a song playlist for a jukebox/media player, etc. New songs are added to the back (left side) of the playlist. The next song to be played is picked from the front (right side) of the playlist.\u003c/div\u003e\u003cbr /\u003e\u003cdiv style=\"text-align: left;\"\u003e\u003cscript src=\"https://gist.github.com/4436181.js?file=playlist.py\"\u003e\u003c/script\u003e\u003c/div\u003eObviously that's not a \"real\" playlist since it doesn't track time so that can be automatically triggered after the end of a song. That's left as an exercise for you dear hacker. Enjoy!\u003cbr /\u003e\u003cbr /\u003e\u003ch3 style=\"text-align: left;\"\u003eReferences\u003c/h3\u003e\u003cul style=\"text-align: left;\"\u003e\u003cli\u003e\u003ci\u003eMark Pilgrim. \u003c/i\u003e\u003ca href=\"http://getpython3.com/diveintopython3/\"\u003eDive Into Python 3\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ci\u003eRobert Sedgewick, Kevin Wayne. \u003c/i\u003e\u003ca href=\"http://introcs.cs.princeton.edu/java/43stack/\"\u003eStacks and Queues\u003c/a\u003e.\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e","description":null,"image":null,"permalink":"http://localhost:1313/blog/2013-01-04-data-structures-and-algorithms-101-part/","title":"Data Structures and Algorithms 101 part two: Queues"},{"content":"\n\u003cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003eLet's assume that we are asked to solve the following problem in a programming interview: \"Write a function that removes all duplicate characters from a string\". Piece of cake, you might think. Surely they are not asking us to write a Web Browser but there must be a reason for that.\u003cbr /\u003e\u003cbr /\u003e\u003ch3 style=\"text-align: left;\"\u003eTest first\u003c/h3\u003eThe interview's time is limited. But this doesn't mean that we should start writing whatever implementation comes on to mind directly. Initially we should at least show to the interviewer that we are familiar with techniques such as \u003ca href=\"https://en.wikipedia.org/wiki/Test-driven_development\"\u003eTest Driven Development\u003c/a\u003e (TDD). The test cases are useful even if the interviewer is not interested in seeing unit tests. So let's write them down. We should make sure that our function:\u003cbr /\u003e\u003cul style=\"text-align: left;\"\u003e\u003cli\u003eDoesn't fail with empty strings (so \"\" is valid input)\u003c/li\u003e\u003cli\u003eReturns a string of length = 1 as is (for example \"a\" is returned as \"a\")\u003c/li\u003e\u003cli\u003eReturns a string of length = 2 with two same characters as a string with a single character (for example \"aa\" is returned as \"a\")\u003c/li\u003e\u003cli\u003eRemoves all the duplicate characters (for example \"anakonda\" becomes either \"ankod\" or \"konda\" depending on which indexes of duplicate characters we choose to remove ; I'll initially use the second case and later switch to the first one)\u003c/li\u003e\u003cli\u003eReturns a string with no duplicate characters as is (for example \"the\" is returned as \"the\") \u003c/li\u003e\u003c/ul\u003eIt's fine if we forget some test cases, we can extend them later. Now, let's assume that the interviewer insists on actually implementing the tests. I'll use python, because writing unit tests in python is straightforward -- and I obviously like the language ;)\u003cbr /\u003e\u003cbr /\u003eFirst we need a stub version of the function. Our function, called \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003eremDupl\u003c/span\u003e will accept a string as input and return a copy of the input string without duplicate characters.\u003cbr /\u003e\u003cbr /\u003e\u003cscript src=\"https://gist.github.com/3829456.js?file=strutils.py\"\u003e\u003c/script\u003eNow we are ready to write our test.\u003cbr /\u003e\u003cbr /\u003e\u003cscript src=\"https://gist.github.com/3829456.js?file=testremdupl.py\"\u003e\u003c/script\u003e Our test is already useful. We can make sure that it fails and then write the main logic of our function until it passes the test.\u003cbr /\u003e\u003cbr /\u003e\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\u003c/div\u003e\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\u003c/div\u003e\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\u003c/div\u003e\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\u003c/div\u003e\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\u003c/div\u003e\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\u003c/div\u003e\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\u003c/div\u003e\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\u003c/div\u003e\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\u003c/div\u003e\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\u003c/div\u003e\u003ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd style=\"text-align: center;\"\u003e\u003ca href=\"http://3.bp.blogspot.com/-N1SisjXQnTM/UG3wDaLwrCI/AAAAAAAAADQ/wkRhaXQTmlo/s1600/test.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003e\u003cimg border=\"0\" height=\"195\" src=\"http://3.bp.blogspot.com/-N1SisjXQnTM/UG3wDaLwrCI/AAAAAAAAADQ/wkRhaXQTmlo/s400/test.png\" width=\"400\" /\u003e\u003c/a\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd class=\"tr-caption\" style=\"text-align: center;\"\u003eOur test fails, as expected\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003ch3 style=\"text-align: left;\"\u003eThe naive implementation\u003c/h3\u003e\u003cdiv style=\"text-align: left;\"\u003eSo far so good. It's time to start implementing our function. Since the time is against us, the first step is to follow a naive approach. Although the first implementation might not be the most efficient and clean, it's important to get something working. If there's enough time we can improve it later. If there's no time for writing an improved version, we can still discuss with the interviewer the pros and cons of our naive implementation.\u003cbr /\u003e\u003cbr /\u003e\u003c/div\u003e\u003cscript src=\"https://gist.github.com/3829456.js?file=strutils2.py\"\u003e\u003c/script\u003e First of all, does our function behave as expected?\u003cbr /\u003e\u003cbr /\u003e\u003ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd style=\"text-align: center;\"\u003e\u003ca href=\"http://1.bp.blogspot.com/-IBesi5_D_Jw/UG8-y2KonEI/AAAAAAAAADg/LW41d-h7YpU/s1600/testrem.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003e\u003cimg border=\"0\" height=\"90\" src=\"http://1.bp.blogspot.com/-IBesi5_D_Jw/UG8-y2KonEI/AAAAAAAAADg/LW41d-h7YpU/s400/testrem.png\" width=\"400\" /\u003e\u003c/a\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd class=\"tr-caption\" style=\"text-align: center;\"\u003eTest result of the naive implementation\u003c/td\u003e\u003ctd class=\"tr-caption\" style=\"text-align: center;\"\u003e\u003cbr /\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003eLooks good :)\u003cbr /\u003e\u003cbr /\u003e\u003ch3 style=\"text-align: left;\"\u003eImproving the code\u003c/h3\u003eWhat's the time complexity of our algorithm? It's O(n), since we have to  iterate through the whole string. Even if it's hard to improve the time  complexity, we can do better by writing our code in more idiomatic  python. Python offers a set data structure which looks like a good candidate since all items in a set are unique by definition. But unfortunately the items of a set have no particular order therefore we cannot simply create a set out of our input string. We need a trick to preserve ordering. Combining the set with a generator expression and converting it to a string gives the expected result.\u003cbr /\u003e\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\u003ca href=\"http://3.bp.blogspot.com/-96nQz1pLT6o/UHBqXh02YEI/AAAAAAAAAEA/s_062Zt0k80/s1600/ankod.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cbr /\u003e\u003c/a\u003e\u003c/div\u003e\u003cscript src=\"https://gist.github.com/3829456.js?file=strutils3.py\"\u003e\u003c/script\u003e Nice, let's test our changes.\u003cbr /\u003e\u003cbr /\u003e\u003ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd style=\"text-align: center;\"\u003e\u003ca href=\"http://3.bp.blogspot.com/-96nQz1pLT6o/UHBqXh02YEI/AAAAAAAAAEA/s_062Zt0k80/s1600/ankod.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003e\u003cimg border=\"0\" height=\"203\" src=\"http://3.bp.blogspot.com/-96nQz1pLT6o/UHBqXh02YEI/AAAAAAAAAEA/s_062Zt0k80/s400/ankod.png\" width=\"400\" /\u003e\u003c/a\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd class=\"tr-caption\" style=\"text-align: center;\"\u003eThe test fails, only the first occurrence of a character goes into the set\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003ca href=\"http://3.bp.blogspot.com/-96nQz1pLT6o/UHBqXh02YEI/AAAAAAAAAEA/s_062Zt0k80/s1600/ankod.png\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003c/a\u003e \u003cbr /\u003e\u003cbr /\u003e\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\u003c/div\u003eHmmm, there's something going wrong here. We need to update our test case, since the new code keeps only the first occurrence of each character (thus \"anakonda\" becomes \"ankod\" instead of \"konda\" that used to be when \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003ereplace\u003c/span\u003e was used).\u003cbr /\u003e\u003cbr /\u003e\u003cscript src=\"https://gist.github.com/3829456.js?file=testremdupl2.py\"\u003e\u003c/script\u003e Now that we updated the test case, our code should pass the tests. Let's verify.\u003cbr /\u003e\u003cbr /\u003e\u003ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd style=\"text-align: center;\"\u003e\u003ca href=\"http://3.bp.blogspot.com/-ej7FZrKWicI/UHBux3SE3JI/AAAAAAAAAEQ/KAPCu1OfUyg/s1600/pass.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003e\u003cimg border=\"0\" height=\"88\" src=\"http://3.bp.blogspot.com/-ej7FZrKWicI/UHBux3SE3JI/AAAAAAAAAEQ/KAPCu1OfUyg/s400/pass.png\" width=\"400\" /\u003e\u003c/a\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd class=\"tr-caption\" style=\"text-align: center;\"\u003eThe new code passes all the tests\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003eAnd we are done!\u003cbr /\u003e\u003cbr /\u003e\u003ch3 style=\"text-align: left;\"\u003eIdio(ma)tic?\u003c/h3\u003eThe new version of our function is more compact and pythonic, but does it really perform better that the first version? Since both algorithms are O(n), the details are in the data structures and one way to find that out is by using a \u003ca href=\"http://docs.python.org/library/profile.html\"\u003eprofiler\u003c/a\u003e. So let's see what's the performance when executing each version of our function with 600.000 strings as input.\u003cbr /\u003e\u003cbr /\u003e\u003ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd style=\"text-align: center;\"\u003e\u003ca href=\"http://4.bp.blogspot.com/-k30NiP2nIZI/UHCLfmXZB_I/AAAAAAAAAEo/F_ABZnaCXCA/s1600/profile.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003e\u003cimg border=\"0\" height=\"223\" src=\"http://4.bp.blogspot.com/-k30NiP2nIZI/UHCLfmXZB_I/AAAAAAAAAEo/F_ABZnaCXCA/s400/profile.png\" width=\"400\" /\u003e\u003c/a\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd class=\"tr-caption\" style=\"text-align: center;\"\u003eProfiling shows that the naive implementation performs better\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003eThe second version is a backward step regarding performance. Profiling shows that the generator expression and the join function have the biggest negative impact. Although list comprehensions and generator expressions are the power of python and are optimized for performance, in this particular case the fact that we actually need an ordered string as the output result does not help.\u003cbr /\u003e\u003cbr /\u003e\u003ch3 style=\"text-align: left;\"\u003eReferences\u003c/h3\u003e\u003cul style=\"text-align: left;\"\u003e\u003cli\u003e\u003ci\u003ewikipedia.\u003c/i\u003e \u003ca href=\"https://en.wikipedia.org/wiki/Test-driven_development\"\u003eTest Driven Development\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ci\u003epython.org. \u003c/i\u003e\u003ca href=\"http://docs.python.org/library/profile.html\"\u003eProfilers\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ci\u003eMark Pilgrim. \u003c/i\u003e\u003ca href=\"http://getpython3.com/diveintopython3/\"\u003eDive Into Python 3\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e","description":null,"image":null,"permalink":"http://localhost:1313/blog/2012-10-06-interview-question-remove-duplicate/","title":"Interview question: Remove duplicate characters"},{"content":"\n\u003cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003e\u003cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003e\u003ch3 style=\"text-align: left;\"\u003eRationale (boring)\u003c/h3\u003eI decided to write down some notes about common (and maybe less common) Data Structures and Algorithms. This is the first part, covering stacks.\u003cbr /\u003e\u003cbr /\u003e\u003ch3 style=\"text-align: left;\"\u003eDefinition\u003c/h3\u003eThink of a stack as a pile of books.\u003cbr /\u003e\u003cbr /\u003e\u003ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd style=\"text-align: center;\"\u003e\u003ca href=\"http://3.bp.blogspot.com/-89gwMK_cF6Y/UF9MEcR1B0I/AAAAAAAAACw/gNWHlhOk1oA/s1600/2012-09-22+20.18.02.jpg\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003e\u003cimg border=\"0\" height=\"107\" src=\"http://3.bp.blogspot.com/-89gwMK_cF6Y/UF9MEcR1B0I/AAAAAAAAACw/gNWHlhOk1oA/s320/2012-09-22+20.18.02.jpg\" width=\"320\" /\u003e\u003c/a\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd class=\"tr-caption\" style=\"text-align: center;\"\u003eA stack looks like a pile of books\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003eIf I want to study \"Modern Operating Systems\", I first need to take away all the books that are on top of it (both \"ARM microcontrollers\" and \"The UNIX programming environment\"). Conversely, whenever I finish studying a book the easiest place to put it is on top of the most top book (thus above \"ARM microcontrollers\").\u003cbr /\u003e\u003cbr /\u003eIn stack terminology, adding a new item means \u003cb\u003epushing\u003c/b\u003e it to the top of the stack, while removing an item means \u003cb\u003epopping\u003c/b\u003e it from the top of the stack.\u003cbr /\u003e\u003cbr /\u003e\u003ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd style=\"text-align: center;\"\u003e\u003ca href=\"http://4.bp.blogspot.com/-rZVogzJQJV0/UF9Sf2b_guI/AAAAAAAAADA/6WDtTbTDBZk/s1600/2012-09-22+20.27.57.jpg\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003e\u003cimg border=\"0\" height=\"265\" src=\"http://4.bp.blogspot.com/-rZVogzJQJV0/UF9Sf2b_guI/AAAAAAAAADA/6WDtTbTDBZk/s320/2012-09-22+20.27.57.jpg\" width=\"320\" /\u003e\u003c/a\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd class=\"tr-caption\" style=\"text-align: center;\"\u003eFundamental stack operations\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003cbr /\u003eStacks provide direct access only to their top element, which happens to also be the last (most recent) element that was pushed in the stack. For that reason, we call stacks \u003cb\u003eLast In First Out (LIFO)\u003c/b\u003e data structures.\u003cbr /\u003e\u003cbr /\u003e\u003ch3 style=\"text-align: left;\"\u003eUsage and performance\u003c/h3\u003eWhy are stacks useful? There are numerous \u003ca href=\"https://en.wikipedia.org/wiki/Stack_%28data_structure%29#Applications\"\u003epractical applications\u003c/a\u003e of stacks on Wikipedia. A simple example is adding two numbers using a calculator. Implementation details of such an application are outside the context of this article.\u003cbr /\u003e\u003cbr /\u003eThe good thing about stacks is that pushing and popping an item is very fast. Specifically, pushing and popping are \u003ca href=\"http://stackoverflow.com/questions/487258/plain-english-explanation-of-big-o\"\u003econstant time - O(1)\u003c/a\u003e operations. On the other hand, stacks are not optimized for searching or adding/removing an item from an arbitrary position. Searching and adding/removing from arbitrary stack positions are \u003cb\u003elinear time - O(n)\u003c/b\u003e operations.\u003cbr /\u003e\u003cbr /\u003e\u003ch3 style=\"text-align: left;\"\u003eImplementation\u003c/h3\u003eStacks are usually implemented using arrays, but since I am using python I will use the built-in list data structure for holding and accessing the items of the stack.\u003cbr /\u003e\u003cbr /\u003e\u003cscript src=\"https://gist.github.com/3784185.js?file=stack.py\"\u003e\u003c/script\u003e If \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003e[::-1]\u003c/span\u003e looks strange to you, it's a nice way of using \u003ca href=\"http://docs.python.org/release/2.3/whatsnew/section-slices.html\"\u003eextended slices\u003c/a\u003e for reversing a sequence. In this representation, the top element of the stack is the left-most element of the printed list. The \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003epeek\u003c/span\u003e (aka \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003etop\u003c/span\u003e) function returns the top element of the stack without removing it.\u003cbr /\u003e\u003cbr /\u003e\u003ch3 style=\"text-align: left;\"\u003eSample problem\u003c/h3\u003e\u003cdiv style=\"text-align: left;\"\u003eImplement a function that sorts a stack in ascending order. You are only allowed to use an extra stack and the fundamental operations \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003epush, pop, peek,\u003c/span\u003e and \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003esize\u003c/span\u003e.\u0026nbsp;\u003c/div\u003e\u003cdiv style=\"text-align: left;\"\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv style=\"text-align: left;\"\u003eThe algorithm presented here sorts the stack in \u003cb\u003equadratic - O(n^2)\u003c/b\u003e time. The idea is to pop an element from the unsorted stack and push it to the \"right\" position of the sorted stack. Exhaustive error checking (for example ensuring that unsorted is a stack, etc.) is omitted for simplicity.\u003c/div\u003e\u003cdiv style=\"text-align: left;\"\u003e\u003cbr /\u003e\u003cscript src=\"https://gist.github.com/3784185.js?file=sortstack.py\"\u003e\u003c/script\u003e\u003c/div\u003e\u003cdiv style=\"text-align: left;\"\u003eSince we only have access to the top item, when the top item of the unsorted stack cannot be pushed to sorted stack (because it violates the sorting order), we move all the items of the sorted stack to the unsorted stack until the \"right\" position is found.\u003cbr /\u003e\u003cbr /\u003e\u003ch3 style=\"text-align: left;\"\u003e\u0026nbsp;References\u003c/h3\u003e\u003cul style=\"text-align: left;\"\u003e\u003cli\u003e\u003ci\u003eWikipedia.\u003c/i\u003e \u003ca href=\"https://en.wikipedia.org/wiki/Stack_%28data_structure%29\"\u003eStack (abstract data type)\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ci\u003eStackOverflow.\u003c/i\u003e \u003ca href=\"http://stackoverflow.com/questions/487258/plain-english-explanation-of-big-o\"\u003ePlain English explanation of big O\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ci\u003eGayle Laakman.\u003c/i\u003e \u003ca href=\"http://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/098478280X?tag=duckduckgo-canonical-20\"\u003eCracking the Coding Interview\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e","description":null,"image":null,"permalink":"http://localhost:1313/blog/2012-09-23-data-structures-and-algorithms-101-part/","title":"Data Structures and Algorithms 101 part one: Stacks"},{"content":"\n\u003cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003eThe \u003ca href=\"http://www.se-radio.net/2008/06/episode-100-software-in-space/\"\u003esoftware in space\u003c/a\u003e podcast (by se-radio) put me into thoughts about finding ways to improve code quality. First of all, I think that using \u003cspan style=\"font-family: \u0026quot;Courier New\u0026quot;,Courier,monospace;\"\u003evoid\u003c/span\u003e methods in languages that support exceptions is not very useful. Instead, I prefer using idioms like the \u003ca href=\"http://pragprog.com/magazines/2012-04/the-pragmatic-defense\"\u003eboolean return value and single exit point\u003c/a\u003e. Together with design by contract and sufficient testing coverage, mistakes like the Ariane 5 crash can be discovered and eliminated at an early phase -- before it's too late...\u003cbr /\u003e\u003cbr /\u003eThe fact that there are usually two discrete programming teams developing the same space software part using different programming languages (and members with different mindsets) is extremely important. It focuses on the importance of the human factor and emphasizes on using different tools to solve the same problem as a way of writing \"better\" (for example faster, with less bugs, cleaner, more fault tolerant, etc.) code.\u003cbr /\u003e\u003cbr /\u003eThis is aligned with one of my basic principles: Programming languages are just tools, and the right tool should be used for the right job. Dogmatic decisions increase the potential of failure.\u003cbr /\u003e\u003cbr /\u003e\u003cbr /\u003e\u003c/div\u003e","description":null,"image":null,"permalink":"http://localhost:1313/blog/2012-07-18-what-we-can-learn-from-space-guys/","title":"What we can learn from the space guys"},{"content":"\n\u003cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003eThe se-radio podcast about \u003ca href=\"http://www.se-radio.net/2008/10/episode-113-building-platforms-with-jeff-mcaffer/\"\u003ebuilding a platform\u003c/a\u003e contains many useful tips, but the most important IMHO are (1) the importance of the API, (2) \"eating your own dog food\".\u003cbr /\u003e\u003cbr /\u003eThe API should be easy to use. This means that it should be intuitive for the users, which in this case are programmers. Note that the developers of the API should not decide about its flexibility and easiness. That should be decided only by the users, so the design of an API is guided by the programmers who use it. Good code documentation is also important, and in this case tools like doxygen are invaluable. Finally, backward compatibility is crucial.\u003cbr /\u003e\u003cbr /\u003e\"Eating your own dog food\" in this case means using your own platform, either to extend it or to develop customer products (or by being just the end customer). I find this extremely important, because when programmers develop products that they never use or don't find useful for themselves, the quality of the product is low. This is related with the \u003ca href=\"https://en.wikipedia.org/wiki/The_Cathedral_and_the_Bazaar#Guidelines_for_creating_good_open_source_software\"\u003e\"Scratching an itch\"\u003c/a\u003e topic (see guidelines 1 and 18). Examples: Eclipse developers use Eclipse to develop it further, Apple developers use the stuff that they developed in their daily life, etc.\u003c/div\u003e","description":null,"image":null,"permalink":"http://localhost:1313/blog/2012-07-12-on-building-platform/","title":"On building a platform"},{"content":"\n\u003cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003eI usually go at work by bicycle and to spend my cycling time efficiently I listen to the podcasts of\u0026nbsp; \u003ca href=\"http://www.se-radio.net/\"\u003ese-radio\u003c/a\u003e. I have this idea of sharing my thoughts about the things being said in the podcasts but I'm not sure if it is going to work well. But anyway...\u003cbr /\u003e\u003cbr /\u003eToday's podcast was about \u003ca href=\"http://www.se-radio.net/2008/03/episode-89-joe-armstrong-on-erlang/\"\u003eErlang\u003c/a\u003e. Erlang is a functional language which started as a Prolog derivative focusing on solving fault tolerance problems in telecommunications systems. Compared to its initial version, Erlang has evolved a lot. The performance is much better, it uses a dedicated virtual machine, and offers a framework (OTP) for developing real-time fault tolerant systems.\u003cbr /\u003e\u003cbr /\u003eErlang focuses on fault tolerance using lightweight processes that communicate with each other using message passing primitives. Each process is independent from the rest, like processes in operating systems. There is no shared memory or threads, so\u0026nbsp; no need for deadlock detection/avoidance techniques, mutexes, conditional variables, and the like.\u003cbr /\u003e\u003cbr /\u003eAnother notable feature is the \"let it crash\" philosophy. Since processes are independent, when a process crashes the rest remain unaffected. This gives the option of using special processes for monitoring the faulty processes. It's even possible to debug and replace faults in runtime.\u003cbr /\u003e\u003cbr /\u003eNow that single processors have reached their limits, Erlang is a great option for making efficient use of multi-core CPUs without messing with threads and hard to debug deadlocks.\u003cbr /\u003e\u003cbr /\u003eObviously the Prolog-like syntax of Erlang is keeping some programmers away, but that's not a serious reason for not giving it a try.\u003c/div\u003e","description":null,"image":null,"permalink":"http://localhost:1313/blog/2012-07-05-why-erlang-matters/","title":"Why Erlang matters"},{"content":"\n\u003cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003eThe prolonged financial crisis that we are living has caused an enormous growth in unemployment rates all over the world. Software Engineers and Programmers are by no means an exception to that rule, especially fresh graduates with no or little professional experience. But to find a job (or search for a better one) we need to (1) sit for (usually many) interviews, (2) find if there's a match between what we are looking and what the employer can provide us.\u003cbr /\u003e\u003cbr /\u003eBeing interviewed is unfortunately no fun in most cases. The employers are looking for the perfect candidate, thus they are trying to push us as much as possible: They check our programming and software engineering skills, our communication and social skills, our logic and problem-solving skills, our future plans, etc. (the list can go forever).\u003cbr /\u003e\u003cbr /\u003eBut what do the employers provide in exchange? A good salary? That's obviously important, but I don't think it's enough. If I have to devote at least 8 hours of my life everyday on working for someone, a good salary is not sufficient. Most employers might use some buzzwords (agile, scrum, TDD, etc.)\u0026nbsp; during an interview for convincing us to work for them. Unfortunately reality can be different, and we only find out when it's too late...\u003cbr /\u003e\u003cbr /\u003eSo what can we do to avoid that situation? It's simple: We can also ask questions. The next time that your potential employer is going to ask you if you have any questions, surprise her by asking interesting questions similar (but not necessarily the same) to the questions of \u003ca href=\"http://www.joelonsoftware.com/articles/fog0000000043.html\"\u003eThe Joel Test\u003c/a\u003e:\u003cbr /\u003e\u003col\u003e\u003cli\u003eDo you use a distributed version control system?\u003c/li\u003e\u003cli\u003eDo you have a bug database?\u0026nbsp; \u003c/li\u003e\u003cli\u003eCan I make a build in one step using your build system?  \u003c/li\u003e\u003cli\u003eCan I suggest new programming languages/practices? \u003c/li\u003e\u003cli\u003eDo you use an agile methodology?\u003c/li\u003e\u003cli\u003eDo programmers have quiet working conditions?  \u003c/li\u003e\u003cli\u003eDo you have testers?\u0026nbsp;\u003c/li\u003e\u003c/ol\u003eIn contrast to Joel's Test, simple yes/no answers should not be acceptable since the employer might not be 100% honest...\u003c/div\u003e","description":null,"image":null,"permalink":"http://localhost:1313/blog/2012-06-03-are-you-evaluating-your-potential/","title":"Do you evaluate your potential employers?"},{"content":"\n\u003cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003e\u003ch3 class=\"documentDescription\" style=\"text-align: left;\"\u003e                            \u003cspan class=\" kssattr-atfieldname-description kssattr-templateId-widgets/textarea kssattr-macro-textarea-field-view inlineEditable\" id=\"parent-fieldname-description\"\u003e            Introduction to Plan 9 and writing a simple chmod utility\u0026nbsp;\u003c/span\u003e\u003cspan class=\" kssattr-atfieldname-description kssattr-templateId-widgets/textarea kssattr-macro-textarea-field-view inlineEditable\" id=\"parent-fieldname-description\"\u003e \u003c/span\u003e\u003c/h3\u003eI decided to write down some notes about my experiences while playing with \u003ca class=\"external-link\" href=\"http://plan9.bell-labs.com/plan9/\"\u003ePlan 9\u003c/a\u003e.  Plan 9 is a free software (OSI certified) distributed operating system  developed in a place that I would like to visit someday: Bell Labs.  Many great programmers have contributed to Plan 9. Among them are the  well-known from the UNIX world Ken Thompson and Rob Pike. Yet another  respected programming figure, Brian Kernighan, claims to be just a \u003ca class=\"external-link\" href=\"http://doc.cat-v.org/plan_9/2nd_edition/README\"\u003ecasual user\u003c/a\u003e of the system (or at least he did in 1995).\u003cbr /\u003e\u003cbr /\u003eThere are many novel ideas behind Plan 9. Some of them have already been reimplemented in other operating systems: The \u003ccode\u003e/proc\u003c/code\u003e and other in memory pseudo file systems, private group per user, native  UTF-8 support, append-only file permissions, and treating FTP  directories as local. But there are some Plan 9 features that are simply  impossible to implement in the rest systems; or if they are implemented  it is done in a very ugly/hacky way, because their design is not  flexible enough. To mention a few: Namespaces, no need for  root/superuser or \u003ccode\u003esudo\u003c/code\u003e-like hacks, every compilation is by default a cross compilation, device files are controlled using clear-text.\u003cbr /\u003e\u003cbr /\u003e\u003ch3 style=\"text-align: left;\"\u003e      Coding in Plan 9\u003c/h3\u003eAlthough Plan 9 provides an ANSI/POSIX compatibility layer (APE), it  doesn't make sense to use it for other than porting purposes.The native C  API of Plan 9 is neither POSIX nor ANSI compatible, but IMHO it's  cleaner and simpler to use. As an example, let's look into the  implementation of a simplified \u003ccode\u003echmod\u003c/code\u003e utility.\u003cbr /\u003e\u003cscript src=\"https://gist.github.com/1699511.js?file=mychmod.c\"\u003e\u003c/script\u003e\u003cbr /\u003eA few comments about the interesting parts of the code. Plan 9 has  simple built-in support for handling command line arguments using the \u003ccode\u003eARGBEGIN/ARGEND\u003c/code\u003e block. \u003ccode\u003eargv0\u003c/code\u003e is a convenient name that can be used for referring to the name of the  executable. Applying a new permission mask to a file in Plan 9 is just a  matter of updating the mode flag of the file's \u003ccode\u003eDir\u003c/code\u003e structure. The result is a nice utility using only a few lines of code. Here's how it can be used:\u003cbr /\u003e\u003cbr /\u003e\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\u003ca href=\"http://3.bp.blogspot.com/-JqcOHepwI9U/T7_j5P0hrjI/AAAAAAAAAAg/bacxP26KyXk/s1600/9chmod.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" height=\"97\" src=\"http://3.bp.blogspot.com/-JqcOHepwI9U/T7_j5P0hrjI/AAAAAAAAAAg/bacxP26KyXk/s400/9chmod.png\" width=\"400\" /\u003e\u003c/a\u003e\u003c/div\u003e\u003cbr /\u003eAnd that concludes this brief introduction to Plan 9. Until next time... Happy Coding!\u003cbr /\u003e\u003cbr /\u003e\u003ch3 style=\"text-align: left;\"\u003e      References\u003c/h3\u003e\u003cul\u003e\u003cli\u003e\u003ci\u003eRob Pike, Dave Presotto, et al. \u003c/i\u003e\u003ca class=\"external-link\" href=\"http://plan9.bell-labs.com/sys/doc/9.html\"\u003ePlan 9 From Bell Labs\u003c/a\u003e.\u003c/li\u003e\u003cli\u003e\u003ci\u003eFrancisco J Ballesteros.\u003c/i\u003e \u003ca class=\"external-link\" href=\"http://lsub.org/who/nemo/9.intro.pdf\"\u003eIntroduction to Operating System Abstractions using Plan 9 from Bell Labs\u003c/a\u003e.\u003c/li\u003e\u003c/ul\u003e\u003cdiv class=\"documentDescription\"\u003e\u003c/div\u003e\u003c/div\u003e","description":null,"image":null,"permalink":"http://localhost:1313/blog/2012-01-29-9series-introduction-and-chmod/","title":"9series: Introduction and chmod"},{"content":"\n\u003cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003e\u003ch4 class=\"documentDescription\" style=\"text-align: left;\"\u003e                      \u003cspan class=\" kssattr-atfieldname-description kssattr-templateId-widgets/textarea kssattr-macro-textarea-field-view inlineEditable\" id=\"parent-fieldname-description\"\u003e            GRUB on a cigarette machine\u0026nbsp;\u003c/span\u003e\u003c/h4\u003e\u003cdiv class=\"documentDescription\"\u003eAccording to \u003ca class=\"external-link\" href=\"http://weblog.savanne.be/478-as-seen-in-an-amsterdam-bar\"\u003eRuben\u003c/a\u003e the GRUB (and probably POSIX) powered cigarette machine can be found in  an Amsterdam bar. What an interesting embedded system! After seeing  this it's impossible not to show sympathy for the Netherlands. Most  other embedded systems that I have seen in other countries are using  Windows. Good job bar owners. I'll make sure to visit your bar for a  beer :)\u003cspan class=\" kssattr-atfieldname-description kssattr-templateId-widgets/textarea kssattr-macro-textarea-field-view inlineEditable\" id=\"parent-fieldname-description\"\u003e\u0026nbsp;\u003c/span\u003e             \u003c/div\u003e\u003c/div\u003e","description":null,"image":null,"permalink":"http://localhost:1313/blog/2011-12-18-i-love-your-boot-loader/","title":"I love your boot loader"},{"content":"\n\u003cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003e\u003ch4 class=\"documentDescription\" style=\"text-align: left;\"\u003e                        \u003cspan class=\" kssattr-atfieldname-description kssattr-templateId-widgets/textarea kssattr-macro-textarea-field-view inlineEditable\" id=\"parent-fieldname-description\"\u003e            Quick hack to fix it\u003c/span\u003e\u003c/h4\u003eThe latest update of Debian testing (aka Wheezy) breaks GCC, both version 4.x and 5.x:\u003cbr /\u003e\u003cpre\u003e#include \u0026lt;stdio.h\u0026gt;\u003cbr /\u003e\u003cbr /\u003eint\u003cbr /\u003emain (void)\u003cbr /\u003e{\u0026nbsp; \u003cbr /\u003e   return 0;\u003cbr /\u003e}\u003cbr /\u003e\u003cbr /\u003efaif@isengard:~$ gcc --version\u003cbr /\u003egcc (Debian 4.5.3-3) 4.5.3\u003cbr /\u003efaif@isengard:~$ gcc -o a a.c\u003cbr /\u003e/usr/bin/ld: cannot find -lgcc_s\u003cbr /\u003ecollect2: ld returned 1 exit status\u003c/pre\u003e\u003cpre\u003e\u0026nbsp;\u003c/pre\u003eWell, the thing is that the \"missing\" library is already installed:\u003cbr /\u003e\u003cpre\u003efaif@isengard:~$ find / -name '*libgcc*' 2\u0026gt;/dev/null\u003cbr /\u003e/lib/libgcc_s.so.1\u003c/pre\u003e\u003cbr /\u003eSo, \u003ca class=\"external-link\" href=\"http://www.debian.org/doc/FAQ/ch-software.en.html\"\u003ewhy (see 5.6)\u003c/a\u003e is this happening? Well, that's because someone forgot to add the  relevant symbolic link. Thus a quick hack to fix the problem is:\u003cbr /\u003e\u003cpre\u003efaif@isengard:~$ sudo ln -s /lib/libgcc_s.so.1 /lib/libgcc_s.so\u003cbr /\u003efaif@isengard:~$ gcc -o a a.c \u0026amp;\u0026amp; echo voila!\u003cbr /\u003evoila!\u003cbr /\u003efaif@isengard:~$\u003c/pre\u003e\u003cbr /\u003e\u003cdiv class=\"documentDescription\"\u003e\u003c/div\u003e\u003c/div\u003e","description":null,"image":null,"permalink":"http://localhost:1313/blog/2011-08-25-updating-debian-wheezy-breaks-gcc/","title":"Updating Debian Wheezy breaks GCC"},{"content":"\n\u003cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003e\u003cdiv class=\"documentDescription\"\u003e\u003ch4 style=\"text-align: left;\"\u003e   \u003cspan class=\" kssattr-atfieldname-description kssattr-templateId-widgets/textarea kssattr-macro-textarea-field-view inlineEditable\" id=\"parent-fieldname-description\"\u003e            Would you hire this seeker?\u0026nbsp;\u003c/span\u003e\u003c/h4\u003e\u003c/div\u003eThis is a real LinkedIn post from a job seeker:\u003ccite\u003e\u003c/cite\u003e\u003cbr /\u003e\u003cblockquote class=\"tr_bq\"\u003eHi, i search work. I web-programmer. I work to PHP. I from COUNTRY\u003csup\u003e[1]\u003c/sup\u003e. Interested in remote work. Please write me in profile.\u003c/blockquote\u003e\u003ccite\u003e\u003c/cite\u003eHonestly: If you were a job recruiter, would you give a change to this seeker? I guess not...\u003cbr /\u003e\u0026nbsp;\u003ca href=\"http://www.blogger.com/blogger.g?blogID=7146248794813174249\" name=\"ref_1\"\u003e\u003cbr /\u003e\u003c/a\u003e\u003cbr /\u003e[1] I removed the name of the country since the point of this post is not to offend a specific country, but to make fun of the actual content.\u003cbr /\u003e\u003cbr /\u003e\u003cbr /\u003e\u003cspan class=\" kssattr-atfieldname-description kssattr-templateId-widgets/textarea kssattr-macro-textarea-field-view inlineEditable\" id=\"parent-fieldname-description\"\u003e\u0026nbsp;\u003c/span\u003e             \u003c/div\u003e","description":null,"image":null,"permalink":"http://localhost:1313/blog/2011-08-05-job-seeking-post/","title":"Job seeking post"},{"content":"\n\u003cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003eAfter more than a year of using Debian GNU/Linux stable (Lenny) on my eee, I decided to upgrade it to testing (Squeeze). The reasons are  many. Some of them, are the access to updated versions of many  applications, and the usage of a recent optimized kernel. Anyway, my  system is fine except from a (pretty annoying) bug with gnome-panel when minimizing applications (they are gone instead of iconified), which  seems to be a known issue but I still have not found a good solution\u003csup\u003e[1]\u003c/sup\u003e\u003cbr /\u003e\u003cbr /\u003e\u003cdiv class=\"callout\" style=\"background-color: white; color: black;\"\u003e[1] The problem was solved by simply reinstalling GNOME :)\u003c/div\u003e\u003cdiv class=\"callout\"\u003e\u003cbr /\u003e\u003c/div\u003eIf you are planning to do the same, the following advices might be helpful:\u003cbr /\u003e\u003cul\u003e\u003cli\u003eMake sure that you have enough space on all partitions. In my  case, during the installation my root partition became full, which  terminated the process. An easy way to free space on the root partition  (I'm talking about using a separate root partition here) is to remove  outdated kernels and modules (if you don't use a separate boot  partition). Don't do this manually, use \u003ccode\u003eaptitude search linux-image\u003c/code\u003e and \u003ccode\u003eaptitude purge\u003c/code\u003e instead. Other than that, \u003ccode\u003edu --human-readable --summarize [directories/files] | sort --reverse --numeric-sort\u003c/code\u003e will be your friend :)\u003c/li\u003e\u003cli\u003eBe aware of the udev \u003ca class=\"external-link\" href=\"http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=571255\"\u003ebug\u003c/a\u003e. There is a lot of discussion on the Web, but the best solution I've found is on the Debian \u003ca class=\"external-link\" href=\"http://forums.debian.net/viewtopic.php?f=16\u0026amp;t=48996\"\u003eforum\u003c/a\u003e.\u003c/li\u003e\u003cli\u003eUse \u003ccode\u003eaptitude\u003c/code\u003e instead of \u003ccode\u003eapt-get\u003c/code\u003e. The steps are very straightforward:\u003c/li\u003e\u003cul\u003e\u003cli\u003eReplace all the lines in \u003ccode\u003e/etc/apt/sources.list\u003c/code\u003e from  lenny to squeeze (or stable to testing, etc.) except from the security  repository. The reason is that security updates are provided faster for  the stable distribution, and it is fine to keep this line as is (no  conflicts).\u003c/li\u003e\u003cli\u003e\u003ccode\u003esudo aptitude update\u003c/code\u003e\u003c/li\u003e\u003cli\u003e\u003ccode\u003esudo aptitude install apt dpkg aptitude\u003c/code\u003e\u003c/li\u003e\u003cli\u003e\u003ccode\u003esudo aptitude safe-upgrade\u003c/code\u003e. Warning: This can last for some hours so get a book or go out for a coffee...\u003c/li\u003e\u003cli\u003eReboot to make sure that the new kernel is used.\u003c/li\u003e\u003cli\u003e\u003ccode\u003esudo aptitude full-upgrade\u003c/code\u003e. Although not necessary, I advice you to switch into single user mode with \u003ccode\u003esudo telinit 1\u003c/code\u003e before executing this step. \u003c/li\u003e\u003c/ul\u003e\u003c/ul\u003e\u003cbr /\u003eHave fun with Debian!\u003c/div\u003e","description":null,"image":null,"permalink":"http://localhost:1313/blog/2011-07-31-debian-lenny-squeeze-transition/","title":"Debian Lenny -\u003e Squeeze transition"},{"content":"\n\u003cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003e\u003ch4 class=\"documentDescription\" style=\"text-align: left;\"\u003e                       \u003cspan class=\" kssattr-atfieldname-description kssattr-templateId-widgets/textarea kssattr-macro-textarea-field-view inlineEditable\" id=\"parent-fieldname-description\"\u003e            Thesssaloniki's hackerspace is here!\u003c/span\u003e\u003c/h4\u003e\u003cdiv class=\"documentDescription\"\u003e\u003cspan class=\" kssattr-atfieldname-description kssattr-templateId-widgets/textarea kssattr-macro-textarea-field-view inlineEditable\" id=\"parent-fieldname-description\"\u003e\u003c/span\u003e The following excerpt is taken from the \u003ca class=\"external-link\" href=\"http://the-hackerspace.blogspot.com/\"\u003ehomepage\u003c/a\u003e of TheHackerspace: \u003c/div\u003e\u003cblockquote class=\"tr_bq\"\u003e\u003cdiv class=\"callout\" style=\"text-align: justify;\"\u003e\"Unless you are rich, it is unlikely that you own all the hardware and the tools required to build different kinds of embedded systems. For example you might already own an arduino board, but most probably you are missing the X or Y sensor required to build your favourite prototype.\u003c/div\u003e\u003cdiv class=\"callout\" style=\"text-align: justify;\"\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv class=\"callout\" style=\"text-align: justify;\"\u003eAnd unless you are a genius, it is unlikely that you know everything about all the available free software/open source operating systems. Thus, perhaps you wrote your own system call or driver for the Linux kernel, but most probably you don’t know how to do the same stuff on another operating system that you like (for example MINIX 3).\u003c/div\u003e\u003cdiv class=\"callout\" style=\"text-align: justify;\"\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv class=\"callout\" style=\"text-align: justify;\"\u003eDon’t worry. That is exactly why we founded TheHackerspace. It is a place where hardware, books, code, and knowledge is shared between people who like to hack. If you are interested on embedded and system hacking, you are welcomed to join us.\"\u003c/div\u003e\u003c/blockquote\u003e\u003cdiv style=\"text-align: justify;\"\u003ePersonally I contributed in many ways to  the foundation of TheHackerspace by helping to build the lab, donating books, writing most of the (current) content  in the homepage, etc. Unfortunately I don't have the time to enjoy  TheHackerspace since in a week I'm relocating to the Netherlands where I  got a job (but that's good news!). I hope that when I'm back in  Thessaloniki TheHackerspace will still exist and some really great  projects will be the outcomes of its foundation :)\u003c/div\u003e\u003c/div\u003e","description":null,"image":null,"permalink":"http://localhost:1313/blog/2011-06-01-thehackerspace/","title":"TheHackerspace"},{"content":"\n\u003cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003e\u003cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003e\u003ch4 class=\"documentDescription\" style=\"text-align: left;\"\u003e                  \u003cspan class=\" kssattr-atfieldname-description kssattr-templateId-widgets/textarea kssattr-macro-textarea-field-view inlineEditable\" id=\"parent-fieldname-description\"\u003e            Visiting Yahoo! Answers without using a Web browser\u0026nbsp;\u003c/span\u003e\u003c/h4\u003eI believe that services like Yahoo! Answers are very useful and use  them at times. The Yahoo! Answers community gives an extra point to  users each time they visit their account (but only once/day).\u003cbr /\u003e\u003cbr /\u003eThe problem is that usually I'm very busy (or lazy) and thus I always  forget to visit my account. Therefore I was looking for ways of  automating the process. It looks like this is very straightforward to do  when the right tools are used. Here's a quick solution using Python:\u003cbr /\u003e\u003cdiv class=\"documentDescription\"\u003e\u003cbr /\u003e\u003cscript src=\"https://gist.github.com/1567050.js?file=answers.py\"\u003e  \u003c/script\u003e You might argue that using clear-text passwords is not a good  practice; that is absolutely right, but in this case I'm not insane  about the protection of my Yahoo! credentials since Answers is the only  Yahoo! service that I use.\u003cbr /\u003e\u003cbr /\u003eHappy coding!\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e","description":null,"image":null,"permalink":"http://localhost:1313/blog/2011-05-21-automatic-web-logon/","title":"Automatic Web logon"},{"content":"\n\u003cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003e\u003ch1 class=\"documentFirstHeading\"\u003e                        \u003c/h1\u003eQuestion: How is it possible to have 1076 people in my network at company X but no connections at all at the same company?\u003cbr /\u003e\u003cbr /\u003e\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\u003ca href=\"http://3.bp.blogspot.com/-yso3jczspHA/T7--yTOs5bI/AAAAAAAAAAU/qbO59pNE6xc/s1600/LinkedIn.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" height=\"232\" src=\"http://3.bp.blogspot.com/-yso3jczspHA/T7--yTOs5bI/AAAAAAAAAAU/qbO59pNE6xc/s400/LinkedIn.png\" width=\"400\" /\u003e\u003c/a\u003e\u003c/div\u003e\u003cbr /\u003e\u003cbr /\u003eAnswer: Ask the LinkedIn developers!\u003cbr /\u003e\u003ch1 class=\"documentFirstHeading\"\u003e               \u003c/h1\u003e\u003c/div\u003e","description":null,"image":null,"permalink":"http://localhost:1313/blog/2011-05-14-linkedin-bug/","title":"LinkedIn bug?"},{"content":"\n\u003cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003eI really like the concept of inline assertions. Assertions might be  rude, since they kick you out of a program whenever they fail, but by  using them you can make sure that your code gives you the expected  results. You might argue that Unit Testing is a better approach. I won't  say no, but I believe that unit testing is slower to implement and not  necessary in all cases.\u003cbr /\u003e\u003cbr /\u003eAnyway this is not where I want to focus. If you are coding in QT, you might be aware of \u003ccode\u003eQ_ASSERT\u003c/code\u003e. Like other features (\u003ccode\u003eQString\u003c/code\u003e, \u003ccode\u003eQFile\u003c/code\u003e,  etc.), QT provides its own facility for writing code assertions. So  that's another replacement of a standard facility, right? Well, not  exactly... What I wasn't aware of, is that \u003ccode\u003eQ_ASSERT\u003c/code\u003e  statements are completely ignored when the application is executing in  release mode. They are only taken into account in debug mode. I was  using a statement like \u003ccode\u003eQ_ASSERT(doThat())\u003c/code\u003e in my code, which was causing a hard to track logical error (since \u003ccode\u003edoThat()\u003c/code\u003e was never executed in release mode). Luckily, after a couple of hours a colleague of mine discovered the bug.\u003cbr /\u003e\u003cbr /\u003eMy mistake: I wrongly assumed that \u003ccode\u003eQ_ASSERT\u003c/code\u003e acts like the classic \u003ccode\u003eassert\u003c/code\u003e, which is only ignored in a C++/C program if a special macro (like \u003ccode\u003eNDEBUG\u003c/code\u003e) is defined. What I actually wanted was my assertions to be checked in both modes, which is done by using the standard \u003ccode\u003eassert\u003c/code\u003e facility.\u003cbr /\u003e\u003cbr /\u003eSo are you using \u003ccode\u003eQ_ASSERT\u003c/code\u003e? That's fine. Just be aware that \u003ccode\u003eQ_ASSERT\u003c/code\u003e and \u003ccode\u003eassert\u003c/code\u003e behave differently.\u003cbr /\u003e\u003cbr /\u003eHappy coding.\u003c/div\u003e","description":null,"image":null,"permalink":"http://localhost:1313/blog/2011-05-12-beware-of-qassert/","title":"Beware of Q_ASSERT"},{"content":"\n\u003cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003eIf you are coding in python, you are probably already familiar with  the profiler concept. The problem is that the python profiler license  fails to comply with the free software guidelines of Debian and  therefore the package belongs to the non-free archive. \"So what?\", you  might say. Well, personally I don't like to use software which belongs  to the non-free archive both for philosophical and technical reasons. An  important technical reason for instance is that Debian does not provide  security updates for the non-free packages.\u003cbr /\u003e\u003cbr /\u003eThe next question is  are there any alternative solutions? Thankfully the answer is yes.  Since python 2.3 we can use the timeit module to test the efficiency of our code. Let me demonstrate the module using a simple example, taken  from Downey's \"Think Python\" book (exception handling and the like are  omitted for simplicity).\u003cbr /\u003e\u003cbr /\u003e\u003cscript src=\"https://gist.github.com/1561608.js?file=fibo-timeit.py\"\u003e\u003c/script\u003e \u003cbr /\u003eWhat we want to see here is how much more efficient is the  recursive version of Fibonacci which uses a dictionary as a memo. Let's  first see the result of the given code snippet (no memo version):\u003cbr /\u003e\u003cpre\u003epython3 fibo-timeit.py\u003cbr /\u003e113.601776838\u003c/pre\u003eWow! It took almost 114 seconds the profiler to complete the test... Let's change the code to use the memo-based function:\u003cbr /\u003e\u003cpre\u003et = Timer('fibonacci_ef(9)', 'from __main__ import fibonacci_ef')\u003c/pre\u003eSo let's find out if memoization does indeed worth trying:\u003cbr /\u003e\u003cpre\u003epython3 fibo-timeit.py\u003cbr /\u003e1.40260386467\u003c/pre\u003e\u003cpre\u003e\u0026nbsp;\u003c/pre\u003eHmmm.... Not bad. Happy Coding :)\u003c/div\u003e","description":null,"image":null,"permalink":"http://localhost:1313/blog/2011-05-08-python-code-profiling-in-debian/","title":"Python code profiling in Debian"},{"content":"\n\u003cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003e\u003cdiv class=\"plain\" id=\"parent-fieldname-text\" style=\"text-align: left;\"\u003e\u003cdiv class=\"documentDescription\"\u003e\u003c/div\u003e\u003ch4 style=\"text-align: left;\"\u003e \u003c/h4\u003e\u003ch4 style=\"text-align: left;\"\u003e\u003cspan class=\"\" id=\"parent-fieldname-description\"\u003e            How I ended up with a clean Plone instance on objectis\u003c/span\u003e\u003c/h4\u003e\u003ch4 style=\"text-align: left;\"\u003e \u003c/h4\u003e\u003cdiv class=\"documentDescription\"\u003e\u003c/div\u003eWhat can I say? It is my faith to develop my homepage from scratch once every while...\u003cbr /\u003e\u003cbr /\u003eWhen I decided to migrate from Drupal to Plone, dtek (a company where  I used to work in the past) has kindly offered me some space and hosted  my Plone site for free. Unfortunately they can't host my homepage  anymore. While looking for hosting providers, I found out that it is  expensive to host Plone/Zope sites, in contrast for example to PHP/MySQL  sites.\u003cbr /\u003e\u003cbr /\u003eThankfully Pilot Systems is kind enough to provide free Plone hosting  services through the objectis service. I really appreciate that.  Unfortunately, there are some limitations to the free package, the  biggest of them being the lack of support for restoring Plone websites  of size \u0026gt; 10MB. The backup of my former homepage (freeasinfreedom.eu) is  ~25MB thus I cannot restore it using the quick importer of Zope.\u003cbr /\u003e\u003cbr /\u003eSo\u0026nbsp; here I am, with a clean Plone instance that I have to develop from scratch step by step. Better than nothing, isn't it?\u003c/div\u003e\u003c/div\u003e","description":null,"image":null,"permalink":"http://localhost:1313/blog/2011-04-28-back-to-basics/","title":"Back to basics..."}]