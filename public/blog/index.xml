<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Sakis Kasampalis - Personal homepage</title>
    <link>https://sakisk.me/blog/</link>
    <description>Recent content in Blogs on Sakis Kasampalis - Personal homepage</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 29 Dec 2022 20:30:00 +0000</lastBuildDate>
    <atom:link href="https://sakisk.me/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dirty clouds</title>
      <link>https://sakisk.me/blog/2022-12-29-dirty-clouds/</link>
      <pubDate>Thu, 29 Dec 2022 20:30:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2022-12-29-dirty-clouds/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://sakisk.me/assets/cloud.png&#34; alt=&#34;Cloud and Linux&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Ideally, all resources of a cloud environment should be handled by Infrastructure As Code (&lt;abbr title=&#34;Infrastructure As Code&#34;&gt;IAC&lt;/abbr&gt;). At work, we are using Terraform to do this. But as usual, the ideal situation is never what happens in practice. So, it is not uncommon for people to change things directly on the cloud environment: in our case, using the AWS console.&lt;/p&gt;&#xA;&lt;p&gt;If the resource that is &amp;ldquo;dirty&amp;rdquo; is already tracked in source code, it is usually fine. When trying to deploy, Terraform will report the difference, so that gives us the chance to update the code and fix the dirty change issue. Note: Always inspect carefully the recommended Terraform action(s) before deploying, because a dirty change has often unwanted effects. A concrete example is when a user makes a relational database change directly on the cloud environment, like increasing the size of a connection pool. As soon as you try to deploy using IAC, Terraform suggests to drop and create the database again. That&amp;rsquo;s the last thing that we want for a database, because all existing data will be lost! The proper action in this case is to modify the code so that the connection pool size number matches the one of the cloud environment.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bye bye Experia Box (V10)</title>
      <link>https://sakisk.me/blog/2022-11-09-bye-experia/</link>
      <pubDate>Wed, 09 Nov 2022 19:30:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2022-11-09-bye-experia/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://sakisk.me/assets/experia.jpeg&#34; alt=&#34;WAN settings&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;This is something that I wanted to do for years, and it finally happened. I got rid of the Experia Box.&lt;/p&gt;&#xA;&lt;p&gt;You know the story. You switched to a fiber Internet connection. Is there anything better? I love it!&lt;/p&gt;&#xA;&lt;p&gt;And then comes your &amp;ldquo;generous&amp;rdquo; &lt;abbr title=&#34;Internet Service Provider&#34;&gt;ISP&lt;/abbr&gt;. They gave you the Experia Box, in my case V10 (ZTE H369A). A crappy device with poor WiFi connectivity and insecure protocols, limited configuration options, and no firmware upgrade possibilities.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Map results should be free from side-effects</title>
      <link>https://sakisk.me/blog/2022-07-29-map-no-side-effects/</link>
      <pubDate>Fri, 29 Jul 2022 19:00:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2022-07-29-map-no-side-effects/</guid>
      <description>&lt;p&gt;When we want to write code that operates on a data structure, it is common to initially implement it for a single item, and then make it more general. In functional languages like Clojure, I use the following pattern a lot, to execute a function on all items of a data structure (aka collection, or seq):&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;single-item-function [item]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#a6e22e&#34;&gt;dostuff&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;collection-function [collection]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (map &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;single-item-function&lt;/span&gt; %) collection))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;p&gt;So far so good, until I found out that only one of the functions &lt;a href=&#34;https://github.com/faif/sub-matcher&#34;&gt;in my hobby project&lt;/a&gt; was working fine at the &lt;abbr title=&#34;Read-Eval-Print-Loop&#34;&gt;REPL&lt;/abbr&gt; (Read-Eval-Print-Loop), but not outside of it. Guess what was wrong with that function: It had side-effects!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Making S3 buckets public is not the solution</title>
      <link>https://sakisk.me/blog/2022-05-26-no-s3-public/</link>
      <pubDate>Thu, 26 May 2022 19:00:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2022-05-26-no-s3-public/</guid>
      <description>&lt;p&gt;After doing an IAM cleanup and creating user groups to limit user permissions, our data scientists at work reported a problem. They are using Athena and boto3 to access S3 buckets programmatically, and that stopped working. They started seeing the following error message instead:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;An error occurred &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;AccessDeniedException&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; when calling the StartQueryExecution operation...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;p&gt;While looking for solutions, I was disappointed to see that almost all of them suggested modifying the bucket&amp;rsquo;s policy. Adding a custom S3 bucket policy means disabling the &amp;ldquo;Block all public access&amp;rdquo; default setting. Blocking all public access on S3 is a great practice. That&amp;rsquo;s what AWS recommends and we should not change it unless there&amp;rsquo;s a very serious reason to do so.&lt;/p&gt;</description>
    </item>
    <item>
      <title>When in trouble, ssh -vvvvvv :)</title>
      <link>https://sakisk.me/blog/2022-01-02-when-in-trouble-ssh/</link>
      <pubDate>Sun, 02 Jan 2022 10:00:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2022-01-02-when-in-trouble-ssh/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://sakisk.me/assets/tar.png&#34; alt=&#34;xkcd tar&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;I was configuring a new server and what&amp;rsquo;s the first thing that we want to setup when doing that? Passwordless ssh of course.&lt;/p&gt;&#xA;&lt;p&gt;So after following all required steps, I tried to connect. And it failed (still required a password)â€¦ So what do we do in that case?&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Ensure that the key was copied to the remote machine (e.g. by &lt;code&gt;ssh-copy-id&lt;/code&gt;). Yep, looks good.&lt;/li&gt;&#xA;&lt;li&gt;Check all related dir and file permissions of both local and remote computers (&lt;code&gt;.ssh&lt;/code&gt; and its contents). All good.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;So what the heck is wrong? Let&amp;rsquo;s run ssh in (max) verbosity using &lt;code&gt;ssh -vvv&lt;/code&gt; (3 v is the max, adding more v is just for fun):&lt;/p&gt;</description>
    </item>
    <item>
      <title>Let&#39;s plant some UML</title>
      <link>https://sakisk.me/blog/2021-09-11-plantuml/</link>
      <pubDate>Sat, 11 Sep 2021 13:00:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2021-09-11-plantuml/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://sakisk.me/assets/uml.png&#34; alt=&#34;UML class diagram&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Are you using UML? The Unified Modeling language is a very useful notation, especially when it comes to explaining the structure and behavior of object-oriented systems. It is language-independent and offers a wide range of models/diagrams that cover the different aspects (static, dynamic, threading, etc.) of a system.&lt;/p&gt;&#xA;&lt;p&gt;I like UML but I was never happy with the tooling around it. My biggest objection is that most of the UML tools use binary formats for storing the models, which makes version-controlling and collaborating for creating them impossible. That is against the nature of modern software development, which should be incremental and based on a team effort. Another thing that I don&amp;rsquo;t like is spending time on the layout of those models (e.g. rearranging boxes because they are not readable). I&amp;rsquo;d rather have the tool take care of this automatically, and only if I&amp;rsquo;m picky about something, e.g. the position of a specific box, to do it myself.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Don&#39;t use a real programming language</title>
      <link>https://sakisk.me/blog/2021-06-21-real-languages/</link>
      <pubDate>Mon, 21 Jun 2021 17:40:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2021-06-21-real-languages/</guid>
      <description>&lt;p&gt;I like Prolog. I think that it&amp;rsquo;s a brilliant tool. And not purely educational, unlike what many people think. You can actually use it to build real, useful, and practical applications: sudoku solvers, adventure games, formal logical systems, and a lot more. It might not be the best tool for developing AAA games and real-time systems, but that doesn&amp;rsquo;t make it useless. I discovered Prolog during university, and I appreciate it since then.&lt;/p&gt;</description>
    </item>
    <item>
      <title>One catch to rule them all</title>
      <link>https://sakisk.me/blog/2020-08-19-one-catch/</link>
      <pubDate>Wed, 19 Aug 2020 20:00:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2020-08-19-one-catch/</guid>
      <description>&lt;p&gt;When writing code, we need to handle errors. What happens if you are trying to read a corrupt file? Or if the network goes down while receiving data? The programming language runtime will try to&#xA;give you an error message that makes sense, but that doesn&amp;rsquo;t mean that this is what you want to show to your application/API users.&lt;/p&gt;&#xA;&lt;p&gt;There are two traditional ways of doing error handling. One is using error codes. That means returning a code (usually a number) to the users when something goes wrong, and let them interpret&#xA;that number using a lookup table. In languages that support exceptions, the recommended way is using exception handling.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Everyday command line: Quoting, splitting, and removing newlines</title>
      <link>https://sakisk.me/blog/2019-04-10-everyday/</link>
      <pubDate>Wed, 10 Apr 2019 13:00:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2019-04-10-everyday/</guid>
      <description>&lt;p&gt;Welcome to the new (infinite) series &amp;ldquo;Everyday command line&amp;rdquo;, in which I&amp;rsquo;ll cover use cases where the command line still shines compared to your favorite file manager, IDE, editor, and the like :)&lt;/p&gt;&#xA;&lt;p&gt;At times, I receive emails with lists of items that need to be modified using code. Let&amp;rsquo;s assume that a colleague sends us a list of 200 object IDs. I&amp;rsquo;ll include only 5 here for brevity:&lt;/p&gt;&#xA;&lt;p&gt;| 29045  |&#xA;| 14874  |&#xA;| 33457  |&#xA;| 21094  |&#xA;| 36842  |&#xA;| &amp;hellip;    |&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wheels says no...</title>
      <link>https://sakisk.me/blog/2018-11-02-wheels-pep/</link>
      <pubDate>Fri, 02 Nov 2018 22:00:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2018-11-02-wheels-pep/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://sakisk.me/assets/computer-says-no.jpeg&#34; alt=&#34;Computer says no&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;After porting one of our libraries at work in Python 3, I wanted to publish it as a package. The tool that we are using to distribute packages is&#xA;&lt;a href=&#34;https://pythonwheels.com&#34;&gt;wheels&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Unfortunately, wheels was refusing to create the package. It was reporting an error similar to the following: &lt;code&gt;wheel.cli.WheelError: &amp;quot;Bad wheel  filename mypackage-latest-cp36-cp36m-linux_x86_64.whl&amp;quot;&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;After searching online without any luck, I found a GitHub issue mentioning &lt;a href=&#34;https://www.python.org/dev/peps/pep-0440/&#34;&gt;PEP 440&lt;/a&gt;. Well, it turns out&#xA;that the &amp;ldquo;latest&amp;rdquo; part of the package name is not very PEP 440 compliant&amp;hellip; So wheels was right to complain. And all I had to do was modify the&#xA;name to make it compliant. The PEP document has many &lt;a href=&#34;https://www.python.org/dev/peps/pep-0440/#examples-of-compliant-version-schemes&#34;&gt;examples&lt;/a&gt; of&#xA;compliant schemes, so if you are facing a similar error pick any scheme that fits you.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Read a version from an external file in a dockerfile</title>
      <link>https://sakisk.me/blog/2018-09-23-docker-env/</link>
      <pubDate>Sun, 23 Sep 2018 20:00:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2018-09-23-docker-env/</guid>
      <description>&lt;p&gt;I wanted to do a rather simple thing in a dockerfile: read a value from an external file and use it in a &lt;code&gt;RUN&lt;/code&gt; command.&#xA;Doing all this inside the dockerfile was a requirement, so I couldn&amp;rsquo;t pass the version while building the image using &lt;code&gt;build-args&lt;/code&gt; or a similar solution.&lt;/p&gt;&#xA;&lt;p&gt;There&amp;rsquo;s nothing hard about achieving this, as long as you keep something in mind: Docker creates intermediate containers&#xA;for a lot of things, including &lt;code&gt;RUN&lt;/code&gt; commands. So that means that everything needs to be done in the same &lt;code&gt;RUN&lt;/code&gt; pipeline.&#xA;The following example shows how we can read a version from an external file and export a variable that we can use (in the&#xA;same pipeline).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Type less, do more...</title>
      <link>https://sakisk.me/blog/2018-02-10-keystrokes/</link>
      <pubDate>Sat, 10 Feb 2018 17:00:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2018-02-10-keystrokes/</guid>
      <description>&lt;p&gt;If you are dealing a lot with the terminal you probably use the &lt;code&gt;cd&lt;/code&gt; command very often. &lt;code&gt;cd here&lt;/code&gt;, &lt;code&gt;cd there&lt;/code&gt;, &lt;code&gt;cd ..&lt;/code&gt;, etc. What if I told you that you can avoid typing the &lt;code&gt;cd&lt;/code&gt; command completely? That can save you a lot of keystrokes which is good because it:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Makes you more productive&lt;/li&gt;&#xA;&lt;li&gt;Helps you avoid &lt;abbr title=&#34;Repetitive Strain Injury&#34;&gt;RSI&lt;/abbr&gt; problems, such as the infamous &lt;abbr title=&#34;Carpal Tunnel Syndrome&#34;&gt;CTS&lt;/abbr&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The first tool that I want to show you is &lt;a href=&#34;https://github.com/wting/autojump&#34;&gt;autojump&lt;/a&gt;. Once installed, autojump (abbreviated by the command &lt;code&gt;j&lt;/code&gt;) maintains its own database to help you navigate to a directory without the need to remember:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sending MQTT data to Adafruit IO using a Pycom board</title>
      <link>https://sakisk.me/blog/2017-07-11-mqtt-adafruit/</link>
      <pubDate>Tue, 11 Jul 2017 19:20:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2017-07-11-mqtt-adafruit/</guid>
      <description>&lt;p&gt;In this tutorial I&amp;rsquo;ll show you how to send MQTT data to &lt;a href=&#34;https://io.adafruit.com&#34;&gt;Adafruit IO&lt;/a&gt;. The hardware that I&amp;rsquo;m using is a &lt;a href=&#34;https://www.pycom.io/product/lopy/&#34;&gt;LoPy&lt;/a&gt; (only its WiFi interface) and an analog temperature sensor &lt;a href=&#34;https://www.adafruit.com/product/165&#34;&gt;TMP36&lt;/a&gt;. The circuit is rather simple:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://sakisk.me/assets/tmp36.png&#34; alt=&#34;Electronic circuit&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;The capacitor between the A/D pin and the ground is used to eliminate noise, but you can skip that if you don&amp;rsquo;t care. For the same reason (increasing the measurement accuracy) I&amp;rsquo;m averaging 100 sample A/D measurements. Measuring only once works too, but it&amp;rsquo;s less accurate.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SFTP: How to fix the &#34;Host key verification failed&#34; problem</title>
      <link>https://sakisk.me/blog/2017-05-24-host-verification-key-failed/</link>
      <pubDate>Wed, 24 May 2017 19:50:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2017-05-24-host-verification-key-failed/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m busy with a Node.js project at work. The project requires SFTP support and for that we decided to use the &lt;a href=&#34;https://www.npmjs.com/package/ftps&#34;&gt;ftps&lt;/a&gt; module. Although I was able&#xA;to connect to the SFTP server using &lt;code&gt;lftp&lt;/code&gt; and FileZilla without any problems, the Node.js project was failing. By checking the logs of the project I noticed that the cause was the infamous &amp;ldquo;Host key verification failed&amp;rdquo; problem.&lt;/p&gt;&#xA;&lt;p&gt;Since SFTP uses SSH, it requires an initial key exchange between the client (in this case, my computer) and the server. Apparently the ftps Node&#xA;module cannot deal with this key exchange. One solution is to force this procedure using the classic &lt;code&gt;ssh&lt;/code&gt; command. Even if the SFTP server is&#xA;configured not to allow remote shell connections (usually it connects to &lt;code&gt;nologin&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;), it will do the job.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Book review: Single Page Web Applications</title>
      <link>https://sakisk.me/blog/2016-10-15-book-review-spa/</link>
      <pubDate>Sat, 15 Oct 2016 14:58:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2016-10-15-book-review-spa/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://sakisk.me/assets/spa.jpg&#34; alt=&#34;Book cover&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;I decided to read &lt;a href=&#34;https://www.manning.com/books/single-page-web-applications&#34;&gt;this book&lt;/a&gt; because I wanted to learn about the architecture&#xA;and implementation of a Single Page Application (SPA). And it turned out to be&#xA;a good choice.&lt;/p&gt;&#xA;&lt;p&gt;What I particularly liked about the book is that it begins from scratch and&#xA;shows how to implement a SPA without relying on heavy frameworks. Whenever a&#xA;library is used, it is done with a purpose (clearly explained by the authors).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Exploring Swift</title>
      <link>https://sakisk.me/blog/2016-07-28-swift-walkthrough/</link>
      <pubDate>Thu, 28 Jul 2016 20:38:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2016-07-28-swift-walkthrough/</guid>
      <description>&lt;p&gt;Before the release of &lt;a href=&#34;https://swift.org&#34;&gt;Swift&lt;/a&gt; I had no interest in doing mobile development. The reason&#xA;was that I&amp;rsquo;m not a big fan of Objective-C (the only official iOS language before Swift was&#xA;released) and Java (the official Android language). I know that there are workarounds for using&#xA;other languages but when it comes to mobile development I prefer using the oficially supported tooling.&lt;/p&gt;&#xA;&lt;p&gt;Although I am a programming language enthusiast Objective-C never got me excited. And after having worked&#xA;with (or at least explored) languages that are more pragmatic and functional (for example Python, Scala,&#xA;and Clojure) my feelings for Java are similar. Both Objective-C and Java are too verbose and not pragmatic&#xA;enough for doing modern development.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Book review: Pragmatic Guide to Git</title>
      <link>https://sakisk.me/blog/2016-07-23-book-review-pragmatic-git/</link>
      <pubDate>Sat, 23 Jul 2016 22:30:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2016-07-23-book-review-pragmatic-git/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://d.gr-assets.com/books/1348576641l/9586547.jpg&#34; alt=&#34;book cover&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;The title of this book describes it correctly. It is a compact guide&#xA;covering the basic (and a few more advanced) use cases of Git. If you&#xA;have already used Git you most likely know everything (or almost&#xA;everything) explained in this book. That was my case, but I&amp;rsquo;ve also&#xA;learnt a few new commands and concepts (like why it&amp;rsquo;s useful to use&#xA;&lt;code&gt;--&lt;/code&gt; before providing any file/path names to avoid clashing).&lt;/p&gt;</description>
    </item>
    <item>
      <title>About uncle Bob&#39;s The Last Programming Language keynote</title>
      <link>https://sakisk.me/blog/2016-07-06-last-language/</link>
      <pubDate>Wed, 06 Jul 2016 10:38:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2016-07-06-last-language/</guid>
      <description>&lt;p&gt;I decided to watch some programming-related videos and I began with uncle Bob&amp;rsquo;s&#xA;keynote &lt;a href=&#34;https://cleancoders.com/episode/clean-code-episode-0/show?autoplay=true&#34;&gt;The Last Programming Language&lt;/a&gt;. In  general I agree with what&#xA;he says, with one exception. Uncle Bob believes that functional programming is important&#xA;because it plays well with multicore programming.&lt;/p&gt;&#xA;&lt;p&gt;I don&amp;rsquo;t think that this is the most important value of functional programming. First of&#xA;all, there&amp;rsquo;s a lot of code written out there that is not multicore-aware. That can happen&#xA;for example when single core performance is sufficient. You can laugh as much as you want&#xA;about this statement but there are many programs where it is actually very true.&lt;/p&gt;</description>
    </item>
    <item>
      <title>And the second conference of the year was... NextBuild</title>
      <link>https://sakisk.me/blog/2016-07-03-and-second-conference-of-year-was-nextbuild/</link>
      <pubDate>Sun, 03 Jul 2016 20:10:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2016-07-03-and-second-conference-of-year-was-nextbuild/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s sad that there are no good programming conferences in the South of the Netherlands and especially around the Eindhoven&#xA;area which is considered very innovative and has a strong university. Fortunately, &lt;a href=&#34;http://nextbuild.nl&#34;&gt;NextBuild&lt;/a&gt; is an exception.&lt;/p&gt;&#xA;&lt;p&gt;2016 was the second year of the NextBuild conference. I missed the first one so I can&amp;rsquo;t comment about it, but I can say a few&#xA;things about the 2016 version. First of all it&amp;rsquo;s important to stress that this is a free (gratis) one day conference, which is&#xA;not the usual case when it comes to conferences (&lt;a href=&#34;%7B%7Bsite.url%7D%7D/2016/05/21/and-first-conference-of-year-was-dutch.html&#34;&gt;Dutch Clojure Days&lt;/a&gt; was another good exception). And even though NextBuild is free,&#xA;we were offered free coffee, juice, cookies, sandwiches, and beers. Not bad&amp;hellip;&lt;/p&gt;</description>
    </item>
    <item>
      <title>And the first conference of the year was... Dutch Clojure Days</title>
      <link>https://sakisk.me/blog/2016-05-21-and-first-conference-of-year-was-dutch/</link>
      <pubDate>Sat, 21 May 2016 22:46:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2016-05-21-and-first-conference-of-year-was-dutch/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;a href=&#34;http://clojure.org/&#34;&gt;Clojure&lt;/a&gt; is a very interesting programming language. If you haven&#39;t checked it yet, go ahead. Apart from being a pragmatic Lisp that offers easy Java interop, it also has a nice community. So far I haven&#39;t spent as much time on the language as I would like, but I&#39;m planning to do that.&lt;br /&gt;&lt;br /&gt;I was planning to write a few comments about each talk of the first (ever) &lt;a href=&#34;http://clojuredays.org/&#34;&gt;Dutch Clojure Days&lt;/a&gt; event, but I just noticed that the whole conference is now available &lt;a href=&#34;https://www.youtube.com/playlist?list=PLjzcwcP9P2LeiVXofnnXcxAqvmVNn3fTD&#34;&gt;online&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;If you don&#39;t want to watch every keynote, there&#39;s one that intrigued me: &lt;a href=&#34;https://www.youtube.com/watch?v=at6Q8sNx95A&amp;amp;list=PLjzcwcP9P2LeiVXofnnXcxAqvmVNn3fTD&amp;amp;index=3&#34;&gt;Conversational Computing:  How Okasaki made McCarthy right yet again&lt;/a&gt;. I liked the way Michiel is trying to connect the dots.&lt;br /&gt;&lt;br /&gt;And if you liked my recommendation and want a second one, try &lt;span class=&#34;watch-title&#34; dir=&#34;ltr&#34; id=&#34;eow-title&#34; title=&#34;Clojure for Data Science  the good, the bad, and the ugly by Simon Belak&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=uZ_3phggAJ8&amp;amp;index=4&amp;amp;list=PLjzcwcP9P2LeiVXofnnXcxAqvmVNn3fTD&#34;&gt;Clojure for Data Science:  the good, the bad, and the ugly&lt;/a&gt;. Simon covers many nice concepts of functional programming, without being afraid to criticize the ugly parts and express his ideas on how things can be improved.&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;watch-title&#34; dir=&#34;ltr&#34; id=&#34;eow-title&#34; title=&#34;Clojure for Data Science  the good, the bad, and the ugly by Simon Belak&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&#34;watch-title&#34; dir=&#34;ltr&#34; id=&#34;eow-title&#34; title=&#34;Clojure for Data Science  the good, the bad, and the ugly by Simon Belak&#34;&gt;I&#39;m very glad that I attended this conference. It was free (gratis) but thanks to the kind sponsors we had everything (coffee, muffins, and sandwiches). The venue was nice, and the location great (well, I love Amsterdam anyway). So yeah, nice work guys and until next year happy Lisping in Clojure ;)&lt;/span&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Course review: Git key user</title>
      <link>https://sakisk.me/blog/2016-04-17-course-review-git-key-user/</link>
      <pubDate>Sun, 17 Apr 2016 21:23:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2016-04-17-course-review-git-key-user/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;Last month I followed a course about Git. The name of the course was &#34;Git key user&#34; and it was organized by &lt;a href=&#34;http://tmcporch.com/&#34;&gt;TMC&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Obviously Git is a tool that you learn by doing, and indeed the lesson of the day was the following: &#34;Do not afraid to experiment&#34;.&lt;br /&gt;&lt;br /&gt;In general Git behaves as a &lt;a href=&#34;http://www.jayway.com/2013/03/03/git-is-a-purely-functional-data-structure/&#34;&gt;purely functional data structure&lt;/a&gt;&amp;nbsp;(or a copy-on-write filesystem)&amp;nbsp;in the sense that it never overwrites or directly removes data. All orphan nodes are kept for two weeks (I assume that this is configurable) and only if you don&#39;t touch them for that period of time they will be cleaned by Git&#39;s garbage collector.&lt;br /&gt;&lt;br /&gt;During the course we have learnt how to use:&lt;br /&gt;&lt;br /&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;&lt;span style=&#34;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&#34;&gt;git commit --amend&lt;/span&gt; to make changes related to the most recent commit. Examples include writing a better commit message or removing a file that is not required. The same actions can be applied &amp;nbsp;to any past commit using a combination of &lt;span style=&#34;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&#34;&gt;git rebase -i&lt;/span&gt; and &lt;span style=&#34;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&#34;&gt;git commit --amend&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&#34;&gt;git cherry-pick&lt;/span&gt; to apply specific changes from one or more branches to a destination branch. This is useful when for instance a required feature was developed to an incorrect branch.&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&#34;&gt;git checkout&lt;/span&gt; combined with &lt;span style=&#34;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&#34;&gt;git stash&lt;/span&gt; to clean up a messed up repository.&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&#34;&gt;git rebase -i&lt;/span&gt; with the options s(quash) and p(ick) to group/restructure related commits and create a better/cleaner commit history.&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&#34;&gt;git bisect&lt;/span&gt; to go back to a good version of a branch. That&#39;s necessary after finding out (too late) that the current branch is broken but you are not sure when the bug that broke the code was introduced.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Overall, it was nice to see some concrete use cases of the commands because Git has so many features that it&#39;s not hard to get lost...&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Book review: Seven Databases in Seven Weeks</title>
      <link>https://sakisk.me/blog/2015-11-24-book-review-seven-databases-in-seven/</link>
      <pubDate>Tue, 24 Nov 2015 15:48:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2015-11-24-book-review-seven-databases-in-seven/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;div class=&#34;description markdown collapsible&#34; style=&#34;display: block;&#34;&gt;                &lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-2EpVD--5rCA/VlR2jm1W2II/AAAAAAAAAKY/L8DEgKZl4Dk/s1600/rwdata_xlargecover.jpg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;200&#34; src=&#34;http://3.bp.blogspot.com/-2EpVD--5rCA/VlR2jm1W2II/AAAAAAAAAKY/L8DEgKZl4Dk/s200/rwdata_xlargecover.jpg&#34; width=&#34;166&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;That&#39;s a really nice book. From the seven databases  that are covered I was familiar with PostgreSQL and only briefly with  Neo4j. So the book gave me the chance to explore some more databases and  find out about their strengths and weaknesses. In the following  paragraphs I&#39;ll explain what I found nice and what not so nice about  each of them. Before I start: if you are planning to buy this book, I  want to warn you that some features are deprecated or even removed,  because some of the database systems have evolved since the time the  book was written (2012). For example the largest part of the Neo4j  chapter is useless, because it doesn&#39;t use the Cypher language.&lt;br /&gt;&lt;br /&gt; &lt;em&gt;PostgreSQL rocks&lt;/em&gt;. It&#39;s a very powerful RDBMS and I  acknowledge that since I have used it professionally. Postgres is  mature, fast, and rock-solid. For those reasons I would choose it for  all problems that play nicely with relational DBs. And yes, an RDBMS is  not the answer to all problems. For example distributed computations do  not fit well into this model. Scaling is limited to making your single  DB server/cluster more powerful by upgrading/extending its hardware. And  not all problems require full ACID compliance and strict schema  enforcement.&lt;br /&gt;&lt;br /&gt; &lt;em&gt;Riak&lt;/em&gt; is flexible. Being able to interact with a DB using a REST interface and a tool like &lt;code&gt;curl&lt;/code&gt; should not be underestimated. What I like about Riak is that you can  store whatever resource (be it a document, an image, etc.) you like on  the fly and map it to your URL of preference. It just works! I see Riak  as a Web filesystem that supports distributed computations through  mapreduce. But Riak also supports connecting resources and traversing  between those connections (link walking). On the down side configuring,  and understanding some Riak concepts (for example conflict resolution  and adding indexes) is currently a pain. And you can only find prebuilt  binaries for your operating system (Windows is not supported at all) on basho.com.&lt;br /&gt;&lt;br /&gt; &lt;em&gt;HBase&lt;/em&gt; is unusual. It takes some time to understand the way a  column-oriented DB works. What I found great is that versioning is  builtin. If you care about data history that&#39;s a big deal. Another plus:  compression and fast lookups using bloom filters are also builtin.  Great features, that can save a lot of time of development. The  negatives: no REST interface, complex configuration, and no prebuilt  binaries -- you need to compile HBase on your own, so forget Windows  unless you like pain.&lt;br /&gt;&lt;br /&gt; &lt;em&gt;MongoDB&lt;/em&gt; is all about JavaScript. Having the full  support of a powerful language like Javascript while using a DB is very  valuable. Being able to save JSON documents adds a lot of flexibility  since they can nest arbitrary. But this flexibility comes with a cost:  updating a document means replacing it without a warning, deleting  specific elements of a document is not supported and debugging  JavaScript code is a pain. On the contrary: the mapreduce support of  Mongo is nice, and it also supports indexing documents. Configuring  replicas and sharding is also quite easy. And operating system support  is very good.&lt;br /&gt;&lt;br /&gt; &lt;em&gt;CouchDB&lt;/em&gt; is cute. The Futon Web interface makes CouchDB very user-friendly. Its REST interface and the ability to use &lt;code&gt;curl&lt;/code&gt; makes it developer-friendly. Moreover, CouchDB has an interesting  approach regarding replication, since all servers are treated equally  (no master-slave model). The same is true for conflict resolution: one  of the conflicting updates is automatically considered the winner, and  this is consistent through all nodes. But that&#39;s not necessarily the  &#34;correct&#34; update... One last thing: CouchDB is easy to install on all  popular platforms.&lt;br /&gt;&lt;br /&gt; &lt;em&gt;Neo4j&lt;/em&gt; is &lt;strong&gt;the&lt;/strong&gt; graph database. There are  simply no competitors when it comes to modelling relationships (think of  social networks, movies, food, drinks) using graphs. Neo4j has its own  query language (Cypher) and a very nice browser that makes experimenting  easy. The documentation is also extensive and interactive. Building a  cluster is easy. The negatives: learning curve (new concepts and new  language), the enterprise edition is not free (gratis).&lt;br /&gt;&lt;br /&gt; &lt;em&gt;Redis&lt;/em&gt; is generic. It&#39;s not a DB as such, but more an  in-memory data structure storage toolkit. Redis is simple to use, fast,  and supports transactions. Its commands have strange names though,  probably the result of an effort to avoid verbosity. Because it is very  generic, Redis can be used as a fast in-memory cache for applications  that require high performance.&lt;br /&gt;&lt;br /&gt; Final comments: Some people have proposed a better definition of the  name NoSQL: Not only SQL. I like this definition. Similar to programming  paradigms and languages, different database systems have both strengths  and weaknesses. Why not use more than one to achieve our goals? That&#39;s  the main idea behind the polyglot persistence concept, as suggested by  the authors. Polyglot persistence means using more than one databases to  target different application layers. For example Redis for caching,  Neo4j for modelling relationships, and PostgreSQL for persistence.&lt;br /&gt;              &lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Joy Of Coding 2015 Review</title>
      <link>https://sakisk.me/blog/2015-11-20-joy-of-coding-2015-review/</link>
      <pubDate>Fri, 20 Nov 2015 19:42:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2015-11-20-joy-of-coding-2015-review/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;Like &lt;a href=&#34;http://sakiskasampalis.blogspot.nl/2014/03/joy-of-coding-2014-my-impressions.html&#34;&gt;last year&lt;/a&gt;, Joy of Coding 2015 was a great conference. This year the conference took place during May, for once again in Rotterdam. The organisation was similar to that of last year: A few common talks, but also parallel talks and workshops.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The conference this year started with a keynote by Chris Granger (@ibdknox): &#34;Programming as distributed cognition: Defining a super power&#34;. I missed the beginning of the keynote but AFAIU Chris wanted to stress the importance of using programming as an exploration tool. In that sense, we should create programming tools that make it easier for scientists to model problems and experiment quickly. His tools&amp;nbsp;&lt;a href=&#34;http://lighttable.com/&#34;&gt;Light Table&lt;/a&gt;&amp;nbsp;and Eve focus on those aspects.&lt;/div&gt;&lt;div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;Next, I watched the presentation &#34;Joy of testing&#34; by John Hughes. The quote of this presentation was &#34;Do not write tests, generate them!&#34;. Indeed, using the Erlang version of QuickCheck, John showed a live demo of discovering and fixing bugs using generated tests. John also explained his personal experiences of using the same tools to discover and fix bugs that existed in concurrent Erlang production code (AFAIR the code was used in the automotive industry).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The next speaker was Laurent Bossavit (@Morendil). This keynote was more over psychology than technology. But it seems that there&#39;s a deep connection between the two. Laurent suffered by depression and according to him depression is a feature and not a bug. It is very important to be able to debug ourselves, and not just programs. We should stay away from things that make as sad and focus on the things that make us happy. As an example, you might be able to find a COBOL job that pays well, but does COBOL really make you happy? Maybe a job with a lower salary but more fun (think of python, arduino, etc.) is better for you.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The next keynote was about &#34;Mutation testing&#34; by Roy van Rijn. Roy believes that mutation testing, a technique for measuring the quality of unit tests, is better than code coverage. There&#39;s an actual Java tool that can be used to explore this area: &lt;a href=&#34;http://mutationtesting.org/&#34;&gt;Judy&lt;/a&gt;. A mutant is a version of a program with a modified operator. For example replacing logical AND with logical OR. Killing a mutant means that the incorrect behaviour of the modified code is detected properly and reported, and that&#39;s what basically Judy does. I&#39;ve never tried mutation testing. Maybe one day I will...&lt;br /&gt;&lt;br /&gt;I enjoyed the next talk by Crista Lopes (@cristalopes) a lot. Crista is the author of a really nice programming book that anyone who is involved with programming should read:&amp;nbsp;&lt;a href=&#34;http://www.amazon.com/Exercises-Programming-Style-Cristina-Videira/dp/1482227371/&#34;&gt;Exercises in Programming Style&lt;/a&gt;. The book uses a simple concept: Implement the same program using the &amp;nbsp;same language (Python) in 33 different styles! A style is basically a form of a programming paradigm (think of object-oriented, functional, procedural, etc.). During the talk Crista demonstrated a subset of the 33 styles of her book. The purpose of Crista&#39;s talk (and AFAIU that&#39;s also the focus point of the book) was not to compare the different styles and take sides, but to stress the importance of recognising and understanding the different styles. I can&#39;t agree more. There&#39;s no best programming style for all purposes, and we should be able to work with all of them. BTW there&#39;s a GitHub &lt;a href=&#34;https://github.com/crista/exercises-in-programming-style&#34;&gt;repository&lt;/a&gt; with the styles.&lt;br /&gt;&lt;br /&gt;The workshop that I picked for Joy of Coding 2015 was about &#34;Property based testing&#34;, by Marc Evers, Rob Westgeest, and Willem van den Ende. Property based testing is about the automatic generation of unit tests for a system by describing its properties. The benefit of using property based testing instead of unit testing is that it (a) takes less time since the tests are generated, (b) is more reliable than manual writing since humans tend to forget to cover all possible cases.&lt;br /&gt;During the workshop we used Javascript (NodeJs and JSVerify) and went through several examples.&lt;br /&gt;&lt;br /&gt;The closing keynote couldn&#39;t be better. A mix of jokes and programming advices by Kevlin Henney (@KevlinHenney), by checking nice (and not so nice) pieces of code written by various programmers in different languages. Studying code written by others is something that is important and we all need to do.&lt;br /&gt;&lt;br /&gt;Yet another good year for Joy of Coding. I hope that it will continue to use the same successful recipe in the years to come... :)&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Book review: Pragmatic Guide to JavaScript</title>
      <link>https://sakisk.me/blog/2015-11-09-book-review-pragmatic-guide-to/</link>
      <pubDate>Mon, 09 Nov 2015 12:23:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2015-11-09-book-review-pragmatic-guide-to/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;div class=&#34;description markdown collapsible&#34;&gt;                &lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-c6J5_vJHboc/VkB_haMGIvI/AAAAAAAAAKA/2Q5WiYw-ljk/s1600/41D%252BipxJ7tL._SX331_BO1%252C204%252C203%252C200_.jpg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;320&#34; src=&#34;http://2.bp.blogspot.com/-c6J5_vJHboc/VkB_haMGIvI/AAAAAAAAAKA/2Q5WiYw-ljk/s320/41D%252BipxJ7tL._SX331_BO1%252C204%252C203%252C200_.jpg&#34; width=&#34;213&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;This was my first JavaScript book and I consider it a  good overview covering the pros and cons of the language. The author  gives good advice regarding which features of pure JavaScript are fine  to use and for which features a framework should be preferred to avoid  browser incompatibilities.&lt;br /&gt;&lt;br /&gt; Many popular applications are demonstrated (custom tooltips, infinite  scrolling, form validation, autocompletion, lightbox, 3rd party APIs)  and concepts such as client vs server programming are clearly explained.  Christophe&#39;s &lt;a href=&#34;http://www.amazon.com/Pragmatic-Guide-JavaScript-Programmers/product-reviews/1934356670/ref=cm_cr_dp_see_all_summary?ie=UTF8&amp;amp;showViewpoints=1&amp;amp;sortBy=byRankDescending&#34;&gt;focus on Prototype&lt;/a&gt; is not a problem for me. It&#39;s his  favorite framework and the one that he knows well, so it make sense that  he&#39;s using it for the demos.&lt;br /&gt;&lt;br /&gt;One practical problem: this book is not maintained any more, and as a consequence a few examples are broken, due to a domain that has expired and changes to the Twitter API. I contacted the author on &lt;a href=&#34;https://github.com/tdd/pragmatic-javascript/issues/2&#34;&gt;GitHub &lt;/a&gt;and he confirmed it. But still, for a book that was published five years ago it&#39;s a nice compact guide to people who are familiar with programming and want to focus on the specifics of JavaScript.&lt;br /&gt;              &lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Playing with microcontrollers</title>
      <link>https://sakisk.me/blog/2015-03-15-playing-with-microcontrollers/</link>
      <pubDate>Sun, 15 Mar 2015 18:35:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2015-03-15-playing-with-microcontrollers/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;The last training course that I followed was about programming microcontrollers. The course was given by Leon van Snippenberg, who has very good expertise in microcontrollers.&lt;br /&gt;&lt;br /&gt;For the practical part of the course we used the Microchip dsPIC33F, a 16-bit architecture 40 MHZ microcontroller (system on a chip solution). I admit that I&#39;m not very fond of this proprietary platform, so I enjoyed the theoretical part of the course much more than the practical. I would be more excited if we have used an open hardware solution like arduino, Raspberry Pi, or something comparable.&lt;br /&gt;&lt;br /&gt;A few highlights from the course:&lt;br /&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;A three-operand assembly instruction does not necessarily mean that three registers are used. For example &lt;span style=&#34;font-family: Courier New, Courier, monospace;&#34;&gt;ADD W0, W1, W0&lt;/span&gt; uses only one register.&lt;/li&gt;&lt;li&gt;Most microcontrollers use the Harvard instead of the&amp;nbsp;&lt;span style=&#34;color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22px;&#34;&gt;Von Neumann&lt;/span&gt;&amp;nbsp;architecture. This means that there are two distinct address buses, as well as two data buses (instead of one address and one data bus).&lt;/li&gt;&lt;li&gt;When writing code in assembly we should avoid thinking about code optimisation, since the code is usually very fast to execute (but very slow to produce).&lt;/li&gt;&lt;li&gt;A common problem when programming microcontrollers is &lt;a href=&#34;http://www.piclist.com/techref/readmodwrite.htm&#34;&gt;read-modify-write&lt;/a&gt;. One way to solve it is using shadow registers.&lt;/li&gt;&lt;li&gt;When programming a microcontroller using a C interface and interrupts, it is very important to use the &lt;span style=&#34;font-family: Courier New, Courier, monospace;&#34;&gt;volatile&lt;/span&gt; keyword to disable optimisations that might remove code that seems to be dead but is actually used. Because of that, it is also very important to test the code with all compiler optimisation levels enabled, to ensure that it doesn&#39;t break.&lt;/li&gt;&lt;li&gt;The hardware timers of a platform do not need to follow the same architecture with the processor. For example a platform might use a 16-bit processor with 32-bit timers.&lt;/li&gt;&lt;li&gt;Buffers and interrupts are used to solve communication problems between different devices (e.g. a computer communicating with a microcontroller using the serial port).&lt;/li&gt;&lt;li&gt;When dealing with non-deterministic problems, disabling interrupts is the most favoured solution.&lt;/li&gt;&lt;li&gt;Using a real-time operating system (RTOS) simplifies programming, because we avoid the need to write complex state machines and custom schedulers (those problems are already solved in the RTOS).&lt;/li&gt;&lt;li&gt;Multicore support in RTOS is a challenge (unsolved problem?).&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;We (me and my colleague) challenged Leon by questioning why would one prefer a much more expensive solution like the dsPIC* family of Microchip instead of Raspberry Pi or arduino. The price of the latest Pi is unbeatable. The response was that we should use whatever fits our purpose, and that the Pi manages to achieve such a low price because its makers can estimate in advance the minimum numbers of units that will be sold. Those manufacturing deals are critical in forming the end price of a prototyping platform.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;So far I only own an mbed LPC1768 and I&#39;m very satisfied with it. I hope that I&#39;ll build some more advanced prototypes in the future, but you have to start from something. I began with flashing LEDs&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;889&#34; mozallowfullscreen=&#34;&#34; src=&#34;https://player.vimeo.com/video/120307094&#34; webkitallowfullscreen=&#34;&#34; width=&#34;500&#34;&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Continued with adding some basic components like a button&lt;br /&gt;&lt;br /&gt;&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;889&#34; mozallowfullscreen=&#34;&#34; src=&#34;https://player.vimeo.com/video/120957456&#34; webkitallowfullscreen=&#34;&#34; width=&#34;500&#34;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;br /&gt;And at some point I built my first practical prototype: a darkness-activated LED&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;889&#34; mozallowfullscreen=&#34;&#34; src=&#34;https://player.vimeo.com/video/120970019&#34; webkitallowfullscreen=&#34;&#34; width=&#34;500&#34;&gt;&lt;/iframe&gt; &lt;br /&gt;Isn&#39;t that nice? In my future posts the plan is to spend more time on explaining the code of prototypes like the last one. For now you can check my &lt;a href=&#34;http://developer.mbed.org/users/faif/&#34;&gt;mbed repository&lt;/a&gt; page.&lt;/div&gt;</description>
    </item>
    <item>
      <title>On writing a book</title>
      <link>https://sakisk.me/blog/2015-02-02-on-writing-book/</link>
      <pubDate>Mon, 02 Feb 2015 20:08:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2015-02-02-on-writing-book/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;After &lt;a href=&#34;http://sakiskasampalis.blogspot.nl/2013/11/my-first-book-review.html&#34;&gt;reviewing&lt;/a&gt; &lt;a href=&#34;http://sakiskasampalis.blogspot.nl/2014/05/being-technical-reviewer-again.html&#34;&gt;two&lt;/a&gt; books about Python, people from Packt asked me if I was willing to write a Python book. I&#39;m glad to see that my first book, &lt;a href=&#34;https://www.packtpub.com/application-development/mastering-python-design-patterns&#34;&gt;Mastering Python Design Patterns&lt;/a&gt; is published!&lt;br /&gt;&lt;br /&gt;As I expected, writing a book is much tougher than reviewing one. Especially if you have a full-time job, like in my case. I had to deliver a chapter about every week. This is very challenging, since it means that I had to spend many evenings and weekends focusing on delivering a chapter on time.&lt;br /&gt;&lt;br /&gt;I hope that my book will be appreciated by the Python (3.x) community. I tried to focus on doing things the Python way instead of reproducing Java-ish or C++-style solutions. To be honest I preferred a different title: I recommended the title &#34;Idiomatic Python Design Patterns&#34; but my proposal was rejected, mainly for marketing reasons.&lt;br /&gt;&lt;br /&gt;If you are also considering writing a book, I think that it is a very good idea, but take into account the following:&lt;br /&gt;&lt;br /&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;Do you have the time to do it? Unless your book is self-published, you&#39;ll need to sign a contract with a publisher and that means that there will be deadlines. Make sure that you discuss it first with your partner/family, since it is a demanding task.&lt;/li&gt;&lt;li&gt;Does it fill a missing gap? I don&#39;t recommend you to write a book just for the money (yes, you are paid for writing the book and depending on the contract you can also get a share from the sales). I have seen many examples of poorly-written books that were created only because the author wanted to make some money. Don&#39;t do it. It might be good for you pocket, but it can harm your reputation, your career, and your psychology (think of bad reviews).&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;To expand a little bit more on point two: I feel that my book is indeed filling a gap. Although there are other books about Design Patterns in Python, none of them focuses on Python 3. In fact, I reviewed one of them, and apart from targeting only Python 2.x, IMHO it is not using idiomatic Python solutions in many cases.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;My book is not perfect in any way. The lack of time meant that some examples had to be smaller and more trivial than expected. But this is part of the game. If you are working full-time and you are writing a book, time is your enemy! Be prepared to make compromises...&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Course review: SQL Performance</title>
      <link>https://sakisk.me/blog/2015-01-14-course-review-sql-performance/</link>
      <pubDate>Wed, 14 Jan 2015 21:30:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2015-01-14-course-review-sql-performance/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;b&gt;Update:&lt;/b&gt; Markus was kind enough to comment on my review. Regarding the &#34;minimise the number of tables to limit joins&#34; he said:&lt;br /&gt;&lt;blockquote class=&#34;tr_bq&#34;&gt;&lt;span style=&#34;font-family: Helvetica; font-size: 12px;&#34;&gt;it is often the best approach to store some attribute redundant (e.g.&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;font-family: Helvetica;&#34;&gt;&lt;span style=&#34;font-size: 12px;&#34;&gt;normalised&amp;nbsp;as before plus wherever needed). Maintenance of this&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;font-family: Helvetica; font-size: 12px;&#34;&gt;redundancy should be delegated to the database whenever possible (e.g.&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;font-family: Helvetica;&#34;&gt;&lt;span style=&#34;font-size: 12px;&#34;&gt;using triggers or&amp;nbsp;materialised&amp;nbsp;view). You should not do that before&amp;nbsp;having those performance problems (avoid &#34;premature&amp;nbsp;optimisation&#34;).&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;font-family: Helvetica; font-size: 12px;&#34;&gt;Reducing the number of joins is a good way to get performance. But only once you are in that situation. And of course, there are other, simpler ways to improve performance that should be leveraged first (e.g, good-old indexing).&lt;/span&gt;&lt;/blockquote&gt;So I&#39;m glad that we agree that normalisation is a good thing and that we should only try to find alternative solutions if nothing else (e.g. proper indexing) works.&lt;br /&gt;&lt;br /&gt;Markus also made an important comment about the column order in the WHERE clause that is not clarified in my original post:&lt;br /&gt;&lt;blockquote class=&#34;tr_bq&#34;&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;&lt;span style=&#34;font-family: Helvetica; font-size: 12px;&#34;&gt;The column order in indexes matters a lot&lt;/span&gt;&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;blockquote class=&#34;tr_bq&#34;&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;&lt;span style=&#34;font-family: Helvetica; font-size: 12px;&#34;&gt;The column order in the WHERE clause doesn&#39;t matter (rare exceptions exist, but generally, it doesn&#39;t!).&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;br /&gt;&lt;br /&gt;The original post starts here...&lt;br /&gt;&lt;br /&gt;Last &lt;strike&gt;October&lt;/strike&gt;&amp;nbsp;November I followed a course related to the performance of SQL. The course was given by &lt;a href=&#34;http://use-the-index-luke.com/&#34;&gt;Markus Winand&lt;/a&gt;. Although we don&#39;t agree on everything (for example I don&#39;t like the &#34;create as few tables as possible to minimise joins and achieve better performance&#34; principle because it is against normalisation) Markus has a great knowledge of general and RDBMS-specific performance related issues.&lt;br /&gt;&lt;br /&gt;I&#39;m glad that I followed this course. Markus gave us a copy of &lt;a href=&#34;http://sql-performance-explained.com/?utm_source=UTIL&amp;amp;utm_medium=main&amp;amp;utm_campaign=second&#34;&gt;his book&lt;/a&gt; which is very compact and to the point. This is an example of a book that I would never consider reading but it turns out to be a hidden gem. I recommend it to everyone working with relational databases.&lt;br /&gt;&lt;br /&gt;It took me some time to write this post because I wanted to read the book first. In this book you will find things that you don&#39;t know for sure. For example, did you know that:&lt;br /&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;When building indexes on more than one columns (concatenated indexes), the order of the columns matters a lot?&lt;/li&gt;&lt;li&gt;The order of the statements in the &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;WHERE&lt;/span&gt; part of a query affects whether a concatenated index is used or not?&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;LIKE&lt;/span&gt; expressions with leading wildcards (eg. &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;&#39;%SQL&#39;&lt;/span&gt;) cannot make use of an index?&lt;/li&gt;&lt;li&gt;ORMs can cause big performance problems because of the bad queries that they generate?&lt;/li&gt;&lt;li&gt;Selecting only the necessary columns (avoid &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;SELECT *&lt;/span&gt;) can improve the performance of joins?&lt;/li&gt;&lt;li&gt;An index that covers all the columns of an SQL query (including the columns of the &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;SELECT&lt;/span&gt; part) does not need to access any other data structures except the index and improves the performance of a query enormously?&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;ORDER BY&lt;/span&gt; and &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;GROUP BY&lt;/span&gt; can also be indexed?&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;The main message of the book is that indexes should be built by us, the developers, not by DBAs or anyone else. That&#39;s because only we know how the data are queried, and therefore only we can build the proper indexes.&lt;br /&gt;&lt;br /&gt;Personally, I&#39;m very sad to see how many features that are supported by other RDBMS are not supported by MySQL. To mention a few: indexing functions and expressions, partial indexes, indexing using &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;ASC&lt;/span&gt; and &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;DESC&lt;/span&gt;, window functions. Fortunately, MariaDB is getting there and I hope that we&#39;ll switch to it (at work) at some point.&lt;/div&gt;</description>
    </item>
    <item>
      <title>Course review: Language Engineering with MPS</title>
      <link>https://sakisk.me/blog/2014-11-16-course-review-language-engineering-with/</link>
      <pubDate>Sun, 16 Nov 2014 20:00:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2014-11-16-course-review-language-engineering-with/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;Last week I followed a two-day course called &#34;Language Engineering with MPS&#34;. The course was given by &lt;a href=&#34;http://voelter.de/&#34;&gt;Markus Voelter&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;a href=&#34;https://www.jetbrains.com/mps/&#34;&gt;MPS&lt;/a&gt; is a free software (using the Apache 2.0 license) framework built on top of Intellij IDEA. Both MPS and Intellij IDEA are actively developed by JetBrains. MPS can be used for implementing Domain-Specific Languages (DSLs), usually by extending a base language which by default is Java. Extending Java is not a requirement. In fact, Markus is involved in the development of &lt;a href=&#34;http://mbeddr.com/&#34;&gt;mbeddr,&lt;/a&gt; which uses a clean version of the C language as the base for targeting embedded system development.&lt;br /&gt;&lt;br /&gt;According to Markus textual-based language development tools such as Yacc, lex, Bison, ANTLR, and so forth are fading out because they lack support of an intelligent IDE. Although I&#39;m not fully convinced about this statement I agree that IDE support when developing DSLs is a big plus. Do not overlook IDE support. It gives you (for free) autocompletion, a nice user interface, very readable error messages, instant deployment and debugging, and much more.&lt;br /&gt;&lt;br /&gt;During the course we covered only external (context-free) DSLs,  because Markus considers internal (context-sensitive) DSLs hacky, since  they usually rely on the metaprogramming features of a specific language  (Ruby, Lisp, etc.). This is most times either very limited or too  complex (for example you end up with unreadable error messages).&lt;br /&gt;&lt;br /&gt;Markus has a good knowledge in language design. He gave us some good tips regarding DSL development, such as forbidding Turing-completeness in the DSL to make the static analysis of a code block possible. Another tip was to support many keywords in the DSL (instead of having as few keywords as possible, which is considered good in general purpose languages like C) for giving the chance to the DSL user to provide hints  about the performance and behavior of a code block. For example provide two keywords  for &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;for&lt;/span&gt; loops: the default &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;for&lt;/span&gt; is (or actually tries to be) concurrent, while the alternative &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;forseq&lt;/span&gt; is always sequential.&lt;br /&gt;&lt;br /&gt;Our main course activity was to use MPS for developing an Entities DSL. An Entity is an abstraction that can have a variable number of attributes with validated types. We created our own typing system for that (using Java&#39;s typing system as a basis), which supports strings and numbers. An Entity can also have references to other Entities. Finally, we can define functions inside an Entity using the &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;fun&lt;/span&gt; keyword. Here&#39;s an example of an Entity:&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-ok0xc7r19Lo/VGjorqzg9gI/AAAAAAAAAIw/A1SfNoafxD4/s1600/entity.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://2.bp.blogspot.com/-ok0xc7r19Lo/VGjorqzg9gI/AAAAAAAAAIw/A1SfNoafxD4/s1600/entity.png&#34; height=&#34;167&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-EnvUEcH9CXI/VGjnMD73AkI/AAAAAAAAAIk/w_NgdkPACPs/s1600/entity.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;br /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Notice how we can create custom error messages for informing the DSL users when they are trying to do erroneous things such as define a variable with the same name twice. Another error reported (underlined in red on the picture) is when the user tries to return an incorrect type from a function, in this case a string from a function that should return an integer (notice the &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;:number&lt;/span&gt; part).&lt;br /&gt;&lt;br /&gt;From what I&#39;ve seen in the course I feel that MPS is an interesting tool with the following pros and cons.&lt;br /&gt;&lt;br /&gt;Pros:&lt;br /&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;Autocompletion.&lt;/li&gt;&lt;li&gt;Readable error messages. Even if a message is not very readable you can jump to the source code immediately using a single click.&lt;/li&gt;&lt;li&gt;Nice user interface.&lt;/li&gt;&lt;li&gt;In general it offers all the goodies of an IDE. Integrated debugging, many ways of searching, refactoring, and so forth. &lt;/li&gt;&lt;/ul&gt;Cons:&lt;br /&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;The DSL user (domain expert) needs to install MPS for using our DSL. This usually requires some effort, because we need to create a customized (clean) version of MPS with all development features hidden/disabled to avoid confusing the user.&lt;/li&gt;&lt;li&gt;Like all tools, MPS requires time and effort to feel confident with it. Especially typing in the MPS editor can be confusing and frustrating because it is very different from free-text typing which is the usual way of writing code.&lt;/li&gt;&lt;li&gt;Documentation. There is only one book targeting explicitly MPS so far.&lt;/li&gt;&lt;li&gt;Lag on Windows. The hired laptops that we used during the course were quite powerful but MPS was still lagging on Windows. I have tested it on GNU/Linux and I don&#39;t have any issues (and neither did Markus on his MacBook). It seems that MPS has performance issues on Windows.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Two less common tricks for improving unexplained slow MySQL queries</title>
      <link>https://sakisk.me/blog/2014-11-08-two-less-common-tricks-for-improving/</link>
      <pubDate>Sat, 08 Nov 2014 22:26:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2014-11-08-two-less-common-tricks-for-improving/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;Recently I faced an SQL performance issue. What I wanted to do was rather common: Apply the (set) difference operation on two tables.&lt;br /&gt;&lt;br /&gt;In relational algebra, the difference operation applied on two tables &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;A&lt;/span&gt; and &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;B&lt;/span&gt; gives as a result a new table &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;C&lt;/span&gt; that contains all the elements that are in table &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;A&lt;/span&gt; but &lt;b&gt;aren&#39;t&lt;/b&gt; in table &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;B&lt;/span&gt;.&lt;br /&gt;&lt;br /&gt;That&#39;s a very common operation. A common example is having the table &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;Students&lt;/span&gt; and the table &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;Grades&lt;/span&gt;. To find all Students that have not been graded yet you can use the difference operation. Or in terms of set theory and using &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;\&lt;/span&gt; as the notation of difference:&lt;br /&gt;&lt;br /&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;{1,2,3}&amp;nbsp;âˆ–&amp;nbsp;{2,3,4} = {1}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Some RDBMS have the difference operation built-in using the &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;EXCEPT&lt;/span&gt; keyword. So the query in this case would be something like:&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/faif/bee76fa49c0885d7b2dc.js?file=except.sql&#34;&gt;&lt;/script&gt; &lt;br /&gt;But that&#39;s not the case for MySQL. MySQL does not support &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;EXCEPT&lt;/span&gt; but we can get the same result using a &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;LEFT (OUTER) JOIN&lt;/span&gt;: &lt;/div&gt;&lt;script src=&#34;https://gist.github.com/faif/bee76fa49c0885d7b2dc.js?file=left-join.sql&#34;&gt;&lt;/script&gt;&lt;/div&gt;OK, so I used a &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;LEFT JOIN&lt;/span&gt; to find out that the query was painfully slow. One table had 700 thousand records and the other 130 thousand records. For a relational database that&#39;s not a big deal (only a few seconds, let&#39;s say maximum 3).&lt;br /&gt;&lt;br /&gt;If you search on the Web for slow &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;LEFT JOIN&lt;/span&gt; query you&#39;ll see that everyone recommends (a) adding indexes and (b) using the SQL optimizer. Well, I had already done both things without achieving my goal. I added the indexes using &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;CREATE INDEX&lt;/span&gt; and then used the optimizer by adding &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;EXPLAIN&lt;/span&gt; in front of my query and made sure that the indexes were used properly.&lt;br /&gt;&lt;br /&gt;So, what&#39;s left? Actually there are two other important things to check. The first is to inspect the output of &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;SHOW PROCESSLIST&lt;/span&gt;. This will show you the list of active processes on the server. When writing queries killing the SQL client because it crashed/became unresponsive due to a bad query is not unusual. But killing the client does not necessarily mean that the query is killed. There might still be orphan queries that eat the resources of your server but you have no control of them. You can kill them using &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;KILL PROCESS_ID&lt;/span&gt; (replace PROCESS_ID with the actual ID of the orphan process).&lt;br /&gt;&lt;br /&gt;The second thing that really impacts the performance of MySQL is when trying to join tables that use different collations. MySQL uses by default the legacy latin1_swedish_ci collation, so if one of the tables you are trying to join is using a different collation (for example utf8_unicode_ci, which makes much more sense as a default nowadays) the joins become terribly slow. Just make sure that all database tables use the same collation.&lt;br /&gt;&lt;br /&gt;Happy querying!&lt;/div&gt;</description>
    </item>
    <item>
      <title>Book review: SQL Antipatterns</title>
      <link>https://sakisk.me/blog/2014-09-29-book-review-sql-antipatterns/</link>
      <pubDate>Mon, 29 Sep 2014 15:52:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2014-09-29-book-review-sql-antipatterns/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;div class=&#34;description markdown collapsible&#34;&gt;                In &lt;a href=&#34;https://pragprog.com/book/bksqla/sql-antipatterns&#34;&gt;SQL Antipatterns&lt;/a&gt;, Bill Karwin does a great job in explaining how to  make efficient use of the relational model, instead of abusing it like  it&#39;s usually done. Many developers abuse relational databases using  antipatterns such as ID required, entity-attribute-value, index  overkill, and so forth (you should read this book without second  thought). Some developers go as far as trying to implement a search  engine based on the &lt;code&gt;LIKE&lt;/code&gt; keyword.&lt;br /&gt;&lt;br /&gt; All those are examples of not using the relational model properly. If  we want to bypass referential integrity or save everything in one  table, then we should not use a relational DB in the first place.  Cursing on the performance of a relational DB when it&#39;s not properly  used is very wrong.&lt;br /&gt;              &lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Being a technical reviewer (again)</title>
      <link>https://sakisk.me/blog/2014-05-04-being-technical-reviewer-again/</link>
      <pubDate>Sun, 04 May 2014 12:53:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2014-05-04-being-technical-reviewer-again/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;A few months ago I experienced (for the first time) how it feels to be part of a technical reviewing team. I reviewed a packt introductory &lt;a href=&#34;http://sakiskasampalis.blogspot.nl/2013/11/my-first-book-review.html&#34;&gt;book&lt;/a&gt; about Design Patterns.&lt;br /&gt;&lt;br /&gt;Today I&#39;m glad to see that another packt book, of which I was for once again one of the technical reviewers, has been published. The book is called &lt;a href=&#34;http://www.packtpub.com/mastering-object-oriented-python/book&#34;&gt;Mastering Object-oriented Python&lt;/a&gt;. It&#39;s a book that focuses on writing OOP code in Python 3.&lt;br /&gt;&lt;br /&gt;I would recommend this book to all Python programmers, both beginners and advanced. It covers all aspects of the language (to mention a few: special methods, unit testing, decorators, serialization, etc.) and shows different possible designs, explaining the pros and cons of each design. What I really like is that the code in the book is written in a Pythonic style, and the author makes a good job at explaining how Python differs from Java/C++.&lt;br /&gt;&lt;br /&gt;A few warnings: This is a big book (~ 600 pages). You can read the whole thing, but I believe that it will be much more useful as a handbook. Also note that the book assumes familiarity with Python 3 and Design Patterns.&lt;br /&gt;&lt;br /&gt;You might wonder why I accepted to do again a technical review. Some people find technical reviewing a waste of time. But I disagree. To become a good programmer, you need to read a lot of code instead of just writing. In fact, programmers tend to read much more existing code than write new code. If reading code is important, reading good code is much more important. And I believe that the code in this book is well written.&lt;/div&gt;</description>
    </item>
    <item>
      <title>BASH: syntax error near unexpected token `(&#39;</title>
      <link>https://sakisk.me/blog/2014-04-19-bash-syntax-error-near-unexpected-token/</link>
      <pubDate>Sat, 19 Apr 2014 16:13:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2014-04-19-bash-syntax-error-near-unexpected-token/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;After making some portability and readability improvements to &lt;a href=&#34;https://github.com/faif/shell-utils&#34;&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;shell-utils&lt;/span&gt;&lt;/a&gt;, I used BASH, sh, and dash to test it. While sh and dash were fine, BASH returned the error:&lt;br /&gt;&lt;br /&gt;&lt;b&gt;line 358: syntax error near unexpected token `(&#39;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;line 358: `ls ()&#39;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;That is strange. BASH usually introduces shell portability issues because of the extra features it provides, so I would expect to have a problem with the other shells.&lt;br /&gt;&lt;br /&gt;It turns out that BASH did a pretty good job with reporting the source of the error. Note that &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;shell-utils&lt;/span&gt; redefines a few everyday commands as functions, to make them more verbose and &lt;strike&gt;secure&lt;/strike&gt; safe (eg. &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;ls&lt;/span&gt; becomes &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;ls --color=auto&lt;/span&gt;, &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;rm&lt;/span&gt; becomes &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;rm -i&lt;/span&gt;, etc.). But usually those everyday commands are already defined as aliases in .bashrc. Aliases are evaluated before functions, and defining a function that has the same name as an alias is not allowed. And that&#39;s what BASH is trying to tell me in the error message. Commenting all aliases in .bashrc fixed the issue :)&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Joy of Coding 2014 - My impressions</title>
      <link>https://sakisk.me/blog/2014-03-08-joy-of-coding-2014-my-impressions/</link>
      <pubDate>Sat, 08 Mar 2014 15:49:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2014-03-08-joy-of-coding-2014-my-impressions/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;I haven&#39;t been to a conference for years, but this year I decided to join &lt;a href=&#34;http://joyofcoding.org/&#34;&gt;Joy of Coding&lt;/a&gt;. And I don&#39;t regret it!&lt;br /&gt;&lt;br /&gt;The conference started with a keynote by Dan North: &#34;Accelerating Agile: hyper-performing       without the hype&#34;. Dan described what he learnt about Agile while working in the trading domain. The most interesting advice that I kept from his presentation is that being a good programmer is not enough: What really makes a difference is to become a domain expert. For example, if you are working as a stock market programmer, your superior programming skills don&#39;t matter if you have no clue about what the numbers mean.&lt;br /&gt;&lt;br /&gt;Next, I joined the &#34;Let Me Graph That For You: An Introduction to Neo4j&#34; workshop, by Ian Robinson. The first part of the workshop was an introduction to Graph Databases and Neo4j. At the second part we used Neo4j and its query language Cypher to create a few graphs and query them. I am impressed by how easy is to get started with Neo4j. I find its web interface very intuitive. We had a few questions for Ian (S = Sakis, I = Ian, O = Other conference participant):&lt;br /&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;S: Is there any relation between Neo4j and RDF?&lt;/li&gt;&lt;li&gt;I: Not really. In RDF you typically end up with more connections because everything is modelled as a triple. But there are libraries that can extract a Neo4j graph as RDF.&lt;/li&gt;&lt;li&gt;S: Are all the common graph algorithms (eg. SPF, BFS, Bellman-Ford, etc.) available?&lt;/li&gt;&lt;li&gt;I: Most of the well-known graph algorithms are available, and furthermore there is a Java API that is exposed and can be extended with your own algorithms.&lt;/li&gt;&lt;li&gt;S: Is Cypher case-sensitive?&lt;/li&gt;&lt;li&gt;I: Partly. The identifiers of a query are case-sensitive, but the rest parts of the query aren&#39;t.&lt;/li&gt;&lt;li&gt;O: Are there any cases where RDBMS should still be used instead of Graph Databases?&lt;/li&gt;&lt;li&gt;I: If you have tabular data and you want to focus on set theory operations (eg. union, intersection, etc.) an RDBMS is preferable.&lt;/li&gt;&lt;/ul&gt;&amp;nbsp;I&#39;ll definitely look more into Graph Databases and Neo4j.&lt;br /&gt;&lt;br /&gt;The next keynote was &#34;Contravariance is the Dual of Covariance&#34;, by Erik Meijer. I&#39;m not very familiar with Reactive Programming and Rx, thus I couldn&#39;t follow everything. But at least I enjoyed the jokes and the funny examples that Erik used. Using Scala as a reference, he explained the meanings of covariance and contra-variance, and showed how they can be used to create reusable code.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;The second workshop that I joined was &#34;An Introduction to Actors and Concurrency&#34;, by Michel Rijnders and Matthijs Ooms. The first part of the workshop was basically an introduction to Erlang, thus nothing special if you are familiar with Prolog. The fun started at the second part, where we experienced how straightforward is to communicate asynchronously through the network using Erlang&#39;s actor model and message-passing primitives.&lt;br /&gt;&lt;br /&gt;Last but not least was the keynote &#34;The Tao, of the Joy, of Coding&#34;, by Dick Wall. This was by far the most inspiring keynote. Dick, using ancient Chinese philosophy as a reference, talked about many interesting topics, including programming honesty (saying &#34;I don&#39;t understand this&#34; and learning from your colleagues is a good thing), looking back as a programmer (eg. if you used your programming skills to find a cure for a disease you really changed the world), and getting a life (being proud about working until 2 AM is a very bad mentality).&lt;br /&gt;&lt;br /&gt;All in all, a great conference that I will keep in my agenda every year!&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>My first book review</title>
      <link>https://sakisk.me/blog/2013-11-28-my-first-book-review/</link>
      <pubDate>Thu, 28 Nov 2013 21:52:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2013-11-28-my-first-book-review/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;During the last month(s) I participated in the review process of a book about Design Patterns in Python. I am happy to see that the book has been released. The title of it is &lt;a href=&#34;http://www.packtpub.com/learning-python-design-patterns/book&#34;&gt;Learning Python Design Patterns&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Reviewing a book is definitely not harder than writing one, but that doesn&#39;t mean that it&#39;s not challenging. The comments must be clear in context, useful, and not offensive. The process requires a considerable amount of time since all comments/remarks/notes must be backed by research and reliable references.&lt;br /&gt;&lt;br /&gt;Nevertheless, I enjoyed the whole procedure which thanks to the people of packt publishing (packtpub) was flexible and clear. Plus, I&#39;ll receive a free hard-copy of the book that I reviewed and a copy of my favourite packtpub ebook. Not bad!&lt;br /&gt;&lt;br /&gt;In the future I hope that I&#39;ll have the chance (and the time) to write my own book about a topic that I like.&lt;/div&gt;</description>
    </item>
    <item>
      <title>mbed USB voltmeter</title>
      <link>https://sakisk.me/blog/2013-07-28-mbed-usb-voltmeter/</link>
      <pubDate>Sun, 28 Jul 2013 20:52:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2013-07-28-mbed-usb-voltmeter/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;USB communication with mbed is easy. That&#39;s because USB is the default protocol used to transfer programs from a computer to an mbed.&lt;br /&gt;&lt;br /&gt;In this prototype I measure the analog value of a pot, I convert it to  voltage, and finally I use USB to print it on my computer&#39;s  screen. That&#39;s a simplistic voltage meter! Here&#39;s the schematic:&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-zjXcdWLTPi8/UfVJyejZJTI/AAAAAAAAAG4/g1aEkW9UG1w/s1600/voltmeter-schematic.jpg&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;207&#34; src=&#34;https://images-blogger-opensocial.googleusercontent.com/gadgets/proxy?url=http%3A%2F%2F4.bp.blogspot.com%2F-zjXcdWLTPi8%2FUfVJyejZJTI%2FAAAAAAAAAG4%2Fg1aEkW9UG1w%2Fs1600%2Fvoltmeter-schematic.jpg&amp;amp;container=blogger&amp;amp;gadget=a&amp;amp;rewriteMime=image%2F*&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;USB voltage meter schematic. Image courtesy of Bert Van Dam&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-PDXtSfs8K2E/UfQjbnRkuyI/AAAAAAAAAGo/L5tAUyAeiWo/s1600/usb-voltmeter.jpg&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;br /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;And a picture of the actual circuit:&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-PDXtSfs8K2E/UfQjbnRkuyI/AAAAAAAAAGo/L5tAUyAeiWo/s1600/usb-voltmeter.jpg&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;640&#34; src=&#34;https://images-blogger-opensocial.googleusercontent.com/gadgets/proxy?url=http%3A%2F%2F4.bp.blogspot.com%2F-PDXtSfs8K2E%2FUfQjbnRkuyI%2FAAAAAAAAAGo%2FL5tAUyAeiWo%2Fs1600%2Fusb-voltmeter.jpg&amp;amp;container=blogger&amp;amp;gadget=a&amp;amp;rewriteMime=image%2F*&#34; width=&#34;480&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;USB voltage meter circuit&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;Note that the pot is used just for testing purposes. It can actually be replaced by any other part. Just make sure that you&#39;re not trying to measure voltage &amp;gt; 3.3 volts, or your mbed is in danger!&lt;/div&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;The code &lt;/h3&gt;&lt;div style=&#34;text-align: left;&#34;&gt;First the header file. It defines the USB connection, the analog input pin used to read the pot&#39;s value, a few constants, and a function that will be used for converting the pot&#39;s value from [0 - 1] to the voltage [0 - 3.3] volts.&lt;/div&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/faif/6099348.js?file=voltmeter.h&#34;&gt;&lt;/script&gt;&lt;br /&gt;And the source file. It contains the body of the conversion function, two terminal control commands for clearing the screen and moving to the top, and the commands for reading the pot&#39;s value and printing it (together with its voltage) to the terminal through the USB port.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/faif/6099348.js?file=voltmeter.cpp&#34;&gt;&lt;/script&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Demo&lt;/h3&gt;&lt;div style=&#34;text-align: left;&#34;&gt;I&#39;m on a GNU/Linux system, where the mbed is identified as &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;/dev/ttyACM0&lt;/span&gt;. A simple tool to use for connecting with it is &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;screen&lt;/span&gt; (eg. &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;sudo screen /dev/ttyACM0&lt;/span&gt;). Pardon me for the bad quality of the video, it&#39;s the first time that I used YouTube capture with my phone and it didn&#39;t work as well as I expected :)&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;315&#34; src=&#34;//www.youtube-nocookie.com/embed/Z-bx2zrV7SE?rel=0&#34; width=&#34;560&#34;&gt;&lt;/iframe&gt; &lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;&amp;nbsp;&lt;/h3&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Acknowledgements&lt;/h3&gt;&lt;div style=&#34;text-align: left;&#34;&gt;Special thanks to my good friend and Arduino hacker &lt;a href=&#34;http://efxa.org/&#34;&gt;efxa&lt;/a&gt;, for without his parts it wouldn&#39;t be possible to play with mbed.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;References &lt;/h3&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;&lt;i&gt;Bert Van Dam.&lt;/i&gt; &lt;a href=&#34;http://www.elektor.com/products/books/microcontrollers/arm-microcontrollers-1-%28uk%29.1625568.lynkx&#34;&gt;ARM Microcontrollers part 1 &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;mbed handbook. &lt;/i&gt;&lt;a href=&#34;https://mbed.org/handbook/SerialPC&#34;&gt;Serial Communication with a PC&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Numerical string sorting in Ruby</title>
      <link>https://sakisk.me/blog/2013-06-15-numeric-string-sorting-in-ruby/</link>
      <pubDate>Sat, 15 Jun 2013 03:43:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2013-06-15-numeric-string-sorting-in-ruby/</guid>
      <description>The problem: You have an unsorted array of strings (product codes, area codes, etc.) containing both letters and numbers (for example &#39;A28&#39;, &#39;A3&#39;, &#39;A1&#39;, etc.) and you want to sort them numerically (that is, &#39;A1&#39;, &#39;A2&#39;, ..., &#39;An&#39;). Ruby offers a &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;sort&lt;/span&gt; method, so let&#39;s see what it does...&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/faif/5786178.js?file=sort.rb&#34;&gt;&lt;/script&gt; Nope, that&#39;s not what I want. But no worries, &lt;a href=&#34;http://ruby-doc.org/core-1.8.6/Enumerable.html&#34;&gt;enumerable&lt;/a&gt; is here to help me. Enumerable is a great mixin inspired by functional programming. Functional programming relies heavily on data transformations: The input is a data structure, we transform the data of the structure by applying one or more functions, and the output is a new data structure. In this particular example the input is an unsorted array of strings, I want to apply a function that will change their order, and the output will be a new array with the strings sorted numerically.&lt;br /&gt;&lt;br /&gt;What is the data transformation in this case? A string is a data structure that can be treated as an array in most programming languages, and ruby is not an exception. Therefore the problem can be solved by using as a sorting key the numeric part of a string and treating that key as a number.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/faif/5786178.js?file=sort_by.rb&#34;&gt;&lt;/script&gt; And we are done :)</description>
    </item>
    <item>
      <title>Why you should try Emacs if you are a Bash user</title>
      <link>https://sakisk.me/blog/2013-03-23-why-you-should-try-emacs-if-you-are/</link>
      <pubDate>Sat, 23 Mar 2013 19:40:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2013-03-23-why-you-should-try-emacs-if-you-are/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;Are you a GNU Bash user but you are not using Emacs? Perhaps you should consider trying it. You will be amazed by the similarities...&lt;br /&gt;&lt;br /&gt;I know, your IDE (Eclipse, QT, etc.) is superior and you are extremely productive with it. Why bother using an ancient editor like Emacs? I will not begin another flamewar by comparing popular IDEs with Emacs. Choose whatever you prefer during programming. But if you want to be productive while using a UNIX-like system, Emacs (and of course Vim but I can&#39;t speak for Vim since I&#39;m an Emacs user) can really help you.&lt;br /&gt;&lt;br /&gt;The truth is that if you are already productive in Bash (mandatory reading: &lt;a href=&#34;http://www.skorks.com/2009/09/bash-shortcuts-for-maximum-productivity/&#34;&gt;Bash Shortcuts For Maximum Productivity&lt;/a&gt;) you are familiar with Emacs but you don&#39;t know it yet :) The default key bindings of Bash are also used by Emacs. Let me show you some examples (my apologies to screencast haters but that&#39;s the best way of demonstrating keyboard typing):&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;object class=&#34;BLOGGER-youtube-video&#34; classid=&#34;clsid:D27CDB6E-AE6D-11cf-96B8-444553540000&#34; codebase=&#34;http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0&#34; data-thumbnail-src=&#34;https://ytimg.googleusercontent.com/vi/SPSoT22fwzM/0.jpg&#34; height=&#34;266&#34; width=&#34;320&#34;&gt;&lt;param name=&#34;movie&#34; value=&#34;https://www.youtube.com/v/SPSoT22fwzM?version=3&amp;f=user_uploads&amp;c=google-webdrive-0&amp;app=youtube_gdata&#34; /&gt;&lt;param name=&#34;bgcolor&#34; value=&#34;#FFFFFF&#34; /&gt;&lt;param name=&#34;allowFullScreen&#34; value=&#34;true&#34; /&gt;&lt;embed width=&#34;320&#34; height=&#34;266&#34;  src=&#34;https://www.youtube.com/v/SPSoT22fwzM?version=3&amp;f=user_uploads&amp;c=google-webdrive-0&amp;app=youtube_gdata&#34; type=&#34;application/x-shockwave-flash&#34; allowfullscreen=&#34;true&#34;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/div&gt;&lt;br /&gt;So, what does this screencast demonstrate? My goal is to use the &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;find&lt;/span&gt; command for searching all files with the suffix &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;.conf&lt;/span&gt; that live under the &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;/etc&lt;/span&gt; directory. First fix: I mistyped &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;.cofn&lt;/span&gt; instead of &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;.conf&lt;/span&gt; and used the transpose character function &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;(C-t)&lt;/span&gt;* to correct the mistake. Second fix: I forgot that &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;find&lt;/span&gt; expects the searching path as its first argument and incorrectly provided it as the second. To fix that I first used &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;C-p&lt;/span&gt; to access the most recent command in the command history (this functionality is not offered by Emacs as such). I then used the kill function &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;(C-w)&lt;/span&gt; to &#34;cut&#34; backwards one word, &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;C-a&lt;/span&gt; to go to the beginning of the line, &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;M-f&lt;/span&gt; to go one word forward, and the yank function &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;(C-y)&lt;/span&gt; to &#34;paste&#34; the most recently killed word (that is, the search path) at the expected place.&lt;br /&gt;&lt;br /&gt;The moral of the story: When you learn about a new shortcut in Emacs, try it also in Bash. There&#39;s a great chance that its behavior will be very similar (if not exactly the same).&lt;br /&gt;&lt;br /&gt;&lt;span style=&#34;font-size: x-small;&#34;&gt;* In case you are not familiar with the Emacs terminology: &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;C&lt;/span&gt; typically means the Ctrl keyboard button, and &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;M&lt;/span&gt; means the Alt keyboard button. As an example&lt;span style=&#34;font-size: x-small;&#34;&gt; &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;M-f&lt;/span&gt; means&lt;/span&gt; pressing first Alt followed by &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;f&lt;/span&gt; (move the prompt one word forward).&lt;/span&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Data Structures and Algorithms 101 part two: Queues</title>
      <link>https://sakisk.me/blog/2013-01-04-data-structures-and-algorithms-101-part/</link>
      <pubDate>Fri, 04 Jan 2013 21:40:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2013-01-04-data-structures-and-algorithms-101-part/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Definition &lt;/h3&gt;Think of a queue as a line of people waiting to buy a ticket for an event (music concert, film, etc.).&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-KwTq6z26_yo/UNyrDwvyqPI/AAAAAAAAAE8/SImW5YezxFo/s1600/line.jpg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://4.bp.blogspot.com/-KwTq6z26_yo/UNyrDwvyqPI/AAAAAAAAAE8/SImW5YezxFo/s400/line.jpg&#34; height=&#34;300&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Photo Credit: Bryan Bedder/Getty Images for Tribeca Film Festival&lt;/td&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;&lt;div style=&#34;background-color: white; border: medium none; color: black; overflow: hidden; text-align: left; text-decoration: none;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;In the queue shown at the picture, a person who just arrives to buy a ticket goes to the left side (unless cheating) and a person who just bought a ticket leaves the queue from the right side (to avoid conflicts).&lt;br /&gt;&lt;br /&gt;In queue terminology, adding a new item means &lt;b&gt;enqueuing&lt;/b&gt; it to one side of the queue (either side is fine), while removing an item means &lt;b&gt;dequeuing&lt;/b&gt;&lt;b&gt;&lt;/b&gt; it from the opposite side of the queue.&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-6Nzg7D6jK4I/UNy5rhd0LGI/AAAAAAAAAFM/beBuJgq65pk/s1600/queue.jpg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://3.bp.blogspot.com/-6Nzg7D6jK4I/UNy5rhd0LGI/AAAAAAAAAFM/beBuJgq65pk/s400/queue.jpg&#34; height=&#34;98&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Fundamental queue operations&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;The first item that enters a queue is the first item that exits the queue (first come-first served). For that reason, we call queues &lt;b&gt;First In First Out (FIFO)&lt;/b&gt; data structures.&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Usage and performance&lt;/h3&gt;&lt;div style=&#34;text-align: left;&#34;&gt;Queues have many &lt;a href=&#34;http://introcs.cs.princeton.edu/java/43stack/&#34;&gt;practical applications&lt;/a&gt; (search for &#34;applications&#34;). A simple example is printing documents. Documents are sent to the printer using a first come-first served policy (let&#39;s skip priorities for simplicity). If the printer is busy and we are trying to print a document, it will enqueue it and begin printing it only after it has finished with printing (dequeuing) all the existing documents.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;Enqueuing and dequeuing items in a queue takes &lt;b&gt;constant time - O(1)&lt;/b&gt;.  On the other hand, queues (like &lt;a href=&#34;http://sakiskasampalis.blogspot.nl/2012/09/data-structures-and-algorithms-101-part.html&#34;&gt;stacks&lt;/a&gt;) are not optimized for searching or adding/removing items from arbitrary positions. These operations take &lt;b&gt;linear time - O(n)&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Implementation&lt;/h3&gt;Like my &lt;a href=&#34;http://sakiskasampalis.blogspot.nl/2012/09/data-structures-and-algorithms-101-part.html&#34;&gt;stack&lt;/a&gt; implementation, I will use python and the built-in list data structure to implement a queue. Notice the similarities between stacks and queues. The only difference is the way the elements are accessed. &lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;span style=&#34;font-family: Verdana,sans-serif;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;script src=&#34;https://gist.github.com/4436181.js?file=myqueue.py&#34;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;div style=&#34;text-align: left;&#34;&gt;If you are not familiar with &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;__iter__&lt;/span&gt; and &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;__next__ &lt;/span&gt;they are special functions for &lt;a href=&#34;http://www.diveintopython3.net/iterators.html&#34;&gt;implementing iterators in python&lt;/a&gt;. In short, we can now say &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;for i in mq&lt;/span&gt; where &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;mq&lt;/span&gt; is an instance of &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;myqueue&lt;/span&gt;. Quite convenient! I am going to use it in the sample problem.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Sample problem&lt;/h3&gt;Implement a song playlist for a jukebox/media player, etc. New songs are added to the back (left side) of the playlist. The next song to be played is picked from the front (right side) of the playlist.&lt;/div&gt;&lt;br /&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;script src=&#34;https://gist.github.com/4436181.js?file=playlist.py&#34;&gt;&lt;/script&gt;&lt;/div&gt;Obviously that&#39;s not a &#34;real&#34; playlist since it doesn&#39;t track time so that can be automatically triggered after the end of a song. That&#39;s left as an exercise for you dear hacker. Enjoy!&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;References&lt;/h3&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;&lt;i&gt;Mark Pilgrim. &lt;/i&gt;&lt;a href=&#34;http://getpython3.com/diveintopython3/&#34;&gt;Dive Into Python 3&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Robert Sedgewick, Kevin Wayne. &lt;/i&gt;&lt;a href=&#34;http://introcs.cs.princeton.edu/java/43stack/&#34;&gt;Stacks and Queues&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Interview question: Remove duplicate characters</title>
      <link>https://sakisk.me/blog/2012-10-06-interview-question-remove-duplicate/</link>
      <pubDate>Sat, 06 Oct 2012 22:36:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2012-10-06-interview-question-remove-duplicate/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;Let&#39;s assume that we are asked to solve the following problem in a programming interview: &#34;Write a function that removes all duplicate characters from a string&#34;. Piece of cake, you might think. Surely they are not asking us to write a Web Browser but there must be a reason for that.&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Test first&lt;/h3&gt;The interview&#39;s time is limited. But this doesn&#39;t mean that we should start writing whatever implementation comes on to mind directly. Initially we should at least show to the interviewer that we are familiar with techniques such as &lt;a href=&#34;https://en.wikipedia.org/wiki/Test-driven_development&#34;&gt;Test Driven Development&lt;/a&gt; (TDD). The test cases are useful even if the interviewer is not interested in seeing unit tests. So let&#39;s write them down. We should make sure that our function:&lt;br /&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;Doesn&#39;t fail with empty strings (so &#34;&#34; is valid input)&lt;/li&gt;&lt;li&gt;Returns a string of length = 1 as is (for example &#34;a&#34; is returned as &#34;a&#34;)&lt;/li&gt;&lt;li&gt;Returns a string of length = 2 with two same characters as a string with a single character (for example &#34;aa&#34; is returned as &#34;a&#34;)&lt;/li&gt;&lt;li&gt;Removes all the duplicate characters (for example &#34;anakonda&#34; becomes either &#34;ankod&#34; or &#34;konda&#34; depending on which indexes of duplicate characters we choose to remove ; I&#39;ll initially use the second case and later switch to the first one)&lt;/li&gt;&lt;li&gt;Returns a string with no duplicate characters as is (for example &#34;the&#34; is returned as &#34;the&#34;) &lt;/li&gt;&lt;/ul&gt;It&#39;s fine if we forget some test cases, we can extend them later. Now, let&#39;s assume that the interviewer insists on actually implementing the tests. I&#39;ll use python, because writing unit tests in python is straightforward -- and I obviously like the language ;)&lt;br /&gt;&lt;br /&gt;First we need a stub version of the function. Our function, called &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;remDupl&lt;/span&gt; will accept a string as input and return a copy of the input string without duplicate characters.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/3829456.js?file=strutils.py&#34;&gt;&lt;/script&gt;Now we are ready to write our test.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/3829456.js?file=testremdupl.py&#34;&gt;&lt;/script&gt; Our test is already useful. We can make sure that it fails and then write the main logic of our function until it passes the test.&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-N1SisjXQnTM/UG3wDaLwrCI/AAAAAAAAADQ/wkRhaXQTmlo/s1600/test.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;195&#34; src=&#34;http://3.bp.blogspot.com/-N1SisjXQnTM/UG3wDaLwrCI/AAAAAAAAADQ/wkRhaXQTmlo/s400/test.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Our test fails, as expected&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;The naive implementation&lt;/h3&gt;&lt;div style=&#34;text-align: left;&#34;&gt;So far so good. It&#39;s time to start implementing our function. Since the time is against us, the first step is to follow a naive approach. Although the first implementation might not be the most efficient and clean, it&#39;s important to get something working. If there&#39;s enough time we can improve it later. If there&#39;s no time for writing an improved version, we can still discuss with the interviewer the pros and cons of our naive implementation.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src=&#34;https://gist.github.com/3829456.js?file=strutils2.py&#34;&gt;&lt;/script&gt; First of all, does our function behave as expected?&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://1.bp.blogspot.com/-IBesi5_D_Jw/UG8-y2KonEI/AAAAAAAAADg/LW41d-h7YpU/s1600/testrem.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;90&#34; src=&#34;http://1.bp.blogspot.com/-IBesi5_D_Jw/UG8-y2KonEI/AAAAAAAAADg/LW41d-h7YpU/s400/testrem.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Test result of the naive implementation&lt;/td&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;&lt;br /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;Looks good :)&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Improving the code&lt;/h3&gt;What&#39;s the time complexity of our algorithm? It&#39;s O(n), since we have to  iterate through the whole string. Even if it&#39;s hard to improve the time  complexity, we can do better by writing our code in more idiomatic  python. Python offers a set data structure which looks like a good candidate since all items in a set are unique by definition. But unfortunately the items of a set have no particular order therefore we cannot simply create a set out of our input string. We need a trick to preserve ordering. Combining the set with a generator expression and converting it to a string gives the expected result.&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-96nQz1pLT6o/UHBqXh02YEI/AAAAAAAAAEA/s_062Zt0k80/s1600/ankod.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;br /&gt;&lt;/a&gt;&lt;/div&gt;&lt;script src=&#34;https://gist.github.com/3829456.js?file=strutils3.py&#34;&gt;&lt;/script&gt; Nice, let&#39;s test our changes.&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-96nQz1pLT6o/UHBqXh02YEI/AAAAAAAAAEA/s_062Zt0k80/s1600/ankod.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;203&#34; src=&#34;http://3.bp.blogspot.com/-96nQz1pLT6o/UHBqXh02YEI/AAAAAAAAAEA/s_062Zt0k80/s400/ankod.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;The test fails, only the first occurrence of a character goes into the set&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-96nQz1pLT6o/UHBqXh02YEI/AAAAAAAAAEA/s_062Zt0k80/s1600/ankod.png&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;/a&gt; &lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;Hmmm, there&#39;s something going wrong here. We need to update our test case, since the new code keeps only the first occurrence of each character (thus &#34;anakonda&#34; becomes &#34;ankod&#34; instead of &#34;konda&#34; that used to be when &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;replace&lt;/span&gt; was used).&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/3829456.js?file=testremdupl2.py&#34;&gt;&lt;/script&gt; Now that we updated the test case, our code should pass the tests. Let&#39;s verify.&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-ej7FZrKWicI/UHBux3SE3JI/AAAAAAAAAEQ/KAPCu1OfUyg/s1600/pass.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;88&#34; src=&#34;http://3.bp.blogspot.com/-ej7FZrKWicI/UHBux3SE3JI/AAAAAAAAAEQ/KAPCu1OfUyg/s400/pass.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;The new code passes all the tests&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;And we are done!&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Idio(ma)tic?&lt;/h3&gt;The new version of our function is more compact and pythonic, but does it really perform better that the first version? Since both algorithms are O(n), the details are in the data structures and one way to find that out is by using a &lt;a href=&#34;http://docs.python.org/library/profile.html&#34;&gt;profiler&lt;/a&gt;. So let&#39;s see what&#39;s the performance when executing each version of our function with 600.000 strings as input.&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-k30NiP2nIZI/UHCLfmXZB_I/AAAAAAAAAEo/F_ABZnaCXCA/s1600/profile.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;223&#34; src=&#34;http://4.bp.blogspot.com/-k30NiP2nIZI/UHCLfmXZB_I/AAAAAAAAAEo/F_ABZnaCXCA/s400/profile.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Profiling shows that the naive implementation performs better&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;The second version is a backward step regarding performance. Profiling shows that the generator expression and the join function have the biggest negative impact. Although list comprehensions and generator expressions are the power of python and are optimized for performance, in this particular case the fact that we actually need an ordered string as the output result does not help.&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;References&lt;/h3&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;&lt;i&gt;wikipedia.&lt;/i&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Test-driven_development&#34;&gt;Test Driven Development&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;python.org. &lt;/i&gt;&lt;a href=&#34;http://docs.python.org/library/profile.html&#34;&gt;Profilers&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Mark Pilgrim. &lt;/i&gt;&lt;a href=&#34;http://getpython3.com/diveintopython3/&#34;&gt;Dive Into Python 3&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Data Structures and Algorithms 101 part one: Stacks</title>
      <link>https://sakisk.me/blog/2012-09-23-data-structures-and-algorithms-101-part/</link>
      <pubDate>Sun, 23 Sep 2012 20:59:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2012-09-23-data-structures-and-algorithms-101-part/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Rationale (boring)&lt;/h3&gt;I decided to write down some notes about common (and maybe less common) Data Structures and Algorithms. This is the first part, covering stacks.&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Definition&lt;/h3&gt;Think of a stack as a pile of books.&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-89gwMK_cF6Y/UF9MEcR1B0I/AAAAAAAAACw/gNWHlhOk1oA/s1600/2012-09-22+20.18.02.jpg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;107&#34; src=&#34;http://3.bp.blogspot.com/-89gwMK_cF6Y/UF9MEcR1B0I/AAAAAAAAACw/gNWHlhOk1oA/s320/2012-09-22+20.18.02.jpg&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;A stack looks like a pile of books&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;If I want to study &#34;Modern Operating Systems&#34;, I first need to take away all the books that are on top of it (both &#34;ARM microcontrollers&#34; and &#34;The UNIX programming environment&#34;). Conversely, whenever I finish studying a book the easiest place to put it is on top of the most top book (thus above &#34;ARM microcontrollers&#34;).&lt;br /&gt;&lt;br /&gt;In stack terminology, adding a new item means &lt;b&gt;pushing&lt;/b&gt; it to the top of the stack, while removing an item means &lt;b&gt;popping&lt;/b&gt; it from the top of the stack.&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-rZVogzJQJV0/UF9Sf2b_guI/AAAAAAAAADA/6WDtTbTDBZk/s1600/2012-09-22+20.27.57.jpg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;265&#34; src=&#34;http://4.bp.blogspot.com/-rZVogzJQJV0/UF9Sf2b_guI/AAAAAAAAADA/6WDtTbTDBZk/s320/2012-09-22+20.27.57.jpg&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Fundamental stack operations&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;Stacks provide direct access only to their top element, which happens to also be the last (most recent) element that was pushed in the stack. For that reason, we call stacks &lt;b&gt;Last In First Out (LIFO)&lt;/b&gt; data structures.&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Usage and performance&lt;/h3&gt;Why are stacks useful? There are numerous &lt;a href=&#34;https://en.wikipedia.org/wiki/Stack_%28data_structure%29#Applications&#34;&gt;practical applications&lt;/a&gt; of stacks on Wikipedia. A simple example is adding two numbers using a calculator. Implementation details of such an application are outside the context of this article.&lt;br /&gt;&lt;br /&gt;The good thing about stacks is that pushing and popping an item is very fast. Specifically, pushing and popping are &lt;a href=&#34;http://stackoverflow.com/questions/487258/plain-english-explanation-of-big-o&#34;&gt;constant time - O(1)&lt;/a&gt; operations. On the other hand, stacks are not optimized for searching or adding/removing an item from an arbitrary position. Searching and adding/removing from arbitrary stack positions are &lt;b&gt;linear time - O(n)&lt;/b&gt; operations.&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Implementation&lt;/h3&gt;Stacks are usually implemented using arrays, but since I am using python I will use the built-in list data structure for holding and accessing the items of the stack.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/3784185.js?file=stack.py&#34;&gt;&lt;/script&gt; If &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;[::-1]&lt;/span&gt; looks strange to you, it&#39;s a nice way of using &lt;a href=&#34;http://docs.python.org/release/2.3/whatsnew/section-slices.html&#34;&gt;extended slices&lt;/a&gt; for reversing a sequence. In this representation, the top element of the stack is the left-most element of the printed list. The &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;peek&lt;/span&gt; (aka &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;top&lt;/span&gt;) function returns the top element of the stack without removing it.&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Sample problem&lt;/h3&gt;&lt;div style=&#34;text-align: left;&#34;&gt;Implement a function that sorts a stack in ascending order. You are only allowed to use an extra stack and the fundamental operations &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;push, pop, peek,&lt;/span&gt; and &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;size&lt;/span&gt;.&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;The algorithm presented here sorts the stack in &lt;b&gt;quadratic - O(n^2)&lt;/b&gt; time. The idea is to pop an element from the unsorted stack and push it to the &#34;right&#34; position of the sorted stack. Exhaustive error checking (for example ensuring that unsorted is a stack, etc.) is omitted for simplicity.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/3784185.js?file=sortstack.py&#34;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;Since we only have access to the top item, when the top item of the unsorted stack cannot be pushed to sorted stack (because it violates the sorting order), we move all the items of the sorted stack to the unsorted stack until the &#34;right&#34; position is found.&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;&amp;nbsp;References&lt;/h3&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;&lt;i&gt;Wikipedia.&lt;/i&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Stack_%28data_structure%29&#34;&gt;Stack (abstract data type)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;StackOverflow.&lt;/i&gt; &lt;a href=&#34;http://stackoverflow.com/questions/487258/plain-english-explanation-of-big-o&#34;&gt;Plain English explanation of big O&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Gayle Laakman.&lt;/i&gt; &lt;a href=&#34;http://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/098478280X?tag=duckduckgo-canonical-20&#34;&gt;Cracking the Coding Interview&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>What we can learn from the space guys</title>
      <link>https://sakisk.me/blog/2012-07-18-what-we-can-learn-from-space-guys/</link>
      <pubDate>Wed, 18 Jul 2012 21:48:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2012-07-18-what-we-can-learn-from-space-guys/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;The &lt;a href=&#34;http://www.se-radio.net/2008/06/episode-100-software-in-space/&#34;&gt;software in space&lt;/a&gt; podcast (by se-radio) put me into thoughts about finding ways to improve code quality. First of all, I think that using &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;void&lt;/span&gt; methods in languages that support exceptions is not very useful. Instead, I prefer using idioms like the &lt;a href=&#34;http://pragprog.com/magazines/2012-04/the-pragmatic-defense&#34;&gt;boolean return value and single exit point&lt;/a&gt;. Together with design by contract and sufficient testing coverage, mistakes like the Ariane 5 crash can be discovered and eliminated at an early phase -- before it&#39;s too late...&lt;br /&gt;&lt;br /&gt;The fact that there are usually two discrete programming teams developing the same space software part using different programming languages (and members with different mindsets) is extremely important. It focuses on the importance of the human factor and emphasizes on using different tools to solve the same problem as a way of writing &#34;better&#34; (for example faster, with less bugs, cleaner, more fault tolerant, etc.) code.&lt;br /&gt;&lt;br /&gt;This is aligned with one of my basic principles: Programming languages are just tools, and the right tool should be used for the right job. Dogmatic decisions increase the potential of failure.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>On building a platform</title>
      <link>https://sakisk.me/blog/2012-07-12-on-building-platform/</link>
      <pubDate>Thu, 12 Jul 2012 20:29:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2012-07-12-on-building-platform/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;The se-radio podcast about &lt;a href=&#34;http://www.se-radio.net/2008/10/episode-113-building-platforms-with-jeff-mcaffer/&#34;&gt;building a platform&lt;/a&gt; contains many useful tips, but the most important IMHO are (1) the importance of the API, (2) &#34;eating your own dog food&#34;.&lt;br /&gt;&lt;br /&gt;The API should be easy to use. This means that it should be intuitive for the users, which in this case are programmers. Note that the developers of the API should not decide about its flexibility and easiness. That should be decided only by the users, so the design of an API is guided by the programmers who use it. Good code documentation is also important, and in this case tools like doxygen are invaluable. Finally, backward compatibility is crucial.&lt;br /&gt;&lt;br /&gt;&#34;Eating your own dog food&#34; in this case means using your own platform, either to extend it or to develop customer products (or by being just the end customer). I find this extremely important, because when programmers develop products that they never use or don&#39;t find useful for themselves, the quality of the product is low. This is related with the &lt;a href=&#34;https://en.wikipedia.org/wiki/The_Cathedral_and_the_Bazaar#Guidelines_for_creating_good_open_source_software&#34;&gt;&#34;Scratching an itch&#34;&lt;/a&gt; topic (see guidelines 1 and 18). Examples: Eclipse developers use Eclipse to develop it further, Apple developers use the stuff that they developed in their daily life, etc.&lt;/div&gt;</description>
    </item>
    <item>
      <title>Why Erlang matters</title>
      <link>https://sakisk.me/blog/2012-07-05-why-erlang-matters/</link>
      <pubDate>Thu, 05 Jul 2012 21:38:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2012-07-05-why-erlang-matters/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;I usually go at work by bicycle and to spend my cycling time efficiently I listen to the podcasts of&amp;nbsp; &lt;a href=&#34;http://www.se-radio.net/&#34;&gt;se-radio&lt;/a&gt;. I have this idea of sharing my thoughts about the things being said in the podcasts but I&#39;m not sure if it is going to work well. But anyway...&lt;br /&gt;&lt;br /&gt;Today&#39;s podcast was about &lt;a href=&#34;http://www.se-radio.net/2008/03/episode-89-joe-armstrong-on-erlang/&#34;&gt;Erlang&lt;/a&gt;. Erlang is a functional language which started as a Prolog derivative focusing on solving fault tolerance problems in telecommunications systems. Compared to its initial version, Erlang has evolved a lot. The performance is much better, it uses a dedicated virtual machine, and offers a framework (OTP) for developing real-time fault tolerant systems.&lt;br /&gt;&lt;br /&gt;Erlang focuses on fault tolerance using lightweight processes that communicate with each other using message passing primitives. Each process is independent from the rest, like processes in operating systems. There is no shared memory or threads, so&amp;nbsp; no need for deadlock detection/avoidance techniques, mutexes, conditional variables, and the like.&lt;br /&gt;&lt;br /&gt;Another notable feature is the &#34;let it crash&#34; philosophy. Since processes are independent, when a process crashes the rest remain unaffected. This gives the option of using special processes for monitoring the faulty processes. It&#39;s even possible to debug and replace faults in runtime.&lt;br /&gt;&lt;br /&gt;Now that single processors have reached their limits, Erlang is a great option for making efficient use of multi-core CPUs without messing with threads and hard to debug deadlocks.&lt;br /&gt;&lt;br /&gt;Obviously the Prolog-like syntax of Erlang is keeping some programmers away, but that&#39;s not a serious reason for not giving it a try.&lt;/div&gt;</description>
    </item>
    <item>
      <title>Do you evaluate your potential employers?</title>
      <link>https://sakisk.me/blog/2012-06-03-are-you-evaluating-your-potential/</link>
      <pubDate>Sun, 03 Jun 2012 17:29:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2012-06-03-are-you-evaluating-your-potential/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;The prolonged financial crisis that we are living has caused an enormous growth in unemployment rates all over the world. Software Engineers and Programmers are by no means an exception to that rule, especially fresh graduates with no or little professional experience. But to find a job (or search for a better one) we need to (1) sit for (usually many) interviews, (2) find if there&#39;s a match between what we are looking and what the employer can provide us.&lt;br /&gt;&lt;br /&gt;Being interviewed is unfortunately no fun in most cases. The employers are looking for the perfect candidate, thus they are trying to push us as much as possible: They check our programming and software engineering skills, our communication and social skills, our logic and problem-solving skills, our future plans, etc. (the list can go forever).&lt;br /&gt;&lt;br /&gt;But what do the employers provide in exchange? A good salary? That&#39;s obviously important, but I don&#39;t think it&#39;s enough. If I have to devote at least 8 hours of my life everyday on working for someone, a good salary is not sufficient. Most employers might use some buzzwords (agile, scrum, TDD, etc.)&amp;nbsp; during an interview for convincing us to work for them. Unfortunately reality can be different, and we only find out when it&#39;s too late...&lt;br /&gt;&lt;br /&gt;So what can we do to avoid that situation? It&#39;s simple: We can also ask questions. The next time that your potential employer is going to ask you if you have any questions, surprise her by asking interesting questions similar (but not necessarily the same) to the questions of &lt;a href=&#34;http://www.joelonsoftware.com/articles/fog0000000043.html&#34;&gt;The Joel Test&lt;/a&gt;:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Do you use a distributed version control system?&lt;/li&gt;&lt;li&gt;Do you have a bug database?&amp;nbsp; &lt;/li&gt;&lt;li&gt;Can I make a build in one step using your build system?  &lt;/li&gt;&lt;li&gt;Can I suggest new programming languages/practices? &lt;/li&gt;&lt;li&gt;Do you use an agile methodology?&lt;/li&gt;&lt;li&gt;Do programmers have quiet working conditions?  &lt;/li&gt;&lt;li&gt;Do you have testers?&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;In contrast to Joel&#39;s Test, simple yes/no answers should not be acceptable since the employer might not be 100% honest...&lt;/div&gt;</description>
    </item>
    <item>
      <title>9series: Introduction and chmod</title>
      <link>https://sakisk.me/blog/2012-01-29-9series-introduction-and-chmod/</link>
      <pubDate>Sun, 29 Jan 2012 20:00:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2012-01-29-9series-introduction-and-chmod/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;h3 class=&#34;documentDescription&#34; style=&#34;text-align: left;&#34;&gt;                            &lt;span class=&#34; kssattr-atfieldname-description kssattr-templateId-widgets/textarea kssattr-macro-textarea-field-view inlineEditable&#34; id=&#34;parent-fieldname-description&#34;&gt;            Introduction to Plan 9 and writing a simple chmod utility&amp;nbsp;&lt;/span&gt;&lt;span class=&#34; kssattr-atfieldname-description kssattr-templateId-widgets/textarea kssattr-macro-textarea-field-view inlineEditable&#34; id=&#34;parent-fieldname-description&#34;&gt; &lt;/span&gt;&lt;/h3&gt;I decided to write down some notes about my experiences while playing with &lt;a class=&#34;external-link&#34; href=&#34;http://plan9.bell-labs.com/plan9/&#34;&gt;Plan 9&lt;/a&gt;.  Plan 9 is a free software (OSI certified) distributed operating system  developed in a place that I would like to visit someday: Bell Labs.  Many great programmers have contributed to Plan 9. Among them are the  well-known from the UNIX world Ken Thompson and Rob Pike. Yet another  respected programming figure, Brian Kernighan, claims to be just a &lt;a class=&#34;external-link&#34; href=&#34;http://doc.cat-v.org/plan_9/2nd_edition/README&#34;&gt;casual user&lt;/a&gt; of the system (or at least he did in 1995).&lt;br /&gt;&lt;br /&gt;There are many novel ideas behind Plan 9. Some of them have already been reimplemented in other operating systems: The &lt;code&gt;/proc&lt;/code&gt; and other in memory pseudo file systems, private group per user, native  UTF-8 support, append-only file permissions, and treating FTP  directories as local. But there are some Plan 9 features that are simply  impossible to implement in the rest systems; or if they are implemented  it is done in a very ugly/hacky way, because their design is not  flexible enough. To mention a few: Namespaces, no need for  root/superuser or &lt;code&gt;sudo&lt;/code&gt;-like hacks, every compilation is by default a cross compilation, device files are controlled using clear-text.&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;      Coding in Plan 9&lt;/h3&gt;Although Plan 9 provides an ANSI/POSIX compatibility layer (APE), it  doesn&#39;t make sense to use it for other than porting purposes.The native C  API of Plan 9 is neither POSIX nor ANSI compatible, but IMHO it&#39;s  cleaner and simpler to use. As an example, let&#39;s look into the  implementation of a simplified &lt;code&gt;chmod&lt;/code&gt; utility.&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/1699511.js?file=mychmod.c&#34;&gt;&lt;/script&gt;&lt;br /&gt;A few comments about the interesting parts of the code. Plan 9 has  simple built-in support for handling command line arguments using the &lt;code&gt;ARGBEGIN/ARGEND&lt;/code&gt; block. &lt;code&gt;argv0&lt;/code&gt; is a convenient name that can be used for referring to the name of the  executable. Applying a new permission mask to a file in Plan 9 is just a  matter of updating the mode flag of the file&#39;s &lt;code&gt;Dir&lt;/code&gt; structure. The result is a nice utility using only a few lines of code. Here&#39;s how it can be used:&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-JqcOHepwI9U/T7_j5P0hrjI/AAAAAAAAAAg/bacxP26KyXk/s1600/9chmod.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;97&#34; src=&#34;http://3.bp.blogspot.com/-JqcOHepwI9U/T7_j5P0hrjI/AAAAAAAAAAg/bacxP26KyXk/s400/9chmod.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;And that concludes this brief introduction to Plan 9. Until next time... Happy Coding!&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;      References&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Rob Pike, Dave Presotto, et al. &lt;/i&gt;&lt;a class=&#34;external-link&#34; href=&#34;http://plan9.bell-labs.com/sys/doc/9.html&#34;&gt;Plan 9 From Bell Labs&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Francisco J Ballesteros.&lt;/i&gt; &lt;a class=&#34;external-link&#34; href=&#34;http://lsub.org/who/nemo/9.intro.pdf&#34;&gt;Introduction to Operating System Abstractions using Plan 9 from Bell Labs&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;div class=&#34;documentDescription&#34;&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>I love your boot loader</title>
      <link>https://sakisk.me/blog/2011-12-18-i-love-your-boot-loader/</link>
      <pubDate>Sun, 18 Dec 2011 20:30:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2011-12-18-i-love-your-boot-loader/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;h4 class=&#34;documentDescription&#34; style=&#34;text-align: left;&#34;&gt;                      &lt;span class=&#34; kssattr-atfieldname-description kssattr-templateId-widgets/textarea kssattr-macro-textarea-field-view inlineEditable&#34; id=&#34;parent-fieldname-description&#34;&gt;            GRUB on a cigarette machine&amp;nbsp;&lt;/span&gt;&lt;/h4&gt;&lt;div class=&#34;documentDescription&#34;&gt;According to &lt;a class=&#34;external-link&#34; href=&#34;http://weblog.savanne.be/478-as-seen-in-an-amsterdam-bar&#34;&gt;Ruben&lt;/a&gt; the GRUB (and probably POSIX) powered cigarette machine can be found in  an Amsterdam bar. What an interesting embedded system! After seeing  this it&#39;s impossible not to show sympathy for the Netherlands. Most  other embedded systems that I have seen in other countries are using  Windows. Good job bar owners. I&#39;ll make sure to visit your bar for a  beer :)&lt;span class=&#34; kssattr-atfieldname-description kssattr-templateId-widgets/textarea kssattr-macro-textarea-field-view inlineEditable&#34; id=&#34;parent-fieldname-description&#34;&gt;&amp;nbsp;&lt;/span&gt;             &lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Updating Debian Wheezy breaks GCC</title>
      <link>https://sakisk.me/blog/2011-08-25-updating-debian-wheezy-breaks-gcc/</link>
      <pubDate>Thu, 25 Aug 2011 13:30:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2011-08-25-updating-debian-wheezy-breaks-gcc/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;h4 class=&#34;documentDescription&#34; style=&#34;text-align: left;&#34;&gt;                        &lt;span class=&#34; kssattr-atfieldname-description kssattr-templateId-widgets/textarea kssattr-macro-textarea-field-view inlineEditable&#34; id=&#34;parent-fieldname-description&#34;&gt;            Quick hack to fix it&lt;/span&gt;&lt;/h4&gt;The latest update of Debian testing (aka Wheezy) breaks GCC, both version 4.x and 5.x:&lt;br /&gt;&lt;pre&gt;#include &amp;lt;stdio.h&amp;gt;&lt;br /&gt;&lt;br /&gt;int&lt;br /&gt;main (void)&lt;br /&gt;{&amp;nbsp; &lt;br /&gt;   return 0;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;faif@isengard:~$ gcc --version&lt;br /&gt;gcc (Debian 4.5.3-3) 4.5.3&lt;br /&gt;faif@isengard:~$ gcc -o a a.c&lt;br /&gt;/usr/bin/ld: cannot find -lgcc_s&lt;br /&gt;collect2: ld returned 1 exit status&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&lt;/pre&gt;Well, the thing is that the &#34;missing&#34; library is already installed:&lt;br /&gt;&lt;pre&gt;faif@isengard:~$ find / -name &#39;*libgcc*&#39; 2&amp;gt;/dev/null&lt;br /&gt;/lib/libgcc_s.so.1&lt;/pre&gt;&lt;br /&gt;So, &lt;a class=&#34;external-link&#34; href=&#34;http://www.debian.org/doc/FAQ/ch-software.en.html&#34;&gt;why (see 5.6)&lt;/a&gt; is this happening? Well, that&#39;s because someone forgot to add the  relevant symbolic link. Thus a quick hack to fix the problem is:&lt;br /&gt;&lt;pre&gt;faif@isengard:~$ sudo ln -s /lib/libgcc_s.so.1 /lib/libgcc_s.so&lt;br /&gt;faif@isengard:~$ gcc -o a a.c &amp;amp;&amp;amp; echo voila!&lt;br /&gt;voila!&lt;br /&gt;faif@isengard:~$&lt;/pre&gt;&lt;br /&gt;&lt;div class=&#34;documentDescription&#34;&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Job seeking post</title>
      <link>https://sakisk.me/blog/2011-08-05-job-seeking-post/</link>
      <pubDate>Fri, 05 Aug 2011 22:00:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2011-08-05-job-seeking-post/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;div class=&#34;documentDescription&#34;&gt;&lt;h4 style=&#34;text-align: left;&#34;&gt;   &lt;span class=&#34; kssattr-atfieldname-description kssattr-templateId-widgets/textarea kssattr-macro-textarea-field-view inlineEditable&#34; id=&#34;parent-fieldname-description&#34;&gt;            Would you hire this seeker?&amp;nbsp;&lt;/span&gt;&lt;/h4&gt;&lt;/div&gt;This is a real LinkedIn post from a job seeker:&lt;cite&gt;&lt;/cite&gt;&lt;br /&gt;&lt;blockquote class=&#34;tr_bq&#34;&gt;Hi, i search work. I web-programmer. I work to PHP. I from COUNTRY&lt;sup&gt;[1]&lt;/sup&gt;. Interested in remote work. Please write me in profile.&lt;/blockquote&gt;&lt;cite&gt;&lt;/cite&gt;Honestly: If you were a job recruiter, would you give a change to this seeker? I guess not...&lt;br /&gt;&amp;nbsp;&lt;a href=&#34;http://www.blogger.com/blogger.g?blogID=7146248794813174249&#34; name=&#34;ref_1&#34;&gt;&lt;br /&gt;&lt;/a&gt;&lt;br /&gt;[1] I removed the name of the country since the point of this post is not to offend a specific country, but to make fun of the actual content.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34; kssattr-atfieldname-description kssattr-templateId-widgets/textarea kssattr-macro-textarea-field-view inlineEditable&#34; id=&#34;parent-fieldname-description&#34;&gt;&amp;nbsp;&lt;/span&gt;             &lt;/div&gt;</description>
    </item>
    <item>
      <title>Debian Lenny -&gt; Squeeze transition</title>
      <link>https://sakisk.me/blog/2011-07-31-debian-lenny-squeeze-transition/</link>
      <pubDate>Sun, 31 Jul 2011 00:30:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2011-07-31-debian-lenny-squeeze-transition/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;After more than a year of using Debian GNU/Linux stable (Lenny) on my eee, I decided to upgrade it to testing (Squeeze). The reasons are  many. Some of them, are the access to updated versions of many  applications, and the usage of a recent optimized kernel. Anyway, my  system is fine except from a (pretty annoying) bug with gnome-panel when minimizing applications (they are gone instead of iconified), which  seems to be a known issue but I still have not found a good solution&lt;sup&gt;[1]&lt;/sup&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;callout&#34; style=&#34;background-color: white; color: black;&#34;&gt;[1] The problem was solved by simply reinstalling GNOME :)&lt;/div&gt;&lt;div class=&#34;callout&#34;&gt;&lt;br /&gt;&lt;/div&gt;If you are planning to do the same, the following advices might be helpful:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Make sure that you have enough space on all partitions. In my  case, during the installation my root partition became full, which  terminated the process. An easy way to free space on the root partition  (I&#39;m talking about using a separate root partition here) is to remove  outdated kernels and modules (if you don&#39;t use a separate boot  partition). Don&#39;t do this manually, use &lt;code&gt;aptitude search linux-image&lt;/code&gt; and &lt;code&gt;aptitude purge&lt;/code&gt; instead. Other than that, &lt;code&gt;du --human-readable --summarize [directories/files] | sort --reverse --numeric-sort&lt;/code&gt; will be your friend :)&lt;/li&gt;&lt;li&gt;Be aware of the udev &lt;a class=&#34;external-link&#34; href=&#34;http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=571255&#34;&gt;bug&lt;/a&gt;. There is a lot of discussion on the Web, but the best solution I&#39;ve found is on the Debian &lt;a class=&#34;external-link&#34; href=&#34;http://forums.debian.net/viewtopic.php?f=16&amp;amp;t=48996&#34;&gt;forum&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Use &lt;code&gt;aptitude&lt;/code&gt; instead of &lt;code&gt;apt-get&lt;/code&gt;. The steps are very straightforward:&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Replace all the lines in &lt;code&gt;/etc/apt/sources.list&lt;/code&gt; from  lenny to squeeze (or stable to testing, etc.) except from the security  repository. The reason is that security updates are provided faster for  the stable distribution, and it is fine to keep this line as is (no  conflicts).&lt;/li&gt;&lt;li&gt;&lt;code&gt;sudo aptitude update&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;sudo aptitude install apt dpkg aptitude&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;sudo aptitude safe-upgrade&lt;/code&gt;. Warning: This can last for some hours so get a book or go out for a coffee...&lt;/li&gt;&lt;li&gt;Reboot to make sure that the new kernel is used.&lt;/li&gt;&lt;li&gt;&lt;code&gt;sudo aptitude full-upgrade&lt;/code&gt;. Although not necessary, I advice you to switch into single user mode with &lt;code&gt;sudo telinit 1&lt;/code&gt; before executing this step. &lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;br /&gt;Have fun with Debian!&lt;/div&gt;</description>
    </item>
    <item>
      <title>TheHackerspace</title>
      <link>https://sakisk.me/blog/2011-06-01-thehackerspace/</link>
      <pubDate>Wed, 01 Jun 2011 16:30:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2011-06-01-thehackerspace/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;h4 class=&#34;documentDescription&#34; style=&#34;text-align: left;&#34;&gt;                       &lt;span class=&#34; kssattr-atfieldname-description kssattr-templateId-widgets/textarea kssattr-macro-textarea-field-view inlineEditable&#34; id=&#34;parent-fieldname-description&#34;&gt;            Thesssaloniki&#39;s hackerspace is here!&lt;/span&gt;&lt;/h4&gt;&lt;div class=&#34;documentDescription&#34;&gt;&lt;span class=&#34; kssattr-atfieldname-description kssattr-templateId-widgets/textarea kssattr-macro-textarea-field-view inlineEditable&#34; id=&#34;parent-fieldname-description&#34;&gt;&lt;/span&gt; The following excerpt is taken from the &lt;a class=&#34;external-link&#34; href=&#34;http://the-hackerspace.blogspot.com/&#34;&gt;homepage&lt;/a&gt; of TheHackerspace: &lt;/div&gt;&lt;blockquote class=&#34;tr_bq&#34;&gt;&lt;div class=&#34;callout&#34; style=&#34;text-align: justify;&#34;&gt;&#34;Unless you are rich, it is unlikely that you own all the hardware and the tools required to build different kinds of embedded systems. For example you might already own an arduino board, but most probably you are missing the X or Y sensor required to build your favourite prototype.&lt;/div&gt;&lt;div class=&#34;callout&#34; style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;callout&#34; style=&#34;text-align: justify;&#34;&gt;And unless you are a genius, it is unlikely that you know everything about all the available free software/open source operating systems. Thus, perhaps you wrote your own system call or driver for the Linux kernel, but most probably you donâ€™t know how to do the same stuff on another operating system that you like (for example MINIX 3).&lt;/div&gt;&lt;div class=&#34;callout&#34; style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;callout&#34; style=&#34;text-align: justify;&#34;&gt;Donâ€™t worry. That is exactly why we founded TheHackerspace. It is a place where hardware, books, code, and knowledge is shared between people who like to hack. If you are interested on embedded and system hacking, you are welcomed to join us.&#34;&lt;/div&gt;&lt;/blockquote&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Personally I contributed in many ways to  the foundation of TheHackerspace by helping to build the lab, donating books, writing most of the (current) content  in the homepage, etc. Unfortunately I don&#39;t have the time to enjoy  TheHackerspace since in a week I&#39;m relocating to the Netherlands where I  got a job (but that&#39;s good news!). I hope that when I&#39;m back in  Thessaloniki TheHackerspace will still exist and some really great  projects will be the outcomes of its foundation :)&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Automatic Web logon</title>
      <link>https://sakisk.me/blog/2011-05-21-automatic-web-logon/</link>
      <pubDate>Sat, 21 May 2011 19:31:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2011-05-21-automatic-web-logon/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;h4 class=&#34;documentDescription&#34; style=&#34;text-align: left;&#34;&gt;                  &lt;span class=&#34; kssattr-atfieldname-description kssattr-templateId-widgets/textarea kssattr-macro-textarea-field-view inlineEditable&#34; id=&#34;parent-fieldname-description&#34;&gt;            Visiting Yahoo! Answers without using a Web browser&amp;nbsp;&lt;/span&gt;&lt;/h4&gt;I believe that services like Yahoo! Answers are very useful and use  them at times. The Yahoo! Answers community gives an extra point to  users each time they visit their account (but only once/day).&lt;br /&gt;&lt;br /&gt;The problem is that usually I&#39;m very busy (or lazy) and thus I always  forget to visit my account. Therefore I was looking for ways of  automating the process. It looks like this is very straightforward to do  when the right tools are used. Here&#39;s a quick solution using Python:&lt;br /&gt;&lt;div class=&#34;documentDescription&#34;&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/1567050.js?file=answers.py&#34;&gt;  &lt;/script&gt; You might argue that using clear-text passwords is not a good  practice; that is absolutely right, but in this case I&#39;m not insane  about the protection of my Yahoo! credentials since Answers is the only  Yahoo! service that I use.&lt;br /&gt;&lt;br /&gt;Happy coding!&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>LinkedIn bug?</title>
      <link>https://sakisk.me/blog/2011-05-14-linkedin-bug/</link>
      <pubDate>Sat, 14 May 2011 14:30:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2011-05-14-linkedin-bug/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;h1 class=&#34;documentFirstHeading&#34;&gt;                        &lt;/h1&gt;Question: How is it possible to have 1076 people in my network at company X but no connections at all at the same company?&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-yso3jczspHA/T7--yTOs5bI/AAAAAAAAAAU/qbO59pNE6xc/s1600/LinkedIn.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;232&#34; src=&#34;http://3.bp.blogspot.com/-yso3jczspHA/T7--yTOs5bI/AAAAAAAAAAU/qbO59pNE6xc/s400/LinkedIn.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Answer: Ask the LinkedIn developers!&lt;br /&gt;&lt;h1 class=&#34;documentFirstHeading&#34;&gt;               &lt;/h1&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Beware of Q_ASSERT</title>
      <link>https://sakisk.me/blog/2011-05-12-beware-of-qassert/</link>
      <pubDate>Thu, 12 May 2011 18:30:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2011-05-12-beware-of-qassert/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;I really like the concept of inline assertions. Assertions might be  rude, since they kick you out of a program whenever they fail, but by  using them you can make sure that your code gives you the expected  results. You might argue that Unit Testing is a better approach. I won&#39;t  say no, but I believe that unit testing is slower to implement and not  necessary in all cases.&lt;br /&gt;&lt;br /&gt;Anyway this is not where I want to focus. If you are coding in QT, you might be aware of &lt;code&gt;Q_ASSERT&lt;/code&gt;. Like other features (&lt;code&gt;QString&lt;/code&gt;, &lt;code&gt;QFile&lt;/code&gt;,  etc.), QT provides its own facility for writing code assertions. So  that&#39;s another replacement of a standard facility, right? Well, not  exactly... What I wasn&#39;t aware of, is that &lt;code&gt;Q_ASSERT&lt;/code&gt;  statements are completely ignored when the application is executing in  release mode. They are only taken into account in debug mode. I was  using a statement like &lt;code&gt;Q_ASSERT(doThat())&lt;/code&gt; in my code, which was causing a hard to track logical error (since &lt;code&gt;doThat()&lt;/code&gt; was never executed in release mode). Luckily, after a couple of hours a colleague of mine discovered the bug.&lt;br /&gt;&lt;br /&gt;My mistake: I wrongly assumed that &lt;code&gt;Q_ASSERT&lt;/code&gt; acts like the classic &lt;code&gt;assert&lt;/code&gt;, which is only ignored in a C++/C program if a special macro (like &lt;code&gt;NDEBUG&lt;/code&gt;) is defined. What I actually wanted was my assertions to be checked in both modes, which is done by using the standard &lt;code&gt;assert&lt;/code&gt; facility.&lt;br /&gt;&lt;br /&gt;So are you using &lt;code&gt;Q_ASSERT&lt;/code&gt;? That&#39;s fine. Just be aware that &lt;code&gt;Q_ASSERT&lt;/code&gt; and &lt;code&gt;assert&lt;/code&gt; behave differently.&lt;br /&gt;&lt;br /&gt;Happy coding.&lt;/div&gt;</description>
    </item>
    <item>
      <title>Python code profiling in Debian</title>
      <link>https://sakisk.me/blog/2011-05-08-python-code-profiling-in-debian/</link>
      <pubDate>Sun, 08 May 2011 21:30:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2011-05-08-python-code-profiling-in-debian/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;If you are coding in python, you are probably already familiar with  the profiler concept. The problem is that the python profiler license  fails to comply with the free software guidelines of Debian and  therefore the package belongs to the non-free archive. &#34;So what?&#34;, you  might say. Well, personally I don&#39;t like to use software which belongs  to the non-free archive both for philosophical and technical reasons. An  important technical reason for instance is that Debian does not provide  security updates for the non-free packages.&lt;br /&gt;&lt;br /&gt;The next question is  are there any alternative solutions? Thankfully the answer is yes.  Since python 2.3 we can use the timeit module to test the efficiency of our code. Let me demonstrate the module using a simple example, taken  from Downey&#39;s &#34;Think Python&#34; book (exception handling and the like are  omitted for simplicity).&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/1561608.js?file=fibo-timeit.py&#34;&gt;&lt;/script&gt; &lt;br /&gt;What we want to see here is how much more efficient is the  recursive version of Fibonacci which uses a dictionary as a memo. Let&#39;s  first see the result of the given code snippet (no memo version):&lt;br /&gt;&lt;pre&gt;python3 fibo-timeit.py&lt;br /&gt;113.601776838&lt;/pre&gt;Wow! It took almost 114 seconds the profiler to complete the test... Let&#39;s change the code to use the memo-based function:&lt;br /&gt;&lt;pre&gt;t = Timer(&#39;fibonacci_ef(9)&#39;, &#39;from __main__ import fibonacci_ef&#39;)&lt;/pre&gt;So let&#39;s find out if memoization does indeed worth trying:&lt;br /&gt;&lt;pre&gt;python3 fibo-timeit.py&lt;br /&gt;1.40260386467&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&lt;/pre&gt;Hmmm.... Not bad. Happy Coding :)&lt;/div&gt;</description>
    </item>
    <item>
      <title>Back to basics...</title>
      <link>https://sakisk.me/blog/2011-04-28-back-to-basics/</link>
      <pubDate>Thu, 28 Apr 2011 10:00:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2011-04-28-back-to-basics/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;div class=&#34;plain&#34; id=&#34;parent-fieldname-text&#34; style=&#34;text-align: left;&#34;&gt;&lt;div class=&#34;documentDescription&#34;&gt;&lt;/div&gt;&lt;h4 style=&#34;text-align: left;&#34;&gt; &lt;/h4&gt;&lt;h4 style=&#34;text-align: left;&#34;&gt;&lt;span class=&#34;&#34; id=&#34;parent-fieldname-description&#34;&gt;            How I ended up with a clean Plone instance on objectis&lt;/span&gt;&lt;/h4&gt;&lt;h4 style=&#34;text-align: left;&#34;&gt; &lt;/h4&gt;&lt;div class=&#34;documentDescription&#34;&gt;&lt;/div&gt;What can I say? It is my faith to develop my homepage from scratch once every while...&lt;br /&gt;&lt;br /&gt;When I decided to migrate from Drupal to Plone, dtek (a company where  I used to work in the past) has kindly offered me some space and hosted  my Plone site for free. Unfortunately they can&#39;t host my homepage  anymore. While looking for hosting providers, I found out that it is  expensive to host Plone/Zope sites, in contrast for example to PHP/MySQL  sites.&lt;br /&gt;&lt;br /&gt;Thankfully Pilot Systems is kind enough to provide free Plone hosting  services through the objectis service. I really appreciate that.  Unfortunately, there are some limitations to the free package, the  biggest of them being the lack of support for restoring Plone websites  of size &amp;gt; 10MB. The backup of my former homepage (freeasinfreedom.eu) is  ~25MB thus I cannot restore it using the quick importer of Zope.&lt;br /&gt;&lt;br /&gt;So&amp;nbsp; here I am, with a clean Plone instance that I have to develop from scratch step by step. Better than nothing, isn&#39;t it?&lt;/div&gt;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
