<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on Sakis Kasampalis - Personal homepage</title>
    <link>https://sakisk.me/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on Sakis Kasampalis - Personal homepage</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 19 Aug 2020 20:00:00 +0000</lastBuildDate>
    <atom:link href="https://sakisk.me/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>One catch to rule them all</title>
      <link>https://sakisk.me/blog/2020-08-19-one-catch/</link>
      <pubDate>Wed, 19 Aug 2020 20:00:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2020-08-19-one-catch/</guid>
      <description>&lt;p&gt;When writing code, we need to handle errors. What happens if you are trying to read a corrupt file? Or if the network goes down while receiving data? The programming language runtime will try to&#xA;give you an error message that makes sense, but that doesn&amp;rsquo;t mean that this is what you want to show to your application/API users.&lt;/p&gt;&#xA;&lt;p&gt;There are two traditional ways of doing error handling. One is using error codes. That means returning a code (usually a number) to the users when something goes wrong, and let them interpret&#xA;that number using a lookup table. In languages that support exceptions, the recommended way is using exception handling.&lt;/p&gt;</description>
    </item>
    <item>
      <title>mbed USB voltmeter</title>
      <link>https://sakisk.me/blog/2013-07-28-mbed-usb-voltmeter/</link>
      <pubDate>Sun, 28 Jul 2013 20:52:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2013-07-28-mbed-usb-voltmeter/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;USB communication with mbed is easy. That&#39;s because USB is the default protocol used to transfer programs from a computer to an mbed.&lt;br /&gt;&lt;br /&gt;In this prototype I measure the analog value of a pot, I convert it to  voltage, and finally I use USB to print it on my computer&#39;s  screen. That&#39;s a simplistic voltage meter! Here&#39;s the schematic:&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-zjXcdWLTPi8/UfVJyejZJTI/AAAAAAAAAG4/g1aEkW9UG1w/s1600/voltmeter-schematic.jpg&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;207&#34; src=&#34;https://images-blogger-opensocial.googleusercontent.com/gadgets/proxy?url=http%3A%2F%2F4.bp.blogspot.com%2F-zjXcdWLTPi8%2FUfVJyejZJTI%2FAAAAAAAAAG4%2Fg1aEkW9UG1w%2Fs1600%2Fvoltmeter-schematic.jpg&amp;amp;container=blogger&amp;amp;gadget=a&amp;amp;rewriteMime=image%2F*&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;USB voltage meter schematic. Image courtesy of Bert Van Dam&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-PDXtSfs8K2E/UfQjbnRkuyI/AAAAAAAAAGo/L5tAUyAeiWo/s1600/usb-voltmeter.jpg&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;br /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;And a picture of the actual circuit:&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-PDXtSfs8K2E/UfQjbnRkuyI/AAAAAAAAAGo/L5tAUyAeiWo/s1600/usb-voltmeter.jpg&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;640&#34; src=&#34;https://images-blogger-opensocial.googleusercontent.com/gadgets/proxy?url=http%3A%2F%2F4.bp.blogspot.com%2F-PDXtSfs8K2E%2FUfQjbnRkuyI%2FAAAAAAAAAGo%2FL5tAUyAeiWo%2Fs1600%2Fusb-voltmeter.jpg&amp;amp;container=blogger&amp;amp;gadget=a&amp;amp;rewriteMime=image%2F*&#34; width=&#34;480&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;USB voltage meter circuit&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;Note that the pot is used just for testing purposes. It can actually be replaced by any other part. Just make sure that you&#39;re not trying to measure voltage &amp;gt; 3.3 volts, or your mbed is in danger!&lt;/div&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;The code &lt;/h3&gt;&lt;div style=&#34;text-align: left;&#34;&gt;First the header file. It defines the USB connection, the analog input pin used to read the pot&#39;s value, a few constants, and a function that will be used for converting the pot&#39;s value from [0 - 1] to the voltage [0 - 3.3] volts.&lt;/div&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/faif/6099348.js?file=voltmeter.h&#34;&gt;&lt;/script&gt;&lt;br /&gt;And the source file. It contains the body of the conversion function, two terminal control commands for clearing the screen and moving to the top, and the commands for reading the pot&#39;s value and printing it (together with its voltage) to the terminal through the USB port.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/faif/6099348.js?file=voltmeter.cpp&#34;&gt;&lt;/script&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Demo&lt;/h3&gt;&lt;div style=&#34;text-align: left;&#34;&gt;I&#39;m on a GNU/Linux system, where the mbed is identified as &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;/dev/ttyACM0&lt;/span&gt;. A simple tool to use for connecting with it is &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;screen&lt;/span&gt; (eg. &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;sudo screen /dev/ttyACM0&lt;/span&gt;). Pardon me for the bad quality of the video, it&#39;s the first time that I used YouTube capture with my phone and it didn&#39;t work as well as I expected :)&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;315&#34; src=&#34;//www.youtube-nocookie.com/embed/Z-bx2zrV7SE?rel=0&#34; width=&#34;560&#34;&gt;&lt;/iframe&gt; &lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;&amp;nbsp;&lt;/h3&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Acknowledgements&lt;/h3&gt;&lt;div style=&#34;text-align: left;&#34;&gt;Special thanks to my good friend and Arduino hacker &lt;a href=&#34;http://efxa.org/&#34;&gt;efxa&lt;/a&gt;, for without his parts it wouldn&#39;t be possible to play with mbed.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;References &lt;/h3&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;&lt;i&gt;Bert Van Dam.&lt;/i&gt; &lt;a href=&#34;http://www.elektor.com/products/books/microcontrollers/arm-microcontrollers-1-%28uk%29.1625568.lynkx&#34;&gt;ARM Microcontrollers part 1 &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;mbed handbook. &lt;/i&gt;&lt;a href=&#34;https://mbed.org/handbook/SerialPC&#34;&gt;Serial Communication with a PC&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Beware of Q_ASSERT</title>
      <link>https://sakisk.me/blog/2011-05-12-beware-of-qassert/</link>
      <pubDate>Thu, 12 May 2011 18:30:00 +0000</pubDate>
      <guid>https://sakisk.me/blog/2011-05-12-beware-of-qassert/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;I really like the concept of inline assertions. Assertions might be  rude, since they kick you out of a program whenever they fail, but by  using them you can make sure that your code gives you the expected  results. You might argue that Unit Testing is a better approach. I won&#39;t  say no, but I believe that unit testing is slower to implement and not  necessary in all cases.&lt;br /&gt;&lt;br /&gt;Anyway this is not where I want to focus. If you are coding in QT, you might be aware of &lt;code&gt;Q_ASSERT&lt;/code&gt;. Like other features (&lt;code&gt;QString&lt;/code&gt;, &lt;code&gt;QFile&lt;/code&gt;,  etc.), QT provides its own facility for writing code assertions. So  that&#39;s another replacement of a standard facility, right? Well, not  exactly... What I wasn&#39;t aware of, is that &lt;code&gt;Q_ASSERT&lt;/code&gt;  statements are completely ignored when the application is executing in  release mode. They are only taken into account in debug mode. I was  using a statement like &lt;code&gt;Q_ASSERT(doThat())&lt;/code&gt; in my code, which was causing a hard to track logical error (since &lt;code&gt;doThat()&lt;/code&gt; was never executed in release mode). Luckily, after a couple of hours a colleague of mine discovered the bug.&lt;br /&gt;&lt;br /&gt;My mistake: I wrongly assumed that &lt;code&gt;Q_ASSERT&lt;/code&gt; acts like the classic &lt;code&gt;assert&lt;/code&gt;, which is only ignored in a C++/C program if a special macro (like &lt;code&gt;NDEBUG&lt;/code&gt;) is defined. What I actually wanted was my assertions to be checked in both modes, which is done by using the standard &lt;code&gt;assert&lt;/code&gt; facility.&lt;br /&gt;&lt;br /&gt;So are you using &lt;code&gt;Q_ASSERT&lt;/code&gt;? That&#39;s fine. Just be aware that &lt;code&gt;Q_ASSERT&lt;/code&gt; and &lt;code&gt;assert&lt;/code&gt; behave differently.&lt;br /&gt;&lt;br /&gt;Happy coding.&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
