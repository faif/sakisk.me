<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GNU on Sakis Kasampalis - Personal homepage</title>
    <link>http://localhost:1313/tags/gnu/</link>
    <description>Recent content in GNU on Sakis Kasampalis - Personal homepage</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 23 Mar 2013 19:40:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/gnu/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Why you should try Emacs if you are a Bash user</title>
      <link>http://localhost:1313/blog/2013-03-23-why-you-should-try-emacs-if-you-are/</link>
      <pubDate>Sat, 23 Mar 2013 19:40:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2013-03-23-why-you-should-try-emacs-if-you-are/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;Are you a GNU Bash user but you are not using Emacs? Perhaps you should consider trying it. You will be amazed by the similarities...&lt;br /&gt;&lt;br /&gt;I know, your IDE (Eclipse, QT, etc.) is superior and you are extremely productive with it. Why bother using an ancient editor like Emacs? I will not begin another flamewar by comparing popular IDEs with Emacs. Choose whatever you prefer during programming. But if you want to be productive while using a UNIX-like system, Emacs (and of course Vim but I can&#39;t speak for Vim since I&#39;m an Emacs user) can really help you.&lt;br /&gt;&lt;br /&gt;The truth is that if you are already productive in Bash (mandatory reading: &lt;a href=&#34;http://www.skorks.com/2009/09/bash-shortcuts-for-maximum-productivity/&#34;&gt;Bash Shortcuts For Maximum Productivity&lt;/a&gt;) you are familiar with Emacs but you don&#39;t know it yet :) The default key bindings of Bash are also used by Emacs. Let me show you some examples (my apologies to screencast haters but that&#39;s the best way of demonstrating keyboard typing):&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;object class=&#34;BLOGGER-youtube-video&#34; classid=&#34;clsid:D27CDB6E-AE6D-11cf-96B8-444553540000&#34; codebase=&#34;http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0&#34; data-thumbnail-src=&#34;https://ytimg.googleusercontent.com/vi/SPSoT22fwzM/0.jpg&#34; height=&#34;266&#34; width=&#34;320&#34;&gt;&lt;param name=&#34;movie&#34; value=&#34;https://www.youtube.com/v/SPSoT22fwzM?version=3&amp;f=user_uploads&amp;c=google-webdrive-0&amp;app=youtube_gdata&#34; /&gt;&lt;param name=&#34;bgcolor&#34; value=&#34;#FFFFFF&#34; /&gt;&lt;param name=&#34;allowFullScreen&#34; value=&#34;true&#34; /&gt;&lt;embed width=&#34;320&#34; height=&#34;266&#34;  src=&#34;https://www.youtube.com/v/SPSoT22fwzM?version=3&amp;f=user_uploads&amp;c=google-webdrive-0&amp;app=youtube_gdata&#34; type=&#34;application/x-shockwave-flash&#34; allowfullscreen=&#34;true&#34;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/div&gt;&lt;br /&gt;So, what does this screencast demonstrate? My goal is to use the &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;find&lt;/span&gt; command for searching all files with the suffix &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;.conf&lt;/span&gt; that live under the &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;/etc&lt;/span&gt; directory. First fix: I mistyped &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;.cofn&lt;/span&gt; instead of &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;.conf&lt;/span&gt; and used the transpose character function &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;(C-t)&lt;/span&gt;* to correct the mistake. Second fix: I forgot that &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;find&lt;/span&gt; expects the searching path as its first argument and incorrectly provided it as the second. To fix that I first used &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;C-p&lt;/span&gt; to access the most recent command in the command history (this functionality is not offered by Emacs as such). I then used the kill function &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;(C-w)&lt;/span&gt; to &#34;cut&#34; backwards one word, &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;C-a&lt;/span&gt; to go to the beginning of the line, &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;M-f&lt;/span&gt; to go one word forward, and the yank function &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;(C-y)&lt;/span&gt; to &#34;paste&#34; the most recently killed word (that is, the search path) at the expected place.&lt;br /&gt;&lt;br /&gt;The moral of the story: When you learn about a new shortcut in Emacs, try it also in Bash. There&#39;s a great chance that its behavior will be very similar (if not exactly the same).&lt;br /&gt;&lt;br /&gt;&lt;span style=&#34;font-size: x-small;&#34;&gt;* In case you are not familiar with the Emacs terminology: &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;C&lt;/span&gt; typically means the Ctrl keyboard button, and &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;M&lt;/span&gt; means the Alt keyboard button. As an example&lt;span style=&#34;font-size: x-small;&#34;&gt; &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;M-f&lt;/span&gt; means&lt;/span&gt; pressing first Alt followed by &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;f&lt;/span&gt; (move the prompt one word forward).&lt;/span&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Updating Debian Wheezy breaks GCC</title>
      <link>http://localhost:1313/blog/2011-08-25-updating-debian-wheezy-breaks-gcc/</link>
      <pubDate>Thu, 25 Aug 2011 13:30:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2011-08-25-updating-debian-wheezy-breaks-gcc/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;h4 class=&#34;documentDescription&#34; style=&#34;text-align: left;&#34;&gt;                        &lt;span class=&#34; kssattr-atfieldname-description kssattr-templateId-widgets/textarea kssattr-macro-textarea-field-view inlineEditable&#34; id=&#34;parent-fieldname-description&#34;&gt;            Quick hack to fix it&lt;/span&gt;&lt;/h4&gt;The latest update of Debian testing (aka Wheezy) breaks GCC, both version 4.x and 5.x:&lt;br /&gt;&lt;pre&gt;#include &amp;lt;stdio.h&amp;gt;&lt;br /&gt;&lt;br /&gt;int&lt;br /&gt;main (void)&lt;br /&gt;{&amp;nbsp; &lt;br /&gt;   return 0;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;faif@isengard:~$ gcc --version&lt;br /&gt;gcc (Debian 4.5.3-3) 4.5.3&lt;br /&gt;faif@isengard:~$ gcc -o a a.c&lt;br /&gt;/usr/bin/ld: cannot find -lgcc_s&lt;br /&gt;collect2: ld returned 1 exit status&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&lt;/pre&gt;Well, the thing is that the &#34;missing&#34; library is already installed:&lt;br /&gt;&lt;pre&gt;faif@isengard:~$ find / -name &#39;*libgcc*&#39; 2&amp;gt;/dev/null&lt;br /&gt;/lib/libgcc_s.so.1&lt;/pre&gt;&lt;br /&gt;So, &lt;a class=&#34;external-link&#34; href=&#34;http://www.debian.org/doc/FAQ/ch-software.en.html&#34;&gt;why (see 5.6)&lt;/a&gt; is this happening? Well, that&#39;s because someone forgot to add the  relevant symbolic link. Thus a quick hack to fix the problem is:&lt;br /&gt;&lt;pre&gt;faif@isengard:~$ sudo ln -s /lib/libgcc_s.so.1 /lib/libgcc_s.so&lt;br /&gt;faif@isengard:~$ gcc -o a a.c &amp;amp;&amp;amp; echo voila!&lt;br /&gt;voila!&lt;br /&gt;faif@isengard:~$&lt;/pre&gt;&lt;br /&gt;&lt;div class=&#34;documentDescription&#34;&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Debian Lenny -&gt; Squeeze transition</title>
      <link>http://localhost:1313/blog/2011-07-31-debian-lenny-squeeze-transition/</link>
      <pubDate>Sun, 31 Jul 2011 00:30:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2011-07-31-debian-lenny-squeeze-transition/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;After more than a year of using Debian GNU/Linux stable (Lenny) on my eee, I decided to upgrade it to testing (Squeeze). The reasons are  many. Some of them, are the access to updated versions of many  applications, and the usage of a recent optimized kernel. Anyway, my  system is fine except from a (pretty annoying) bug with gnome-panel when minimizing applications (they are gone instead of iconified), which  seems to be a known issue but I still have not found a good solution&lt;sup&gt;[1]&lt;/sup&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;callout&#34; style=&#34;background-color: white; color: black;&#34;&gt;[1] The problem was solved by simply reinstalling GNOME :)&lt;/div&gt;&lt;div class=&#34;callout&#34;&gt;&lt;br /&gt;&lt;/div&gt;If you are planning to do the same, the following advices might be helpful:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Make sure that you have enough space on all partitions. In my  case, during the installation my root partition became full, which  terminated the process. An easy way to free space on the root partition  (I&#39;m talking about using a separate root partition here) is to remove  outdated kernels and modules (if you don&#39;t use a separate boot  partition). Don&#39;t do this manually, use &lt;code&gt;aptitude search linux-image&lt;/code&gt; and &lt;code&gt;aptitude purge&lt;/code&gt; instead. Other than that, &lt;code&gt;du --human-readable --summarize [directories/files] | sort --reverse --numeric-sort&lt;/code&gt; will be your friend :)&lt;/li&gt;&lt;li&gt;Be aware of the udev &lt;a class=&#34;external-link&#34; href=&#34;http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=571255&#34;&gt;bug&lt;/a&gt;. There is a lot of discussion on the Web, but the best solution I&#39;ve found is on the Debian &lt;a class=&#34;external-link&#34; href=&#34;http://forums.debian.net/viewtopic.php?f=16&amp;amp;t=48996&#34;&gt;forum&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Use &lt;code&gt;aptitude&lt;/code&gt; instead of &lt;code&gt;apt-get&lt;/code&gt;. The steps are very straightforward:&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Replace all the lines in &lt;code&gt;/etc/apt/sources.list&lt;/code&gt; from  lenny to squeeze (or stable to testing, etc.) except from the security  repository. The reason is that security updates are provided faster for  the stable distribution, and it is fine to keep this line as is (no  conflicts).&lt;/li&gt;&lt;li&gt;&lt;code&gt;sudo aptitude update&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;sudo aptitude install apt dpkg aptitude&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;sudo aptitude safe-upgrade&lt;/code&gt;. Warning: This can last for some hours so get a book or go out for a coffee...&lt;/li&gt;&lt;li&gt;Reboot to make sure that the new kernel is used.&lt;/li&gt;&lt;li&gt;&lt;code&gt;sudo aptitude full-upgrade&lt;/code&gt;. Although not necessary, I advice you to switch into single user mode with &lt;code&gt;sudo telinit 1&lt;/code&gt; before executing this step. &lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;br /&gt;Have fun with Debian!&lt;/div&gt;</description>
    </item>
    <item>
      <title>Python code profiling in Debian</title>
      <link>http://localhost:1313/blog/2011-05-08-python-code-profiling-in-debian/</link>
      <pubDate>Sun, 08 May 2011 21:30:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2011-05-08-python-code-profiling-in-debian/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;If you are coding in python, you are probably already familiar with  the profiler concept. The problem is that the python profiler license  fails to comply with the free software guidelines of Debian and  therefore the package belongs to the non-free archive. &#34;So what?&#34;, you  might say. Well, personally I don&#39;t like to use software which belongs  to the non-free archive both for philosophical and technical reasons. An  important technical reason for instance is that Debian does not provide  security updates for the non-free packages.&lt;br /&gt;&lt;br /&gt;The next question is  are there any alternative solutions? Thankfully the answer is yes.  Since python 2.3 we can use the timeit module to test the efficiency of our code. Let me demonstrate the module using a simple example, taken  from Downey&#39;s &#34;Think Python&#34; book (exception handling and the like are  omitted for simplicity).&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/1561608.js?file=fibo-timeit.py&#34;&gt;&lt;/script&gt; &lt;br /&gt;What we want to see here is how much more efficient is the  recursive version of Fibonacci which uses a dictionary as a memo. Let&#39;s  first see the result of the given code snippet (no memo version):&lt;br /&gt;&lt;pre&gt;python3 fibo-timeit.py&lt;br /&gt;113.601776838&lt;/pre&gt;Wow! It took almost 114 seconds the profiler to complete the test... Let&#39;s change the code to use the memo-based function:&lt;br /&gt;&lt;pre&gt;t = Timer(&#39;fibonacci_ef(9)&#39;, &#39;from __main__ import fibonacci_ef&#39;)&lt;/pre&gt;So let&#39;s find out if memoization does indeed worth trying:&lt;br /&gt;&lt;pre&gt;python3 fibo-timeit.py&lt;br /&gt;1.40260386467&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&lt;/pre&gt;Hmmm.... Not bad. Happy Coding :)&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
