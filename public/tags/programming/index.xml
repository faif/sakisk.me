<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Sakis Kasampalis - Personal homepage</title>
    <link>http://localhost:1313/tags/programming/</link>
    <description>Recent content in Programming on Sakis Kasampalis - Personal homepage</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 11 Sep 2021 13:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Let&#39;s plant some UML</title>
      <link>http://localhost:1313/blog/2021-09-11-plantuml/</link>
      <pubDate>Sat, 11 Sep 2021 13:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2021-09-11-plantuml/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/uml.png&#34; alt=&#34;UML class diagram&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Are you using UML? The Unified Modeling language is a very useful notation, especially when it comes to explaining the structure and behavior of object-oriented systems. It is language-independent and offers a wide range of models/diagrams that cover the different aspects (static, dynamic, threading, etc.) of a system.&lt;/p&gt;&#xA;&lt;p&gt;I like UML but I was never happy with the tooling around it. My biggest objection is that most of the UML tools use binary formats for storing the models, which makes version-controlling and collaborating for creating them impossible. That is against the nature of modern software development, which should be incremental and based on a team effort. Another thing that I don&amp;rsquo;t like is spending time on the layout of those models (e.g. rearranging boxes because they are not readable). I&amp;rsquo;d rather have the tool take care of this automatically, and only if I&amp;rsquo;m picky about something, e.g. the position of a specific box, to do it myself.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Don&#39;t use a real programming language</title>
      <link>http://localhost:1313/blog/2021-06-21-real-languages/</link>
      <pubDate>Mon, 21 Jun 2021 17:40:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2021-06-21-real-languages/</guid>
      <description>&lt;p&gt;I like Prolog. I think that it&amp;rsquo;s a brilliant tool. And not purely educational, unlike what many people think. You can actually use it to build real, useful, and practical applications: sudoku solvers, adventure games, formal logical systems, and a lot more. It might not be the best tool for developing AAA games and real-time systems, but that doesn&amp;rsquo;t make it useless. I discovered Prolog during university, and I appreciate it since then.&lt;/p&gt;</description>
    </item>
    <item>
      <title>One catch to rule them all</title>
      <link>http://localhost:1313/blog/2020-08-19-one-catch/</link>
      <pubDate>Wed, 19 Aug 2020 20:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2020-08-19-one-catch/</guid>
      <description>&lt;p&gt;When writing code, we need to handle errors. What happens if you are trying to read a corrupt file? Or if the network goes down while receiving data? The programming language runtime will try to&#xA;give you an error message that makes sense, but that doesn&amp;rsquo;t mean that this is what you want to show to your application/API users.&lt;/p&gt;&#xA;&lt;p&gt;There are two traditional ways of doing error handling. One is using error codes. That means returning a code (usually a number) to the users when something goes wrong, and let them interpret&#xA;that number using a lookup table. In languages that support exceptions, the recommended way is using exception handling.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Playing with microcontrollers</title>
      <link>http://localhost:1313/blog/2015-03-15-playing-with-microcontrollers/</link>
      <pubDate>Sun, 15 Mar 2015 18:35:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2015-03-15-playing-with-microcontrollers/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;The last training course that I followed was about programming microcontrollers. The course was given by Leon van Snippenberg, who has very good expertise in microcontrollers.&lt;br /&gt;&lt;br /&gt;For the practical part of the course we used the Microchip dsPIC33F, a 16-bit architecture 40 MHZ microcontroller (system on a chip solution). I admit that I&#39;m not very fond of this proprietary platform, so I enjoyed the theoretical part of the course much more than the practical. I would be more excited if we have used an open hardware solution like arduino, Raspberry Pi, or something comparable.&lt;br /&gt;&lt;br /&gt;A few highlights from the course:&lt;br /&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;A three-operand assembly instruction does not necessarily mean that three registers are used. For example &lt;span style=&#34;font-family: Courier New, Courier, monospace;&#34;&gt;ADD W0, W1, W0&lt;/span&gt; uses only one register.&lt;/li&gt;&lt;li&gt;Most microcontrollers use the Harvard instead of the&amp;nbsp;&lt;span style=&#34;color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22px;&#34;&gt;Von Neumann&lt;/span&gt;&amp;nbsp;architecture. This means that there are two distinct address buses, as well as two data buses (instead of one address and one data bus).&lt;/li&gt;&lt;li&gt;When writing code in assembly we should avoid thinking about code optimisation, since the code is usually very fast to execute (but very slow to produce).&lt;/li&gt;&lt;li&gt;A common problem when programming microcontrollers is &lt;a href=&#34;http://www.piclist.com/techref/readmodwrite.htm&#34;&gt;read-modify-write&lt;/a&gt;. One way to solve it is using shadow registers.&lt;/li&gt;&lt;li&gt;When programming a microcontroller using a C interface and interrupts, it is very important to use the &lt;span style=&#34;font-family: Courier New, Courier, monospace;&#34;&gt;volatile&lt;/span&gt; keyword to disable optimisations that might remove code that seems to be dead but is actually used. Because of that, it is also very important to test the code with all compiler optimisation levels enabled, to ensure that it doesn&#39;t break.&lt;/li&gt;&lt;li&gt;The hardware timers of a platform do not need to follow the same architecture with the processor. For example a platform might use a 16-bit processor with 32-bit timers.&lt;/li&gt;&lt;li&gt;Buffers and interrupts are used to solve communication problems between different devices (e.g. a computer communicating with a microcontroller using the serial port).&lt;/li&gt;&lt;li&gt;When dealing with non-deterministic problems, disabling interrupts is the most favoured solution.&lt;/li&gt;&lt;li&gt;Using a real-time operating system (RTOS) simplifies programming, because we avoid the need to write complex state machines and custom schedulers (those problems are already solved in the RTOS).&lt;/li&gt;&lt;li&gt;Multicore support in RTOS is a challenge (unsolved problem?).&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;We (me and my colleague) challenged Leon by questioning why would one prefer a much more expensive solution like the dsPIC* family of Microchip instead of Raspberry Pi or arduino. The price of the latest Pi is unbeatable. The response was that we should use whatever fits our purpose, and that the Pi manages to achieve such a low price because its makers can estimate in advance the minimum numbers of units that will be sold. Those manufacturing deals are critical in forming the end price of a prototyping platform.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;So far I only own an mbed LPC1768 and I&#39;m very satisfied with it. I hope that I&#39;ll build some more advanced prototypes in the future, but you have to start from something. I began with flashing LEDs&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;889&#34; mozallowfullscreen=&#34;&#34; src=&#34;https://player.vimeo.com/video/120307094&#34; webkitallowfullscreen=&#34;&#34; width=&#34;500&#34;&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Continued with adding some basic components like a button&lt;br /&gt;&lt;br /&gt;&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;889&#34; mozallowfullscreen=&#34;&#34; src=&#34;https://player.vimeo.com/video/120957456&#34; webkitallowfullscreen=&#34;&#34; width=&#34;500&#34;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;br /&gt;And at some point I built my first practical prototype: a darkness-activated LED&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;889&#34; mozallowfullscreen=&#34;&#34; src=&#34;https://player.vimeo.com/video/120970019&#34; webkitallowfullscreen=&#34;&#34; width=&#34;500&#34;&gt;&lt;/iframe&gt; &lt;br /&gt;Isn&#39;t that nice? In my future posts the plan is to spend more time on explaining the code of prototypes like the last one. For now you can check my &lt;a href=&#34;http://developer.mbed.org/users/faif/&#34;&gt;mbed repository&lt;/a&gt; page.&lt;/div&gt;</description>
    </item>
    <item>
      <title>Joy of Coding 2014 - My impressions</title>
      <link>http://localhost:1313/blog/2014-03-08-joy-of-coding-2014-my-impressions/</link>
      <pubDate>Sat, 08 Mar 2014 15:49:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2014-03-08-joy-of-coding-2014-my-impressions/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;I haven&#39;t been to a conference for years, but this year I decided to join &lt;a href=&#34;http://joyofcoding.org/&#34;&gt;Joy of Coding&lt;/a&gt;. And I don&#39;t regret it!&lt;br /&gt;&lt;br /&gt;The conference started with a keynote by Dan North: &#34;Accelerating Agile: hyper-performing       without the hype&#34;. Dan described what he learnt about Agile while working in the trading domain. The most interesting advice that I kept from his presentation is that being a good programmer is not enough: What really makes a difference is to become a domain expert. For example, if you are working as a stock market programmer, your superior programming skills don&#39;t matter if you have no clue about what the numbers mean.&lt;br /&gt;&lt;br /&gt;Next, I joined the &#34;Let Me Graph That For You: An Introduction to Neo4j&#34; workshop, by Ian Robinson. The first part of the workshop was an introduction to Graph Databases and Neo4j. At the second part we used Neo4j and its query language Cypher to create a few graphs and query them. I am impressed by how easy is to get started with Neo4j. I find its web interface very intuitive. We had a few questions for Ian (S = Sakis, I = Ian, O = Other conference participant):&lt;br /&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;S: Is there any relation between Neo4j and RDF?&lt;/li&gt;&lt;li&gt;I: Not really. In RDF you typically end up with more connections because everything is modelled as a triple. But there are libraries that can extract a Neo4j graph as RDF.&lt;/li&gt;&lt;li&gt;S: Are all the common graph algorithms (eg. SPF, BFS, Bellman-Ford, etc.) available?&lt;/li&gt;&lt;li&gt;I: Most of the well-known graph algorithms are available, and furthermore there is a Java API that is exposed and can be extended with your own algorithms.&lt;/li&gt;&lt;li&gt;S: Is Cypher case-sensitive?&lt;/li&gt;&lt;li&gt;I: Partly. The identifiers of a query are case-sensitive, but the rest parts of the query aren&#39;t.&lt;/li&gt;&lt;li&gt;O: Are there any cases where RDBMS should still be used instead of Graph Databases?&lt;/li&gt;&lt;li&gt;I: If you have tabular data and you want to focus on set theory operations (eg. union, intersection, etc.) an RDBMS is preferable.&lt;/li&gt;&lt;/ul&gt;&amp;nbsp;I&#39;ll definitely look more into Graph Databases and Neo4j.&lt;br /&gt;&lt;br /&gt;The next keynote was &#34;Contravariance is the Dual of Covariance&#34;, by Erik Meijer. I&#39;m not very familiar with Reactive Programming and Rx, thus I couldn&#39;t follow everything. But at least I enjoyed the jokes and the funny examples that Erik used. Using Scala as a reference, he explained the meanings of covariance and contra-variance, and showed how they can be used to create reusable code.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;The second workshop that I joined was &#34;An Introduction to Actors and Concurrency&#34;, by Michel Rijnders and Matthijs Ooms. The first part of the workshop was basically an introduction to Erlang, thus nothing special if you are familiar with Prolog. The fun started at the second part, where we experienced how straightforward is to communicate asynchronously through the network using Erlang&#39;s actor model and message-passing primitives.&lt;br /&gt;&lt;br /&gt;Last but not least was the keynote &#34;The Tao, of the Joy, of Coding&#34;, by Dick Wall. This was by far the most inspiring keynote. Dick, using ancient Chinese philosophy as a reference, talked about many interesting topics, including programming honesty (saying &#34;I don&#39;t understand this&#34; and learning from your colleagues is a good thing), looking back as a programmer (eg. if you used your programming skills to find a cure for a disease you really changed the world), and getting a life (being proud about working until 2 AM is a very bad mentality).&lt;br /&gt;&lt;br /&gt;All in all, a great conference that I will keep in my agenda every year!&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Numerical string sorting in Ruby</title>
      <link>http://localhost:1313/blog/2013-06-15-numeric-string-sorting-in-ruby/</link>
      <pubDate>Sat, 15 Jun 2013 03:43:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2013-06-15-numeric-string-sorting-in-ruby/</guid>
      <description>The problem: You have an unsorted array of strings (product codes, area codes, etc.) containing both letters and numbers (for example &#39;A28&#39;, &#39;A3&#39;, &#39;A1&#39;, etc.) and you want to sort them numerically (that is, &#39;A1&#39;, &#39;A2&#39;, ..., &#39;An&#39;). Ruby offers a &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;sort&lt;/span&gt; method, so let&#39;s see what it does...&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/faif/5786178.js?file=sort.rb&#34;&gt;&lt;/script&gt; Nope, that&#39;s not what I want. But no worries, &lt;a href=&#34;http://ruby-doc.org/core-1.8.6/Enumerable.html&#34;&gt;enumerable&lt;/a&gt; is here to help me. Enumerable is a great mixin inspired by functional programming. Functional programming relies heavily on data transformations: The input is a data structure, we transform the data of the structure by applying one or more functions, and the output is a new data structure. In this particular example the input is an unsorted array of strings, I want to apply a function that will change their order, and the output will be a new array with the strings sorted numerically.&lt;br /&gt;&lt;br /&gt;What is the data transformation in this case? A string is a data structure that can be treated as an array in most programming languages, and ruby is not an exception. Therefore the problem can be solved by using as a sorting key the numeric part of a string and treating that key as a number.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/faif/5786178.js?file=sort_by.rb&#34;&gt;&lt;/script&gt; And we are done :)</description>
    </item>
    <item>
      <title>Data Structures and Algorithms 101 part two: Queues</title>
      <link>http://localhost:1313/blog/2013-01-04-data-structures-and-algorithms-101-part/</link>
      <pubDate>Fri, 04 Jan 2013 21:40:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2013-01-04-data-structures-and-algorithms-101-part/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Definition &lt;/h3&gt;Think of a queue as a line of people waiting to buy a ticket for an event (music concert, film, etc.).&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-KwTq6z26_yo/UNyrDwvyqPI/AAAAAAAAAE8/SImW5YezxFo/s1600/line.jpg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://4.bp.blogspot.com/-KwTq6z26_yo/UNyrDwvyqPI/AAAAAAAAAE8/SImW5YezxFo/s400/line.jpg&#34; height=&#34;300&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Photo Credit: Bryan Bedder/Getty Images for Tribeca Film Festival&lt;/td&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;&lt;div style=&#34;background-color: white; border: medium none; color: black; overflow: hidden; text-align: left; text-decoration: none;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;In the queue shown at the picture, a person who just arrives to buy a ticket goes to the left side (unless cheating) and a person who just bought a ticket leaves the queue from the right side (to avoid conflicts).&lt;br /&gt;&lt;br /&gt;In queue terminology, adding a new item means &lt;b&gt;enqueuing&lt;/b&gt; it to one side of the queue (either side is fine), while removing an item means &lt;b&gt;dequeuing&lt;/b&gt;&lt;b&gt;&lt;/b&gt; it from the opposite side of the queue.&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-6Nzg7D6jK4I/UNy5rhd0LGI/AAAAAAAAAFM/beBuJgq65pk/s1600/queue.jpg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://3.bp.blogspot.com/-6Nzg7D6jK4I/UNy5rhd0LGI/AAAAAAAAAFM/beBuJgq65pk/s400/queue.jpg&#34; height=&#34;98&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Fundamental queue operations&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;The first item that enters a queue is the first item that exits the queue (first come-first served). For that reason, we call queues &lt;b&gt;First In First Out (FIFO)&lt;/b&gt; data structures.&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Usage and performance&lt;/h3&gt;&lt;div style=&#34;text-align: left;&#34;&gt;Queues have many &lt;a href=&#34;http://introcs.cs.princeton.edu/java/43stack/&#34;&gt;practical applications&lt;/a&gt; (search for &#34;applications&#34;). A simple example is printing documents. Documents are sent to the printer using a first come-first served policy (let&#39;s skip priorities for simplicity). If the printer is busy and we are trying to print a document, it will enqueue it and begin printing it only after it has finished with printing (dequeuing) all the existing documents.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;Enqueuing and dequeuing items in a queue takes &lt;b&gt;constant time - O(1)&lt;/b&gt;.  On the other hand, queues (like &lt;a href=&#34;http://sakiskasampalis.blogspot.nl/2012/09/data-structures-and-algorithms-101-part.html&#34;&gt;stacks&lt;/a&gt;) are not optimized for searching or adding/removing items from arbitrary positions. These operations take &lt;b&gt;linear time - O(n)&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Implementation&lt;/h3&gt;Like my &lt;a href=&#34;http://sakiskasampalis.blogspot.nl/2012/09/data-structures-and-algorithms-101-part.html&#34;&gt;stack&lt;/a&gt; implementation, I will use python and the built-in list data structure to implement a queue. Notice the similarities between stacks and queues. The only difference is the way the elements are accessed. &lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;span style=&#34;font-family: Verdana,sans-serif;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;script src=&#34;https://gist.github.com/4436181.js?file=myqueue.py&#34;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;div style=&#34;text-align: left;&#34;&gt;If you are not familiar with &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;__iter__&lt;/span&gt; and &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;__next__ &lt;/span&gt;they are special functions for &lt;a href=&#34;http://www.diveintopython3.net/iterators.html&#34;&gt;implementing iterators in python&lt;/a&gt;. In short, we can now say &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;for i in mq&lt;/span&gt; where &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;mq&lt;/span&gt; is an instance of &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;myqueue&lt;/span&gt;. Quite convenient! I am going to use it in the sample problem.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Sample problem&lt;/h3&gt;Implement a song playlist for a jukebox/media player, etc. New songs are added to the back (left side) of the playlist. The next song to be played is picked from the front (right side) of the playlist.&lt;/div&gt;&lt;br /&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;script src=&#34;https://gist.github.com/4436181.js?file=playlist.py&#34;&gt;&lt;/script&gt;&lt;/div&gt;Obviously that&#39;s not a &#34;real&#34; playlist since it doesn&#39;t track time so that can be automatically triggered after the end of a song. That&#39;s left as an exercise for you dear hacker. Enjoy!&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;References&lt;/h3&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;&lt;i&gt;Mark Pilgrim. &lt;/i&gt;&lt;a href=&#34;http://getpython3.com/diveintopython3/&#34;&gt;Dive Into Python 3&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Robert Sedgewick, Kevin Wayne. &lt;/i&gt;&lt;a href=&#34;http://introcs.cs.princeton.edu/java/43stack/&#34;&gt;Stacks and Queues&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Interview question: Remove duplicate characters</title>
      <link>http://localhost:1313/blog/2012-10-06-interview-question-remove-duplicate/</link>
      <pubDate>Sat, 06 Oct 2012 22:36:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2012-10-06-interview-question-remove-duplicate/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;Let&#39;s assume that we are asked to solve the following problem in a programming interview: &#34;Write a function that removes all duplicate characters from a string&#34;. Piece of cake, you might think. Surely they are not asking us to write a Web Browser but there must be a reason for that.&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Test first&lt;/h3&gt;The interview&#39;s time is limited. But this doesn&#39;t mean that we should start writing whatever implementation comes on to mind directly. Initially we should at least show to the interviewer that we are familiar with techniques such as &lt;a href=&#34;https://en.wikipedia.org/wiki/Test-driven_development&#34;&gt;Test Driven Development&lt;/a&gt; (TDD). The test cases are useful even if the interviewer is not interested in seeing unit tests. So let&#39;s write them down. We should make sure that our function:&lt;br /&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;Doesn&#39;t fail with empty strings (so &#34;&#34; is valid input)&lt;/li&gt;&lt;li&gt;Returns a string of length = 1 as is (for example &#34;a&#34; is returned as &#34;a&#34;)&lt;/li&gt;&lt;li&gt;Returns a string of length = 2 with two same characters as a string with a single character (for example &#34;aa&#34; is returned as &#34;a&#34;)&lt;/li&gt;&lt;li&gt;Removes all the duplicate characters (for example &#34;anakonda&#34; becomes either &#34;ankod&#34; or &#34;konda&#34; depending on which indexes of duplicate characters we choose to remove ; I&#39;ll initially use the second case and later switch to the first one)&lt;/li&gt;&lt;li&gt;Returns a string with no duplicate characters as is (for example &#34;the&#34; is returned as &#34;the&#34;) &lt;/li&gt;&lt;/ul&gt;It&#39;s fine if we forget some test cases, we can extend them later. Now, let&#39;s assume that the interviewer insists on actually implementing the tests. I&#39;ll use python, because writing unit tests in python is straightforward -- and I obviously like the language ;)&lt;br /&gt;&lt;br /&gt;First we need a stub version of the function. Our function, called &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;remDupl&lt;/span&gt; will accept a string as input and return a copy of the input string without duplicate characters.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/3829456.js?file=strutils.py&#34;&gt;&lt;/script&gt;Now we are ready to write our test.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/3829456.js?file=testremdupl.py&#34;&gt;&lt;/script&gt; Our test is already useful. We can make sure that it fails and then write the main logic of our function until it passes the test.&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-N1SisjXQnTM/UG3wDaLwrCI/AAAAAAAAADQ/wkRhaXQTmlo/s1600/test.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;195&#34; src=&#34;http://3.bp.blogspot.com/-N1SisjXQnTM/UG3wDaLwrCI/AAAAAAAAADQ/wkRhaXQTmlo/s400/test.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Our test fails, as expected&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;The naive implementation&lt;/h3&gt;&lt;div style=&#34;text-align: left;&#34;&gt;So far so good. It&#39;s time to start implementing our function. Since the time is against us, the first step is to follow a naive approach. Although the first implementation might not be the most efficient and clean, it&#39;s important to get something working. If there&#39;s enough time we can improve it later. If there&#39;s no time for writing an improved version, we can still discuss with the interviewer the pros and cons of our naive implementation.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src=&#34;https://gist.github.com/3829456.js?file=strutils2.py&#34;&gt;&lt;/script&gt; First of all, does our function behave as expected?&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://1.bp.blogspot.com/-IBesi5_D_Jw/UG8-y2KonEI/AAAAAAAAADg/LW41d-h7YpU/s1600/testrem.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;90&#34; src=&#34;http://1.bp.blogspot.com/-IBesi5_D_Jw/UG8-y2KonEI/AAAAAAAAADg/LW41d-h7YpU/s400/testrem.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Test result of the naive implementation&lt;/td&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;&lt;br /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;Looks good :)&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Improving the code&lt;/h3&gt;What&#39;s the time complexity of our algorithm? It&#39;s O(n), since we have to  iterate through the whole string. Even if it&#39;s hard to improve the time  complexity, we can do better by writing our code in more idiomatic  python. Python offers a set data structure which looks like a good candidate since all items in a set are unique by definition. But unfortunately the items of a set have no particular order therefore we cannot simply create a set out of our input string. We need a trick to preserve ordering. Combining the set with a generator expression and converting it to a string gives the expected result.&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-96nQz1pLT6o/UHBqXh02YEI/AAAAAAAAAEA/s_062Zt0k80/s1600/ankod.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;br /&gt;&lt;/a&gt;&lt;/div&gt;&lt;script src=&#34;https://gist.github.com/3829456.js?file=strutils3.py&#34;&gt;&lt;/script&gt; Nice, let&#39;s test our changes.&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-96nQz1pLT6o/UHBqXh02YEI/AAAAAAAAAEA/s_062Zt0k80/s1600/ankod.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;203&#34; src=&#34;http://3.bp.blogspot.com/-96nQz1pLT6o/UHBqXh02YEI/AAAAAAAAAEA/s_062Zt0k80/s400/ankod.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;The test fails, only the first occurrence of a character goes into the set&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-96nQz1pLT6o/UHBqXh02YEI/AAAAAAAAAEA/s_062Zt0k80/s1600/ankod.png&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;/a&gt; &lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;Hmmm, there&#39;s something going wrong here. We need to update our test case, since the new code keeps only the first occurrence of each character (thus &#34;anakonda&#34; becomes &#34;ankod&#34; instead of &#34;konda&#34; that used to be when &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;replace&lt;/span&gt; was used).&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/3829456.js?file=testremdupl2.py&#34;&gt;&lt;/script&gt; Now that we updated the test case, our code should pass the tests. Let&#39;s verify.&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-ej7FZrKWicI/UHBux3SE3JI/AAAAAAAAAEQ/KAPCu1OfUyg/s1600/pass.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;88&#34; src=&#34;http://3.bp.blogspot.com/-ej7FZrKWicI/UHBux3SE3JI/AAAAAAAAAEQ/KAPCu1OfUyg/s400/pass.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;The new code passes all the tests&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;And we are done!&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Idio(ma)tic?&lt;/h3&gt;The new version of our function is more compact and pythonic, but does it really perform better that the first version? Since both algorithms are O(n), the details are in the data structures and one way to find that out is by using a &lt;a href=&#34;http://docs.python.org/library/profile.html&#34;&gt;profiler&lt;/a&gt;. So let&#39;s see what&#39;s the performance when executing each version of our function with 600.000 strings as input.&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-k30NiP2nIZI/UHCLfmXZB_I/AAAAAAAAAEo/F_ABZnaCXCA/s1600/profile.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;223&#34; src=&#34;http://4.bp.blogspot.com/-k30NiP2nIZI/UHCLfmXZB_I/AAAAAAAAAEo/F_ABZnaCXCA/s400/profile.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Profiling shows that the naive implementation performs better&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;The second version is a backward step regarding performance. Profiling shows that the generator expression and the join function have the biggest negative impact. Although list comprehensions and generator expressions are the power of python and are optimized for performance, in this particular case the fact that we actually need an ordered string as the output result does not help.&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;References&lt;/h3&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;&lt;i&gt;wikipedia.&lt;/i&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Test-driven_development&#34;&gt;Test Driven Development&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;python.org. &lt;/i&gt;&lt;a href=&#34;http://docs.python.org/library/profile.html&#34;&gt;Profilers&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Mark Pilgrim. &lt;/i&gt;&lt;a href=&#34;http://getpython3.com/diveintopython3/&#34;&gt;Dive Into Python 3&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Data Structures and Algorithms 101 part one: Stacks</title>
      <link>http://localhost:1313/blog/2012-09-23-data-structures-and-algorithms-101-part/</link>
      <pubDate>Sun, 23 Sep 2012 20:59:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2012-09-23-data-structures-and-algorithms-101-part/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Rationale (boring)&lt;/h3&gt;I decided to write down some notes about common (and maybe less common) Data Structures and Algorithms. This is the first part, covering stacks.&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Definition&lt;/h3&gt;Think of a stack as a pile of books.&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-89gwMK_cF6Y/UF9MEcR1B0I/AAAAAAAAACw/gNWHlhOk1oA/s1600/2012-09-22+20.18.02.jpg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;107&#34; src=&#34;http://3.bp.blogspot.com/-89gwMK_cF6Y/UF9MEcR1B0I/AAAAAAAAACw/gNWHlhOk1oA/s320/2012-09-22+20.18.02.jpg&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;A stack looks like a pile of books&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;If I want to study &#34;Modern Operating Systems&#34;, I first need to take away all the books that are on top of it (both &#34;ARM microcontrollers&#34; and &#34;The UNIX programming environment&#34;). Conversely, whenever I finish studying a book the easiest place to put it is on top of the most top book (thus above &#34;ARM microcontrollers&#34;).&lt;br /&gt;&lt;br /&gt;In stack terminology, adding a new item means &lt;b&gt;pushing&lt;/b&gt; it to the top of the stack, while removing an item means &lt;b&gt;popping&lt;/b&gt; it from the top of the stack.&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-rZVogzJQJV0/UF9Sf2b_guI/AAAAAAAAADA/6WDtTbTDBZk/s1600/2012-09-22+20.27.57.jpg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;265&#34; src=&#34;http://4.bp.blogspot.com/-rZVogzJQJV0/UF9Sf2b_guI/AAAAAAAAADA/6WDtTbTDBZk/s320/2012-09-22+20.27.57.jpg&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Fundamental stack operations&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;Stacks provide direct access only to their top element, which happens to also be the last (most recent) element that was pushed in the stack. For that reason, we call stacks &lt;b&gt;Last In First Out (LIFO)&lt;/b&gt; data structures.&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Usage and performance&lt;/h3&gt;Why are stacks useful? There are numerous &lt;a href=&#34;https://en.wikipedia.org/wiki/Stack_%28data_structure%29#Applications&#34;&gt;practical applications&lt;/a&gt; of stacks on Wikipedia. A simple example is adding two numbers using a calculator. Implementation details of such an application are outside the context of this article.&lt;br /&gt;&lt;br /&gt;The good thing about stacks is that pushing and popping an item is very fast. Specifically, pushing and popping are &lt;a href=&#34;http://stackoverflow.com/questions/487258/plain-english-explanation-of-big-o&#34;&gt;constant time - O(1)&lt;/a&gt; operations. On the other hand, stacks are not optimized for searching or adding/removing an item from an arbitrary position. Searching and adding/removing from arbitrary stack positions are &lt;b&gt;linear time - O(n)&lt;/b&gt; operations.&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Implementation&lt;/h3&gt;Stacks are usually implemented using arrays, but since I am using python I will use the built-in list data structure for holding and accessing the items of the stack.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/3784185.js?file=stack.py&#34;&gt;&lt;/script&gt; If &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;[::-1]&lt;/span&gt; looks strange to you, it&#39;s a nice way of using &lt;a href=&#34;http://docs.python.org/release/2.3/whatsnew/section-slices.html&#34;&gt;extended slices&lt;/a&gt; for reversing a sequence. In this representation, the top element of the stack is the left-most element of the printed list. The &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;peek&lt;/span&gt; (aka &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;top&lt;/span&gt;) function returns the top element of the stack without removing it.&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Sample problem&lt;/h3&gt;&lt;div style=&#34;text-align: left;&#34;&gt;Implement a function that sorts a stack in ascending order. You are only allowed to use an extra stack and the fundamental operations &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;push, pop, peek,&lt;/span&gt; and &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;size&lt;/span&gt;.&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;The algorithm presented here sorts the stack in &lt;b&gt;quadratic - O(n^2)&lt;/b&gt; time. The idea is to pop an element from the unsorted stack and push it to the &#34;right&#34; position of the sorted stack. Exhaustive error checking (for example ensuring that unsorted is a stack, etc.) is omitted for simplicity.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/3784185.js?file=sortstack.py&#34;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;Since we only have access to the top item, when the top item of the unsorted stack cannot be pushed to sorted stack (because it violates the sorting order), we move all the items of the sorted stack to the unsorted stack until the &#34;right&#34; position is found.&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;&amp;nbsp;References&lt;/h3&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;&lt;i&gt;Wikipedia.&lt;/i&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Stack_%28data_structure%29&#34;&gt;Stack (abstract data type)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;StackOverflow.&lt;/i&gt; &lt;a href=&#34;http://stackoverflow.com/questions/487258/plain-english-explanation-of-big-o&#34;&gt;Plain English explanation of big O&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Gayle Laakman.&lt;/i&gt; &lt;a href=&#34;http://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/098478280X?tag=duckduckgo-canonical-20&#34;&gt;Cracking the Coding Interview&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>What we can learn from the space guys</title>
      <link>http://localhost:1313/blog/2012-07-18-what-we-can-learn-from-space-guys/</link>
      <pubDate>Wed, 18 Jul 2012 21:48:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2012-07-18-what-we-can-learn-from-space-guys/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;The &lt;a href=&#34;http://www.se-radio.net/2008/06/episode-100-software-in-space/&#34;&gt;software in space&lt;/a&gt; podcast (by se-radio) put me into thoughts about finding ways to improve code quality. First of all, I think that using &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;void&lt;/span&gt; methods in languages that support exceptions is not very useful. Instead, I prefer using idioms like the &lt;a href=&#34;http://pragprog.com/magazines/2012-04/the-pragmatic-defense&#34;&gt;boolean return value and single exit point&lt;/a&gt;. Together with design by contract and sufficient testing coverage, mistakes like the Ariane 5 crash can be discovered and eliminated at an early phase -- before it&#39;s too late...&lt;br /&gt;&lt;br /&gt;The fact that there are usually two discrete programming teams developing the same space software part using different programming languages (and members with different mindsets) is extremely important. It focuses on the importance of the human factor and emphasizes on using different tools to solve the same problem as a way of writing &#34;better&#34; (for example faster, with less bugs, cleaner, more fault tolerant, etc.) code.&lt;br /&gt;&lt;br /&gt;This is aligned with one of my basic principles: Programming languages are just tools, and the right tool should be used for the right job. Dogmatic decisions increase the potential of failure.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>On building a platform</title>
      <link>http://localhost:1313/blog/2012-07-12-on-building-platform/</link>
      <pubDate>Thu, 12 Jul 2012 20:29:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2012-07-12-on-building-platform/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;The se-radio podcast about &lt;a href=&#34;http://www.se-radio.net/2008/10/episode-113-building-platforms-with-jeff-mcaffer/&#34;&gt;building a platform&lt;/a&gt; contains many useful tips, but the most important IMHO are (1) the importance of the API, (2) &#34;eating your own dog food&#34;.&lt;br /&gt;&lt;br /&gt;The API should be easy to use. This means that it should be intuitive for the users, which in this case are programmers. Note that the developers of the API should not decide about its flexibility and easiness. That should be decided only by the users, so the design of an API is guided by the programmers who use it. Good code documentation is also important, and in this case tools like doxygen are invaluable. Finally, backward compatibility is crucial.&lt;br /&gt;&lt;br /&gt;&#34;Eating your own dog food&#34; in this case means using your own platform, either to extend it or to develop customer products (or by being just the end customer). I find this extremely important, because when programmers develop products that they never use or don&#39;t find useful for themselves, the quality of the product is low. This is related with the &lt;a href=&#34;https://en.wikipedia.org/wiki/The_Cathedral_and_the_Bazaar#Guidelines_for_creating_good_open_source_software&#34;&gt;&#34;Scratching an itch&#34;&lt;/a&gt; topic (see guidelines 1 and 18). Examples: Eclipse developers use Eclipse to develop it further, Apple developers use the stuff that they developed in their daily life, etc.&lt;/div&gt;</description>
    </item>
    <item>
      <title>Why Erlang matters</title>
      <link>http://localhost:1313/blog/2012-07-05-why-erlang-matters/</link>
      <pubDate>Thu, 05 Jul 2012 21:38:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2012-07-05-why-erlang-matters/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;I usually go at work by bicycle and to spend my cycling time efficiently I listen to the podcasts of&amp;nbsp; &lt;a href=&#34;http://www.se-radio.net/&#34;&gt;se-radio&lt;/a&gt;. I have this idea of sharing my thoughts about the things being said in the podcasts but I&#39;m not sure if it is going to work well. But anyway...&lt;br /&gt;&lt;br /&gt;Today&#39;s podcast was about &lt;a href=&#34;http://www.se-radio.net/2008/03/episode-89-joe-armstrong-on-erlang/&#34;&gt;Erlang&lt;/a&gt;. Erlang is a functional language which started as a Prolog derivative focusing on solving fault tolerance problems in telecommunications systems. Compared to its initial version, Erlang has evolved a lot. The performance is much better, it uses a dedicated virtual machine, and offers a framework (OTP) for developing real-time fault tolerant systems.&lt;br /&gt;&lt;br /&gt;Erlang focuses on fault tolerance using lightweight processes that communicate with each other using message passing primitives. Each process is independent from the rest, like processes in operating systems. There is no shared memory or threads, so&amp;nbsp; no need for deadlock detection/avoidance techniques, mutexes, conditional variables, and the like.&lt;br /&gt;&lt;br /&gt;Another notable feature is the &#34;let it crash&#34; philosophy. Since processes are independent, when a process crashes the rest remain unaffected. This gives the option of using special processes for monitoring the faulty processes. It&#39;s even possible to debug and replace faults in runtime.&lt;br /&gt;&lt;br /&gt;Now that single processors have reached their limits, Erlang is a great option for making efficient use of multi-core CPUs without messing with threads and hard to debug deadlocks.&lt;br /&gt;&lt;br /&gt;Obviously the Prolog-like syntax of Erlang is keeping some programmers away, but that&#39;s not a serious reason for not giving it a try.&lt;/div&gt;</description>
    </item>
    <item>
      <title>Do you evaluate your potential employers?</title>
      <link>http://localhost:1313/blog/2012-06-03-are-you-evaluating-your-potential/</link>
      <pubDate>Sun, 03 Jun 2012 17:29:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2012-06-03-are-you-evaluating-your-potential/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;The prolonged financial crisis that we are living has caused an enormous growth in unemployment rates all over the world. Software Engineers and Programmers are by no means an exception to that rule, especially fresh graduates with no or little professional experience. But to find a job (or search for a better one) we need to (1) sit for (usually many) interviews, (2) find if there&#39;s a match between what we are looking and what the employer can provide us.&lt;br /&gt;&lt;br /&gt;Being interviewed is unfortunately no fun in most cases. The employers are looking for the perfect candidate, thus they are trying to push us as much as possible: They check our programming and software engineering skills, our communication and social skills, our logic and problem-solving skills, our future plans, etc. (the list can go forever).&lt;br /&gt;&lt;br /&gt;But what do the employers provide in exchange? A good salary? That&#39;s obviously important, but I don&#39;t think it&#39;s enough. If I have to devote at least 8 hours of my life everyday on working for someone, a good salary is not sufficient. Most employers might use some buzzwords (agile, scrum, TDD, etc.)&amp;nbsp; during an interview for convincing us to work for them. Unfortunately reality can be different, and we only find out when it&#39;s too late...&lt;br /&gt;&lt;br /&gt;So what can we do to avoid that situation? It&#39;s simple: We can also ask questions. The next time that your potential employer is going to ask you if you have any questions, surprise her by asking interesting questions similar (but not necessarily the same) to the questions of &lt;a href=&#34;http://www.joelonsoftware.com/articles/fog0000000043.html&#34;&gt;The Joel Test&lt;/a&gt;:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Do you use a distributed version control system?&lt;/li&gt;&lt;li&gt;Do you have a bug database?&amp;nbsp; &lt;/li&gt;&lt;li&gt;Can I make a build in one step using your build system?  &lt;/li&gt;&lt;li&gt;Can I suggest new programming languages/practices? &lt;/li&gt;&lt;li&gt;Do you use an agile methodology?&lt;/li&gt;&lt;li&gt;Do programmers have quiet working conditions?  &lt;/li&gt;&lt;li&gt;Do you have testers?&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;In contrast to Joel&#39;s Test, simple yes/no answers should not be acceptable since the employer might not be 100% honest...&lt;/div&gt;</description>
    </item>
    <item>
      <title>9series: Introduction and chmod</title>
      <link>http://localhost:1313/blog/2012-01-29-9series-introduction-and-chmod/</link>
      <pubDate>Sun, 29 Jan 2012 20:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2012-01-29-9series-introduction-and-chmod/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;h3 class=&#34;documentDescription&#34; style=&#34;text-align: left;&#34;&gt;                            &lt;span class=&#34; kssattr-atfieldname-description kssattr-templateId-widgets/textarea kssattr-macro-textarea-field-view inlineEditable&#34; id=&#34;parent-fieldname-description&#34;&gt;            Introduction to Plan 9 and writing a simple chmod utility&amp;nbsp;&lt;/span&gt;&lt;span class=&#34; kssattr-atfieldname-description kssattr-templateId-widgets/textarea kssattr-macro-textarea-field-view inlineEditable&#34; id=&#34;parent-fieldname-description&#34;&gt; &lt;/span&gt;&lt;/h3&gt;I decided to write down some notes about my experiences while playing with &lt;a class=&#34;external-link&#34; href=&#34;http://plan9.bell-labs.com/plan9/&#34;&gt;Plan 9&lt;/a&gt;.  Plan 9 is a free software (OSI certified) distributed operating system  developed in a place that I would like to visit someday: Bell Labs.  Many great programmers have contributed to Plan 9. Among them are the  well-known from the UNIX world Ken Thompson and Rob Pike. Yet another  respected programming figure, Brian Kernighan, claims to be just a &lt;a class=&#34;external-link&#34; href=&#34;http://doc.cat-v.org/plan_9/2nd_edition/README&#34;&gt;casual user&lt;/a&gt; of the system (or at least he did in 1995).&lt;br /&gt;&lt;br /&gt;There are many novel ideas behind Plan 9. Some of them have already been reimplemented in other operating systems: The &lt;code&gt;/proc&lt;/code&gt; and other in memory pseudo file systems, private group per user, native  UTF-8 support, append-only file permissions, and treating FTP  directories as local. But there are some Plan 9 features that are simply  impossible to implement in the rest systems; or if they are implemented  it is done in a very ugly/hacky way, because their design is not  flexible enough. To mention a few: Namespaces, no need for  root/superuser or &lt;code&gt;sudo&lt;/code&gt;-like hacks, every compilation is by default a cross compilation, device files are controlled using clear-text.&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;      Coding in Plan 9&lt;/h3&gt;Although Plan 9 provides an ANSI/POSIX compatibility layer (APE), it  doesn&#39;t make sense to use it for other than porting purposes.The native C  API of Plan 9 is neither POSIX nor ANSI compatible, but IMHO it&#39;s  cleaner and simpler to use. As an example, let&#39;s look into the  implementation of a simplified &lt;code&gt;chmod&lt;/code&gt; utility.&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/1699511.js?file=mychmod.c&#34;&gt;&lt;/script&gt;&lt;br /&gt;A few comments about the interesting parts of the code. Plan 9 has  simple built-in support for handling command line arguments using the &lt;code&gt;ARGBEGIN/ARGEND&lt;/code&gt; block. &lt;code&gt;argv0&lt;/code&gt; is a convenient name that can be used for referring to the name of the  executable. Applying a new permission mask to a file in Plan 9 is just a  matter of updating the mode flag of the file&#39;s &lt;code&gt;Dir&lt;/code&gt; structure. The result is a nice utility using only a few lines of code. Here&#39;s how it can be used:&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-JqcOHepwI9U/T7_j5P0hrjI/AAAAAAAAAAg/bacxP26KyXk/s1600/9chmod.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;97&#34; src=&#34;http://3.bp.blogspot.com/-JqcOHepwI9U/T7_j5P0hrjI/AAAAAAAAAAg/bacxP26KyXk/s400/9chmod.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;And that concludes this brief introduction to Plan 9. Until next time... Happy Coding!&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;      References&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Rob Pike, Dave Presotto, et al. &lt;/i&gt;&lt;a class=&#34;external-link&#34; href=&#34;http://plan9.bell-labs.com/sys/doc/9.html&#34;&gt;Plan 9 From Bell Labs&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Francisco J Ballesteros.&lt;/i&gt; &lt;a class=&#34;external-link&#34; href=&#34;http://lsub.org/who/nemo/9.intro.pdf&#34;&gt;Introduction to Operating System Abstractions using Plan 9 from Bell Labs&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;div class=&#34;documentDescription&#34;&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>TheHackerspace</title>
      <link>http://localhost:1313/blog/2011-06-01-thehackerspace/</link>
      <pubDate>Wed, 01 Jun 2011 16:30:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2011-06-01-thehackerspace/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;h4 class=&#34;documentDescription&#34; style=&#34;text-align: left;&#34;&gt;                       &lt;span class=&#34; kssattr-atfieldname-description kssattr-templateId-widgets/textarea kssattr-macro-textarea-field-view inlineEditable&#34; id=&#34;parent-fieldname-description&#34;&gt;            Thesssaloniki&#39;s hackerspace is here!&lt;/span&gt;&lt;/h4&gt;&lt;div class=&#34;documentDescription&#34;&gt;&lt;span class=&#34; kssattr-atfieldname-description kssattr-templateId-widgets/textarea kssattr-macro-textarea-field-view inlineEditable&#34; id=&#34;parent-fieldname-description&#34;&gt;&lt;/span&gt; The following excerpt is taken from the &lt;a class=&#34;external-link&#34; href=&#34;http://the-hackerspace.blogspot.com/&#34;&gt;homepage&lt;/a&gt; of TheHackerspace: &lt;/div&gt;&lt;blockquote class=&#34;tr_bq&#34;&gt;&lt;div class=&#34;callout&#34; style=&#34;text-align: justify;&#34;&gt;&#34;Unless you are rich, it is unlikely that you own all the hardware and the tools required to build different kinds of embedded systems. For example you might already own an arduino board, but most probably you are missing the X or Y sensor required to build your favourite prototype.&lt;/div&gt;&lt;div class=&#34;callout&#34; style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;callout&#34; style=&#34;text-align: justify;&#34;&gt;And unless you are a genius, it is unlikely that you know everything about all the available free software/open source operating systems. Thus, perhaps you wrote your own system call or driver for the Linux kernel, but most probably you don’t know how to do the same stuff on another operating system that you like (for example MINIX 3).&lt;/div&gt;&lt;div class=&#34;callout&#34; style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;callout&#34; style=&#34;text-align: justify;&#34;&gt;Don’t worry. That is exactly why we founded TheHackerspace. It is a place where hardware, books, code, and knowledge is shared between people who like to hack. If you are interested on embedded and system hacking, you are welcomed to join us.&#34;&lt;/div&gt;&lt;/blockquote&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Personally I contributed in many ways to  the foundation of TheHackerspace by helping to build the lab, donating books, writing most of the (current) content  in the homepage, etc. Unfortunately I don&#39;t have the time to enjoy  TheHackerspace since in a week I&#39;m relocating to the Netherlands where I  got a job (but that&#39;s good news!). I hope that when I&#39;m back in  Thessaloniki TheHackerspace will still exist and some really great  projects will be the outcomes of its foundation :)&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Beware of Q_ASSERT</title>
      <link>http://localhost:1313/blog/2011-05-12-beware-of-qassert/</link>
      <pubDate>Thu, 12 May 2011 18:30:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2011-05-12-beware-of-qassert/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;I really like the concept of inline assertions. Assertions might be  rude, since they kick you out of a program whenever they fail, but by  using them you can make sure that your code gives you the expected  results. You might argue that Unit Testing is a better approach. I won&#39;t  say no, but I believe that unit testing is slower to implement and not  necessary in all cases.&lt;br /&gt;&lt;br /&gt;Anyway this is not where I want to focus. If you are coding in QT, you might be aware of &lt;code&gt;Q_ASSERT&lt;/code&gt;. Like other features (&lt;code&gt;QString&lt;/code&gt;, &lt;code&gt;QFile&lt;/code&gt;,  etc.), QT provides its own facility for writing code assertions. So  that&#39;s another replacement of a standard facility, right? Well, not  exactly... What I wasn&#39;t aware of, is that &lt;code&gt;Q_ASSERT&lt;/code&gt;  statements are completely ignored when the application is executing in  release mode. They are only taken into account in debug mode. I was  using a statement like &lt;code&gt;Q_ASSERT(doThat())&lt;/code&gt; in my code, which was causing a hard to track logical error (since &lt;code&gt;doThat()&lt;/code&gt; was never executed in release mode). Luckily, after a couple of hours a colleague of mine discovered the bug.&lt;br /&gt;&lt;br /&gt;My mistake: I wrongly assumed that &lt;code&gt;Q_ASSERT&lt;/code&gt; acts like the classic &lt;code&gt;assert&lt;/code&gt;, which is only ignored in a C++/C program if a special macro (like &lt;code&gt;NDEBUG&lt;/code&gt;) is defined. What I actually wanted was my assertions to be checked in both modes, which is done by using the standard &lt;code&gt;assert&lt;/code&gt; facility.&lt;br /&gt;&lt;br /&gt;So are you using &lt;code&gt;Q_ASSERT&lt;/code&gt;? That&#39;s fine. Just be aware that &lt;code&gt;Q_ASSERT&lt;/code&gt; and &lt;code&gt;assert&lt;/code&gt; behave differently.&lt;br /&gt;&lt;br /&gt;Happy coding.&lt;/div&gt;</description>
    </item>
    <item>
      <title>Python code profiling in Debian</title>
      <link>http://localhost:1313/blog/2011-05-08-python-code-profiling-in-debian/</link>
      <pubDate>Sun, 08 May 2011 21:30:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2011-05-08-python-code-profiling-in-debian/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;If you are coding in python, you are probably already familiar with  the profiler concept. The problem is that the python profiler license  fails to comply with the free software guidelines of Debian and  therefore the package belongs to the non-free archive. &#34;So what?&#34;, you  might say. Well, personally I don&#39;t like to use software which belongs  to the non-free archive both for philosophical and technical reasons. An  important technical reason for instance is that Debian does not provide  security updates for the non-free packages.&lt;br /&gt;&lt;br /&gt;The next question is  are there any alternative solutions? Thankfully the answer is yes.  Since python 2.3 we can use the timeit module to test the efficiency of our code. Let me demonstrate the module using a simple example, taken  from Downey&#39;s &#34;Think Python&#34; book (exception handling and the like are  omitted for simplicity).&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/1561608.js?file=fibo-timeit.py&#34;&gt;&lt;/script&gt; &lt;br /&gt;What we want to see here is how much more efficient is the  recursive version of Fibonacci which uses a dictionary as a memo. Let&#39;s  first see the result of the given code snippet (no memo version):&lt;br /&gt;&lt;pre&gt;python3 fibo-timeit.py&lt;br /&gt;113.601776838&lt;/pre&gt;Wow! It took almost 114 seconds the profiler to complete the test... Let&#39;s change the code to use the memo-based function:&lt;br /&gt;&lt;pre&gt;t = Timer(&#39;fibonacci_ef(9)&#39;, &#39;from __main__ import fibonacci_ef&#39;)&lt;/pre&gt;So let&#39;s find out if memoization does indeed worth trying:&lt;br /&gt;&lt;pre&gt;python3 fibo-timeit.py&lt;br /&gt;1.40260386467&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&lt;/pre&gt;Hmmm.... Not bad. Happy Coding :)&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
