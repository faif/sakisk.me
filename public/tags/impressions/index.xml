<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Impressions on Sakis Kasampalis - Personal homepage</title>
    <link>http://localhost:1313/tags/impressions/</link>
    <description>Recent content in Impressions on Sakis Kasampalis - Personal homepage</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 02 Feb 2015 20:08:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/impressions/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>On writing a book</title>
      <link>http://localhost:1313/blog/2015-02-02-on-writing-book/</link>
      <pubDate>Mon, 02 Feb 2015 20:08:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2015-02-02-on-writing-book/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;After &lt;a href=&#34;http://sakiskasampalis.blogspot.nl/2013/11/my-first-book-review.html&#34;&gt;reviewing&lt;/a&gt; &lt;a href=&#34;http://sakiskasampalis.blogspot.nl/2014/05/being-technical-reviewer-again.html&#34;&gt;two&lt;/a&gt; books about Python, people from Packt asked me if I was willing to write a Python book. I&#39;m glad to see that my first book, &lt;a href=&#34;https://www.packtpub.com/application-development/mastering-python-design-patterns&#34;&gt;Mastering Python Design Patterns&lt;/a&gt; is published!&lt;br /&gt;&lt;br /&gt;As I expected, writing a book is much tougher than reviewing one. Especially if you have a full-time job, like in my case. I had to deliver a chapter about every week. This is very challenging, since it means that I had to spend many evenings and weekends focusing on delivering a chapter on time.&lt;br /&gt;&lt;br /&gt;I hope that my book will be appreciated by the Python (3.x) community. I tried to focus on doing things the Python way instead of reproducing Java-ish or C++-style solutions. To be honest I preferred a different title: I recommended the title &#34;Idiomatic Python Design Patterns&#34; but my proposal was rejected, mainly for marketing reasons.&lt;br /&gt;&lt;br /&gt;If you are also considering writing a book, I think that it is a very good idea, but take into account the following:&lt;br /&gt;&lt;br /&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;Do you have the time to do it? Unless your book is self-published, you&#39;ll need to sign a contract with a publisher and that means that there will be deadlines. Make sure that you discuss it first with your partner/family, since it is a demanding task.&lt;/li&gt;&lt;li&gt;Does it fill a missing gap? I don&#39;t recommend you to write a book just for the money (yes, you are paid for writing the book and depending on the contract you can also get a share from the sales). I have seen many examples of poorly-written books that were created only because the author wanted to make some money. Don&#39;t do it. It might be good for you pocket, but it can harm your reputation, your career, and your psychology (think of bad reviews).&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;To expand a little bit more on point two: I feel that my book is indeed filling a gap. Although there are other books about Design Patterns in Python, none of them focuses on Python 3. In fact, I reviewed one of them, and apart from targeting only Python 2.x, IMHO it is not using idiomatic Python solutions in many cases.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;My book is not perfect in any way. The lack of time meant that some examples had to be smaller and more trivial than expected. But this is part of the game. If you are working full-time and you are writing a book, time is your enemy! Be prepared to make compromises...&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Joy of Coding 2014 - My impressions</title>
      <link>http://localhost:1313/blog/2014-03-08-joy-of-coding-2014-my-impressions/</link>
      <pubDate>Sat, 08 Mar 2014 15:49:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2014-03-08-joy-of-coding-2014-my-impressions/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;I haven&#39;t been to a conference for years, but this year I decided to join &lt;a href=&#34;http://joyofcoding.org/&#34;&gt;Joy of Coding&lt;/a&gt;. And I don&#39;t regret it!&lt;br /&gt;&lt;br /&gt;The conference started with a keynote by Dan North: &#34;Accelerating Agile: hyper-performing       without the hype&#34;. Dan described what he learnt about Agile while working in the trading domain. The most interesting advice that I kept from his presentation is that being a good programmer is not enough: What really makes a difference is to become a domain expert. For example, if you are working as a stock market programmer, your superior programming skills don&#39;t matter if you have no clue about what the numbers mean.&lt;br /&gt;&lt;br /&gt;Next, I joined the &#34;Let Me Graph That For You: An Introduction to Neo4j&#34; workshop, by Ian Robinson. The first part of the workshop was an introduction to Graph Databases and Neo4j. At the second part we used Neo4j and its query language Cypher to create a few graphs and query them. I am impressed by how easy is to get started with Neo4j. I find its web interface very intuitive. We had a few questions for Ian (S = Sakis, I = Ian, O = Other conference participant):&lt;br /&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;S: Is there any relation between Neo4j and RDF?&lt;/li&gt;&lt;li&gt;I: Not really. In RDF you typically end up with more connections because everything is modelled as a triple. But there are libraries that can extract a Neo4j graph as RDF.&lt;/li&gt;&lt;li&gt;S: Are all the common graph algorithms (eg. SPF, BFS, Bellman-Ford, etc.) available?&lt;/li&gt;&lt;li&gt;I: Most of the well-known graph algorithms are available, and furthermore there is a Java API that is exposed and can be extended with your own algorithms.&lt;/li&gt;&lt;li&gt;S: Is Cypher case-sensitive?&lt;/li&gt;&lt;li&gt;I: Partly. The identifiers of a query are case-sensitive, but the rest parts of the query aren&#39;t.&lt;/li&gt;&lt;li&gt;O: Are there any cases where RDBMS should still be used instead of Graph Databases?&lt;/li&gt;&lt;li&gt;I: If you have tabular data and you want to focus on set theory operations (eg. union, intersection, etc.) an RDBMS is preferable.&lt;/li&gt;&lt;/ul&gt;&amp;nbsp;I&#39;ll definitely look more into Graph Databases and Neo4j.&lt;br /&gt;&lt;br /&gt;The next keynote was &#34;Contravariance is the Dual of Covariance&#34;, by Erik Meijer. I&#39;m not very familiar with Reactive Programming and Rx, thus I couldn&#39;t follow everything. But at least I enjoyed the jokes and the funny examples that Erik used. Using Scala as a reference, he explained the meanings of covariance and contra-variance, and showed how they can be used to create reusable code.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;The second workshop that I joined was &#34;An Introduction to Actors and Concurrency&#34;, by Michel Rijnders and Matthijs Ooms. The first part of the workshop was basically an introduction to Erlang, thus nothing special if you are familiar with Prolog. The fun started at the second part, where we experienced how straightforward is to communicate asynchronously through the network using Erlang&#39;s actor model and message-passing primitives.&lt;br /&gt;&lt;br /&gt;Last but not least was the keynote &#34;The Tao, of the Joy, of Coding&#34;, by Dick Wall. This was by far the most inspiring keynote. Dick, using ancient Chinese philosophy as a reference, talked about many interesting topics, including programming honesty (saying &#34;I don&#39;t understand this&#34; and learning from your colleagues is a good thing), looking back as a programmer (eg. if you used your programming skills to find a cure for a disease you really changed the world), and getting a life (being proud about working until 2 AM is a very bad mentality).&lt;br /&gt;&lt;br /&gt;All in all, a great conference that I will keep in my agenda every year!&lt;/div&gt;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
