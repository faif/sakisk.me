<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Sakis Kasampalis - Personal homepage</title>
    <link>http://localhost:1313/tags/python/</link>
    <description>Recent content in Python on Sakis Kasampalis - Personal homepage</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Jan 2025 11:16:22 +0100</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Posting to LinkedIn and Bluesky programmatically</title>
      <link>http://localhost:1313/blog/posting-to-linkedin-and-bluesky-programmatically/</link>
      <pubDate>Fri, 10 Jan 2025 11:16:22 +0100</pubDate>
      <guid>http://localhost:1313/blog/posting-to-linkedin-and-bluesky-programmatically/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/bluesky.jpeg&#34; alt=&#34;Bluesky&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;&#xA;&lt;p&gt;Whenever I have something to share with the world (mainly technical content), I post it on social media so that other&#xA;people can also check it out. I usually post about articles and books that I&amp;rsquo;ve read, new blogposts that I&amp;rsquo;ve&#xA;written, and discounts on my book. The two social media platforms I was using until now were LinkedIn and X (former&#xA;Twitter). But it&amp;rsquo;s time to replace X with something else, for administrative purposes&amp;hellip;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wheels says no...</title>
      <link>http://localhost:1313/blog/2018-11-02-wheels-pep/</link>
      <pubDate>Fri, 02 Nov 2018 22:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2018-11-02-wheels-pep/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/computer-says-no.jpeg&#34; alt=&#34;Computer says no&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;After porting one of our libraries at work in Python 3, I wanted to publish it as a package. The tool that we are using to distribute packages is&#xA;&lt;a href=&#34;https://pythonwheels.com&#34;&gt;wheels&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Unfortunately, wheels was refusing to create the package. It was reporting an error similar to the following: &lt;code&gt;wheel.cli.WheelError: &amp;quot;Bad wheel  filename mypackage-latest-cp36-cp36m-linux_x86_64.whl&amp;quot;&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;After searching online without any luck, I found a GitHub issue mentioning &lt;a href=&#34;https://www.python.org/dev/peps/pep-0440/&#34;&gt;PEP 440&lt;/a&gt;. Well, it turns out&#xA;that the &amp;ldquo;latest&amp;rdquo; part of the package name is not very PEP 440 compliant&amp;hellip; So wheels was right to complain. And all I had to do was modify the&#xA;name to make it compliant. The PEP document has many &lt;a href=&#34;https://www.python.org/dev/peps/pep-0440/#examples-of-compliant-version-schemes&#34;&gt;examples&lt;/a&gt; of&#xA;compliant schemes, so if you are facing a similar error pick any scheme that fits you.&lt;/p&gt;</description>
    </item>
    <item>
      <title>On writing a book</title>
      <link>http://localhost:1313/blog/2015-02-02-on-writing-book/</link>
      <pubDate>Mon, 02 Feb 2015 20:08:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2015-02-02-on-writing-book/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;After &lt;a href=&#34;http://sakiskasampalis.blogspot.nl/2013/11/my-first-book-review.html&#34;&gt;reviewing&lt;/a&gt; &lt;a href=&#34;http://sakiskasampalis.blogspot.nl/2014/05/being-technical-reviewer-again.html&#34;&gt;two&lt;/a&gt; books about Python, people from Packt asked me if I was willing to write a Python book. I&#39;m glad to see that my first book, &lt;a href=&#34;https://www.packtpub.com/application-development/mastering-python-design-patterns&#34;&gt;Mastering Python Design Patterns&lt;/a&gt; is published!&lt;br /&gt;&lt;br /&gt;As I expected, writing a book is much tougher than reviewing one. Especially if you have a full-time job, like in my case. I had to deliver a chapter about every week. This is very challenging, since it means that I had to spend many evenings and weekends focusing on delivering a chapter on time.&lt;br /&gt;&lt;br /&gt;I hope that my book will be appreciated by the Python (3.x) community. I tried to focus on doing things the Python way instead of reproducing Java-ish or C++-style solutions. To be honest I preferred a different title: I recommended the title &#34;Idiomatic Python Design Patterns&#34; but my proposal was rejected, mainly for marketing reasons.&lt;br /&gt;&lt;br /&gt;If you are also considering writing a book, I think that it is a very good idea, but take into account the following:&lt;br /&gt;&lt;br /&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;Do you have the time to do it? Unless your book is self-published, you&#39;ll need to sign a contract with a publisher and that means that there will be deadlines. Make sure that you discuss it first with your partner/family, since it is a demanding task.&lt;/li&gt;&lt;li&gt;Does it fill a missing gap? I don&#39;t recommend you to write a book just for the money (yes, you are paid for writing the book and depending on the contract you can also get a share from the sales). I have seen many examples of poorly-written books that were created only because the author wanted to make some money. Don&#39;t do it. It might be good for you pocket, but it can harm your reputation, your career, and your psychology (think of bad reviews).&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;To expand a little bit more on point two: I feel that my book is indeed filling a gap. Although there are other books about Design Patterns in Python, none of them focuses on Python 3. In fact, I reviewed one of them, and apart from targeting only Python 2.x, IMHO it is not using idiomatic Python solutions in many cases.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;My book is not perfect in any way. The lack of time meant that some examples had to be smaller and more trivial than expected. But this is part of the game. If you are working full-time and you are writing a book, time is your enemy! Be prepared to make compromises...&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Being a technical reviewer (again)</title>
      <link>http://localhost:1313/blog/2014-05-04-being-technical-reviewer-again/</link>
      <pubDate>Sun, 04 May 2014 12:53:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2014-05-04-being-technical-reviewer-again/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;A few months ago I experienced (for the first time) how it feels to be part of a technical reviewing team. I reviewed a packt introductory &lt;a href=&#34;http://sakiskasampalis.blogspot.nl/2013/11/my-first-book-review.html&#34;&gt;book&lt;/a&gt; about Design Patterns.&lt;br /&gt;&lt;br /&gt;Today I&#39;m glad to see that another packt book, of which I was for once again one of the technical reviewers, has been published. The book is called &lt;a href=&#34;http://www.packtpub.com/mastering-object-oriented-python/book&#34;&gt;Mastering Object-oriented Python&lt;/a&gt;. It&#39;s a book that focuses on writing OOP code in Python 3.&lt;br /&gt;&lt;br /&gt;I would recommend this book to all Python programmers, both beginners and advanced. It covers all aspects of the language (to mention a few: special methods, unit testing, decorators, serialization, etc.) and shows different possible designs, explaining the pros and cons of each design. What I really like is that the code in the book is written in a Pythonic style, and the author makes a good job at explaining how Python differs from Java/C++.&lt;br /&gt;&lt;br /&gt;A few warnings: This is a big book (~ 600 pages). You can read the whole thing, but I believe that it will be much more useful as a handbook. Also note that the book assumes familiarity with Python 3 and Design Patterns.&lt;br /&gt;&lt;br /&gt;You might wonder why I accepted to do again a technical review. Some people find technical reviewing a waste of time. But I disagree. To become a good programmer, you need to read a lot of code instead of just writing. In fact, programmers tend to read much more existing code than write new code. If reading code is important, reading good code is much more important. And I believe that the code in this book is well written.&lt;/div&gt;</description>
    </item>
    <item>
      <title>My first book review</title>
      <link>http://localhost:1313/blog/2013-11-28-my-first-book-review/</link>
      <pubDate>Thu, 28 Nov 2013 21:52:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2013-11-28-my-first-book-review/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;During the last month(s) I participated in the review process of a book about Design Patterns in Python. I am happy to see that the book has been released. The title of it is &lt;a href=&#34;http://www.packtpub.com/learning-python-design-patterns/book&#34;&gt;Learning Python Design Patterns&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Reviewing a book is definitely not harder than writing one, but that doesn&#39;t mean that it&#39;s not challenging. The comments must be clear in context, useful, and not offensive. The process requires a considerable amount of time since all comments/remarks/notes must be backed by research and reliable references.&lt;br /&gt;&lt;br /&gt;Nevertheless, I enjoyed the whole procedure which thanks to the people of packt publishing (packtpub) was flexible and clear. Plus, I&#39;ll receive a free hard-copy of the book that I reviewed and a copy of my favourite packtpub ebook. Not bad!&lt;br /&gt;&lt;br /&gt;In the future I hope that I&#39;ll have the chance (and the time) to write my own book about a topic that I like.&lt;/div&gt;</description>
    </item>
    <item>
      <title>Data Structures and Algorithms 101 part two: Queues</title>
      <link>http://localhost:1313/blog/2013-01-04-data-structures-and-algorithms-101-part/</link>
      <pubDate>Fri, 04 Jan 2013 21:40:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2013-01-04-data-structures-and-algorithms-101-part/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Definition &lt;/h3&gt;Think of a queue as a line of people waiting to buy a ticket for an event (music concert, film, etc.).&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-KwTq6z26_yo/UNyrDwvyqPI/AAAAAAAAAE8/SImW5YezxFo/s1600/line.jpg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://4.bp.blogspot.com/-KwTq6z26_yo/UNyrDwvyqPI/AAAAAAAAAE8/SImW5YezxFo/s400/line.jpg&#34; height=&#34;300&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Photo Credit: Bryan Bedder/Getty Images for Tribeca Film Festival&lt;/td&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;&lt;div style=&#34;background-color: white; border: medium none; color: black; overflow: hidden; text-align: left; text-decoration: none;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;In the queue shown at the picture, a person who just arrives to buy a ticket goes to the left side (unless cheating) and a person who just bought a ticket leaves the queue from the right side (to avoid conflicts).&lt;br /&gt;&lt;br /&gt;In queue terminology, adding a new item means &lt;b&gt;enqueuing&lt;/b&gt; it to one side of the queue (either side is fine), while removing an item means &lt;b&gt;dequeuing&lt;/b&gt;&lt;b&gt;&lt;/b&gt; it from the opposite side of the queue.&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-6Nzg7D6jK4I/UNy5rhd0LGI/AAAAAAAAAFM/beBuJgq65pk/s1600/queue.jpg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://3.bp.blogspot.com/-6Nzg7D6jK4I/UNy5rhd0LGI/AAAAAAAAAFM/beBuJgq65pk/s400/queue.jpg&#34; height=&#34;98&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Fundamental queue operations&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;The first item that enters a queue is the first item that exits the queue (first come-first served). For that reason, we call queues &lt;b&gt;First In First Out (FIFO)&lt;/b&gt; data structures.&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Usage and performance&lt;/h3&gt;&lt;div style=&#34;text-align: left;&#34;&gt;Queues have many &lt;a href=&#34;http://introcs.cs.princeton.edu/java/43stack/&#34;&gt;practical applications&lt;/a&gt; (search for &#34;applications&#34;). A simple example is printing documents. Documents are sent to the printer using a first come-first served policy (let&#39;s skip priorities for simplicity). If the printer is busy and we are trying to print a document, it will enqueue it and begin printing it only after it has finished with printing (dequeuing) all the existing documents.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;Enqueuing and dequeuing items in a queue takes &lt;b&gt;constant time - O(1)&lt;/b&gt;.  On the other hand, queues (like &lt;a href=&#34;http://sakiskasampalis.blogspot.nl/2012/09/data-structures-and-algorithms-101-part.html&#34;&gt;stacks&lt;/a&gt;) are not optimized for searching or adding/removing items from arbitrary positions. These operations take &lt;b&gt;linear time - O(n)&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Implementation&lt;/h3&gt;Like my &lt;a href=&#34;http://sakiskasampalis.blogspot.nl/2012/09/data-structures-and-algorithms-101-part.html&#34;&gt;stack&lt;/a&gt; implementation, I will use python and the built-in list data structure to implement a queue. Notice the similarities between stacks and queues. The only difference is the way the elements are accessed. &lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;span style=&#34;font-family: Verdana,sans-serif;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;script src=&#34;https://gist.github.com/4436181.js?file=myqueue.py&#34;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;div style=&#34;text-align: left;&#34;&gt;If you are not familiar with &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;__iter__&lt;/span&gt; and &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;__next__ &lt;/span&gt;they are special functions for &lt;a href=&#34;http://www.diveintopython3.net/iterators.html&#34;&gt;implementing iterators in python&lt;/a&gt;. In short, we can now say &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;for i in mq&lt;/span&gt; where &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;mq&lt;/span&gt; is an instance of &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;myqueue&lt;/span&gt;. Quite convenient! I am going to use it in the sample problem.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Sample problem&lt;/h3&gt;Implement a song playlist for a jukebox/media player, etc. New songs are added to the back (left side) of the playlist. The next song to be played is picked from the front (right side) of the playlist.&lt;/div&gt;&lt;br /&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;script src=&#34;https://gist.github.com/4436181.js?file=playlist.py&#34;&gt;&lt;/script&gt;&lt;/div&gt;Obviously that&#39;s not a &#34;real&#34; playlist since it doesn&#39;t track time so that can be automatically triggered after the end of a song. That&#39;s left as an exercise for you dear hacker. Enjoy!&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;References&lt;/h3&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;&lt;i&gt;Mark Pilgrim. &lt;/i&gt;&lt;a href=&#34;http://getpython3.com/diveintopython3/&#34;&gt;Dive Into Python 3&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Robert Sedgewick, Kevin Wayne. &lt;/i&gt;&lt;a href=&#34;http://introcs.cs.princeton.edu/java/43stack/&#34;&gt;Stacks and Queues&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Interview question: Remove duplicate characters</title>
      <link>http://localhost:1313/blog/2012-10-06-interview-question-remove-duplicate/</link>
      <pubDate>Sat, 06 Oct 2012 22:36:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2012-10-06-interview-question-remove-duplicate/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;Let&#39;s assume that we are asked to solve the following problem in a programming interview: &#34;Write a function that removes all duplicate characters from a string&#34;. Piece of cake, you might think. Surely they are not asking us to write a Web Browser but there must be a reason for that.&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Test first&lt;/h3&gt;The interview&#39;s time is limited. But this doesn&#39;t mean that we should start writing whatever implementation comes on to mind directly. Initially we should at least show to the interviewer that we are familiar with techniques such as &lt;a href=&#34;https://en.wikipedia.org/wiki/Test-driven_development&#34;&gt;Test Driven Development&lt;/a&gt; (TDD). The test cases are useful even if the interviewer is not interested in seeing unit tests. So let&#39;s write them down. We should make sure that our function:&lt;br /&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;Doesn&#39;t fail with empty strings (so &#34;&#34; is valid input)&lt;/li&gt;&lt;li&gt;Returns a string of length = 1 as is (for example &#34;a&#34; is returned as &#34;a&#34;)&lt;/li&gt;&lt;li&gt;Returns a string of length = 2 with two same characters as a string with a single character (for example &#34;aa&#34; is returned as &#34;a&#34;)&lt;/li&gt;&lt;li&gt;Removes all the duplicate characters (for example &#34;anakonda&#34; becomes either &#34;ankod&#34; or &#34;konda&#34; depending on which indexes of duplicate characters we choose to remove ; I&#39;ll initially use the second case and later switch to the first one)&lt;/li&gt;&lt;li&gt;Returns a string with no duplicate characters as is (for example &#34;the&#34; is returned as &#34;the&#34;) &lt;/li&gt;&lt;/ul&gt;It&#39;s fine if we forget some test cases, we can extend them later. Now, let&#39;s assume that the interviewer insists on actually implementing the tests. I&#39;ll use python, because writing unit tests in python is straightforward -- and I obviously like the language ;)&lt;br /&gt;&lt;br /&gt;First we need a stub version of the function. Our function, called &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;remDupl&lt;/span&gt; will accept a string as input and return a copy of the input string without duplicate characters.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/3829456.js?file=strutils.py&#34;&gt;&lt;/script&gt;Now we are ready to write our test.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/3829456.js?file=testremdupl.py&#34;&gt;&lt;/script&gt; Our test is already useful. We can make sure that it fails and then write the main logic of our function until it passes the test.&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-N1SisjXQnTM/UG3wDaLwrCI/AAAAAAAAADQ/wkRhaXQTmlo/s1600/test.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;195&#34; src=&#34;http://3.bp.blogspot.com/-N1SisjXQnTM/UG3wDaLwrCI/AAAAAAAAADQ/wkRhaXQTmlo/s400/test.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Our test fails, as expected&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;The naive implementation&lt;/h3&gt;&lt;div style=&#34;text-align: left;&#34;&gt;So far so good. It&#39;s time to start implementing our function. Since the time is against us, the first step is to follow a naive approach. Although the first implementation might not be the most efficient and clean, it&#39;s important to get something working. If there&#39;s enough time we can improve it later. If there&#39;s no time for writing an improved version, we can still discuss with the interviewer the pros and cons of our naive implementation.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src=&#34;https://gist.github.com/3829456.js?file=strutils2.py&#34;&gt;&lt;/script&gt; First of all, does our function behave as expected?&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://1.bp.blogspot.com/-IBesi5_D_Jw/UG8-y2KonEI/AAAAAAAAADg/LW41d-h7YpU/s1600/testrem.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;90&#34; src=&#34;http://1.bp.blogspot.com/-IBesi5_D_Jw/UG8-y2KonEI/AAAAAAAAADg/LW41d-h7YpU/s400/testrem.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Test result of the naive implementation&lt;/td&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;&lt;br /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;Looks good :)&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Improving the code&lt;/h3&gt;What&#39;s the time complexity of our algorithm? It&#39;s O(n), since we have to  iterate through the whole string. Even if it&#39;s hard to improve the time  complexity, we can do better by writing our code in more idiomatic  python. Python offers a set data structure which looks like a good candidate since all items in a set are unique by definition. But unfortunately the items of a set have no particular order therefore we cannot simply create a set out of our input string. We need a trick to preserve ordering. Combining the set with a generator expression and converting it to a string gives the expected result.&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-96nQz1pLT6o/UHBqXh02YEI/AAAAAAAAAEA/s_062Zt0k80/s1600/ankod.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;br /&gt;&lt;/a&gt;&lt;/div&gt;&lt;script src=&#34;https://gist.github.com/3829456.js?file=strutils3.py&#34;&gt;&lt;/script&gt; Nice, let&#39;s test our changes.&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-96nQz1pLT6o/UHBqXh02YEI/AAAAAAAAAEA/s_062Zt0k80/s1600/ankod.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;203&#34; src=&#34;http://3.bp.blogspot.com/-96nQz1pLT6o/UHBqXh02YEI/AAAAAAAAAEA/s_062Zt0k80/s400/ankod.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;The test fails, only the first occurrence of a character goes into the set&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-96nQz1pLT6o/UHBqXh02YEI/AAAAAAAAAEA/s_062Zt0k80/s1600/ankod.png&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;/a&gt; &lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;Hmmm, there&#39;s something going wrong here. We need to update our test case, since the new code keeps only the first occurrence of each character (thus &#34;anakonda&#34; becomes &#34;ankod&#34; instead of &#34;konda&#34; that used to be when &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;replace&lt;/span&gt; was used).&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/3829456.js?file=testremdupl2.py&#34;&gt;&lt;/script&gt; Now that we updated the test case, our code should pass the tests. Let&#39;s verify.&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-ej7FZrKWicI/UHBux3SE3JI/AAAAAAAAAEQ/KAPCu1OfUyg/s1600/pass.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;88&#34; src=&#34;http://3.bp.blogspot.com/-ej7FZrKWicI/UHBux3SE3JI/AAAAAAAAAEQ/KAPCu1OfUyg/s400/pass.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;The new code passes all the tests&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;And we are done!&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Idio(ma)tic?&lt;/h3&gt;The new version of our function is more compact and pythonic, but does it really perform better that the first version? Since both algorithms are O(n), the details are in the data structures and one way to find that out is by using a &lt;a href=&#34;http://docs.python.org/library/profile.html&#34;&gt;profiler&lt;/a&gt;. So let&#39;s see what&#39;s the performance when executing each version of our function with 600.000 strings as input.&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-k30NiP2nIZI/UHCLfmXZB_I/AAAAAAAAAEo/F_ABZnaCXCA/s1600/profile.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;223&#34; src=&#34;http://4.bp.blogspot.com/-k30NiP2nIZI/UHCLfmXZB_I/AAAAAAAAAEo/F_ABZnaCXCA/s400/profile.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Profiling shows that the naive implementation performs better&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;The second version is a backward step regarding performance. Profiling shows that the generator expression and the join function have the biggest negative impact. Although list comprehensions and generator expressions are the power of python and are optimized for performance, in this particular case the fact that we actually need an ordered string as the output result does not help.&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;References&lt;/h3&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;&lt;i&gt;wikipedia.&lt;/i&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Test-driven_development&#34;&gt;Test Driven Development&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;python.org. &lt;/i&gt;&lt;a href=&#34;http://docs.python.org/library/profile.html&#34;&gt;Profilers&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Mark Pilgrim. &lt;/i&gt;&lt;a href=&#34;http://getpython3.com/diveintopython3/&#34;&gt;Dive Into Python 3&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Data Structures and Algorithms 101 part one: Stacks</title>
      <link>http://localhost:1313/blog/2012-09-23-data-structures-and-algorithms-101-part/</link>
      <pubDate>Sun, 23 Sep 2012 20:59:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2012-09-23-data-structures-and-algorithms-101-part/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Rationale (boring)&lt;/h3&gt;I decided to write down some notes about common (and maybe less common) Data Structures and Algorithms. This is the first part, covering stacks.&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Definition&lt;/h3&gt;Think of a stack as a pile of books.&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-89gwMK_cF6Y/UF9MEcR1B0I/AAAAAAAAACw/gNWHlhOk1oA/s1600/2012-09-22+20.18.02.jpg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;107&#34; src=&#34;http://3.bp.blogspot.com/-89gwMK_cF6Y/UF9MEcR1B0I/AAAAAAAAACw/gNWHlhOk1oA/s320/2012-09-22+20.18.02.jpg&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;A stack looks like a pile of books&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;If I want to study &#34;Modern Operating Systems&#34;, I first need to take away all the books that are on top of it (both &#34;ARM microcontrollers&#34; and &#34;The UNIX programming environment&#34;). Conversely, whenever I finish studying a book the easiest place to put it is on top of the most top book (thus above &#34;ARM microcontrollers&#34;).&lt;br /&gt;&lt;br /&gt;In stack terminology, adding a new item means &lt;b&gt;pushing&lt;/b&gt; it to the top of the stack, while removing an item means &lt;b&gt;popping&lt;/b&gt; it from the top of the stack.&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-rZVogzJQJV0/UF9Sf2b_guI/AAAAAAAAADA/6WDtTbTDBZk/s1600/2012-09-22+20.27.57.jpg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;265&#34; src=&#34;http://4.bp.blogspot.com/-rZVogzJQJV0/UF9Sf2b_guI/AAAAAAAAADA/6WDtTbTDBZk/s320/2012-09-22+20.27.57.jpg&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Fundamental stack operations&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;Stacks provide direct access only to their top element, which happens to also be the last (most recent) element that was pushed in the stack. For that reason, we call stacks &lt;b&gt;Last In First Out (LIFO)&lt;/b&gt; data structures.&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Usage and performance&lt;/h3&gt;Why are stacks useful? There are numerous &lt;a href=&#34;https://en.wikipedia.org/wiki/Stack_%28data_structure%29#Applications&#34;&gt;practical applications&lt;/a&gt; of stacks on Wikipedia. A simple example is adding two numbers using a calculator. Implementation details of such an application are outside the context of this article.&lt;br /&gt;&lt;br /&gt;The good thing about stacks is that pushing and popping an item is very fast. Specifically, pushing and popping are &lt;a href=&#34;http://stackoverflow.com/questions/487258/plain-english-explanation-of-big-o&#34;&gt;constant time - O(1)&lt;/a&gt; operations. On the other hand, stacks are not optimized for searching or adding/removing an item from an arbitrary position. Searching and adding/removing from arbitrary stack positions are &lt;b&gt;linear time - O(n)&lt;/b&gt; operations.&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Implementation&lt;/h3&gt;Stacks are usually implemented using arrays, but since I am using python I will use the built-in list data structure for holding and accessing the items of the stack.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/3784185.js?file=stack.py&#34;&gt;&lt;/script&gt; If &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;[::-1]&lt;/span&gt; looks strange to you, it&#39;s a nice way of using &lt;a href=&#34;http://docs.python.org/release/2.3/whatsnew/section-slices.html&#34;&gt;extended slices&lt;/a&gt; for reversing a sequence. In this representation, the top element of the stack is the left-most element of the printed list. The &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;peek&lt;/span&gt; (aka &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;top&lt;/span&gt;) function returns the top element of the stack without removing it.&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Sample problem&lt;/h3&gt;&lt;div style=&#34;text-align: left;&#34;&gt;Implement a function that sorts a stack in ascending order. You are only allowed to use an extra stack and the fundamental operations &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;push, pop, peek,&lt;/span&gt; and &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;size&lt;/span&gt;.&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;The algorithm presented here sorts the stack in &lt;b&gt;quadratic - O(n^2)&lt;/b&gt; time. The idea is to pop an element from the unsorted stack and push it to the &#34;right&#34; position of the sorted stack. Exhaustive error checking (for example ensuring that unsorted is a stack, etc.) is omitted for simplicity.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/3784185.js?file=sortstack.py&#34;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;Since we only have access to the top item, when the top item of the unsorted stack cannot be pushed to sorted stack (because it violates the sorting order), we move all the items of the sorted stack to the unsorted stack until the &#34;right&#34; position is found.&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;&amp;nbsp;References&lt;/h3&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;&lt;i&gt;Wikipedia.&lt;/i&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Stack_%28data_structure%29&#34;&gt;Stack (abstract data type)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;StackOverflow.&lt;/i&gt; &lt;a href=&#34;http://stackoverflow.com/questions/487258/plain-english-explanation-of-big-o&#34;&gt;Plain English explanation of big O&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Gayle Laakman.&lt;/i&gt; &lt;a href=&#34;http://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/098478280X?tag=duckduckgo-canonical-20&#34;&gt;Cracking the Coding Interview&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Automatic Web logon</title>
      <link>http://localhost:1313/blog/2011-05-21-automatic-web-logon/</link>
      <pubDate>Sat, 21 May 2011 19:31:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2011-05-21-automatic-web-logon/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;h4 class=&#34;documentDescription&#34; style=&#34;text-align: left;&#34;&gt;                  &lt;span class=&#34; kssattr-atfieldname-description kssattr-templateId-widgets/textarea kssattr-macro-textarea-field-view inlineEditable&#34; id=&#34;parent-fieldname-description&#34;&gt;            Visiting Yahoo! Answers without using a Web browser&amp;nbsp;&lt;/span&gt;&lt;/h4&gt;I believe that services like Yahoo! Answers are very useful and use  them at times. The Yahoo! Answers community gives an extra point to  users each time they visit their account (but only once/day).&lt;br /&gt;&lt;br /&gt;The problem is that usually I&#39;m very busy (or lazy) and thus I always  forget to visit my account. Therefore I was looking for ways of  automating the process. It looks like this is very straightforward to do  when the right tools are used. Here&#39;s a quick solution using Python:&lt;br /&gt;&lt;div class=&#34;documentDescription&#34;&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/1567050.js?file=answers.py&#34;&gt;  &lt;/script&gt; You might argue that using clear-text passwords is not a good  practice; that is absolutely right, but in this case I&#39;m not insane  about the protection of my Yahoo! credentials since Answers is the only  Yahoo! service that I use.&lt;br /&gt;&lt;br /&gt;Happy coding!&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Python code profiling in Debian</title>
      <link>http://localhost:1313/blog/2011-05-08-python-code-profiling-in-debian/</link>
      <pubDate>Sun, 08 May 2011 21:30:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2011-05-08-python-code-profiling-in-debian/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;If you are coding in python, you are probably already familiar with  the profiler concept. The problem is that the python profiler license  fails to comply with the free software guidelines of Debian and  therefore the package belongs to the non-free archive. &#34;So what?&#34;, you  might say. Well, personally I don&#39;t like to use software which belongs  to the non-free archive both for philosophical and technical reasons. An  important technical reason for instance is that Debian does not provide  security updates for the non-free packages.&lt;br /&gt;&lt;br /&gt;The next question is  are there any alternative solutions? Thankfully the answer is yes.  Since python 2.3 we can use the timeit module to test the efficiency of our code. Let me demonstrate the module using a simple example, taken  from Downey&#39;s &#34;Think Python&#34; book (exception handling and the like are  omitted for simplicity).&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/1561608.js?file=fibo-timeit.py&#34;&gt;&lt;/script&gt; &lt;br /&gt;What we want to see here is how much more efficient is the  recursive version of Fibonacci which uses a dictionary as a memo. Let&#39;s  first see the result of the given code snippet (no memo version):&lt;br /&gt;&lt;pre&gt;python3 fibo-timeit.py&lt;br /&gt;113.601776838&lt;/pre&gt;Wow! It took almost 114 seconds the profiler to complete the test... Let&#39;s change the code to use the memo-based function:&lt;br /&gt;&lt;pre&gt;t = Timer(&#39;fibonacci_ef(9)&#39;, &#39;from __main__ import fibonacci_ef&#39;)&lt;/pre&gt;So let&#39;s find out if memoization does indeed worth trying:&lt;br /&gt;&lt;pre&gt;python3 fibo-timeit.py&lt;br /&gt;1.40260386467&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&lt;/pre&gt;Hmmm.... Not bad. Happy Coding :)&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
