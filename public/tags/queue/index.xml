<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Queue on Sakis Kasampalis - Personal homepage</title>
    <link>http://localhost:1313/tags/queue/</link>
    <description>Recent content in Queue on Sakis Kasampalis - Personal homepage</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 04 Jan 2013 21:40:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/queue/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Data Structures and Algorithms 101 part two: Queues</title>
      <link>http://localhost:1313/blog/2013-01-04-data-structures-and-algorithms-101-part/</link>
      <pubDate>Fri, 04 Jan 2013 21:40:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2013-01-04-data-structures-and-algorithms-101-part/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Definition &lt;/h3&gt;Think of a queue as a line of people waiting to buy a ticket for an event (music concert, film, etc.).&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-KwTq6z26_yo/UNyrDwvyqPI/AAAAAAAAAE8/SImW5YezxFo/s1600/line.jpg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://4.bp.blogspot.com/-KwTq6z26_yo/UNyrDwvyqPI/AAAAAAAAAE8/SImW5YezxFo/s400/line.jpg&#34; height=&#34;300&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Photo Credit: Bryan Bedder/Getty Images for Tribeca Film Festival&lt;/td&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;&lt;div style=&#34;background-color: white; border: medium none; color: black; overflow: hidden; text-align: left; text-decoration: none;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;In the queue shown at the picture, a person who just arrives to buy a ticket goes to the left side (unless cheating) and a person who just bought a ticket leaves the queue from the right side (to avoid conflicts).&lt;br /&gt;&lt;br /&gt;In queue terminology, adding a new item means &lt;b&gt;enqueuing&lt;/b&gt; it to one side of the queue (either side is fine), while removing an item means &lt;b&gt;dequeuing&lt;/b&gt;&lt;b&gt;&lt;/b&gt; it from the opposite side of the queue.&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-6Nzg7D6jK4I/UNy5rhd0LGI/AAAAAAAAAFM/beBuJgq65pk/s1600/queue.jpg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://3.bp.blogspot.com/-6Nzg7D6jK4I/UNy5rhd0LGI/AAAAAAAAAFM/beBuJgq65pk/s400/queue.jpg&#34; height=&#34;98&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Fundamental queue operations&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;The first item that enters a queue is the first item that exits the queue (first come-first served). For that reason, we call queues &lt;b&gt;First In First Out (FIFO)&lt;/b&gt; data structures.&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Usage and performance&lt;/h3&gt;&lt;div style=&#34;text-align: left;&#34;&gt;Queues have many &lt;a href=&#34;http://introcs.cs.princeton.edu/java/43stack/&#34;&gt;practical applications&lt;/a&gt; (search for &#34;applications&#34;). A simple example is printing documents. Documents are sent to the printer using a first come-first served policy (let&#39;s skip priorities for simplicity). If the printer is busy and we are trying to print a document, it will enqueue it and begin printing it only after it has finished with printing (dequeuing) all the existing documents.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;Enqueuing and dequeuing items in a queue takes &lt;b&gt;constant time - O(1)&lt;/b&gt;.  On the other hand, queues (like &lt;a href=&#34;http://sakiskasampalis.blogspot.nl/2012/09/data-structures-and-algorithms-101-part.html&#34;&gt;stacks&lt;/a&gt;) are not optimized for searching or adding/removing items from arbitrary positions. These operations take &lt;b&gt;linear time - O(n)&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Implementation&lt;/h3&gt;Like my &lt;a href=&#34;http://sakiskasampalis.blogspot.nl/2012/09/data-structures-and-algorithms-101-part.html&#34;&gt;stack&lt;/a&gt; implementation, I will use python and the built-in list data structure to implement a queue. Notice the similarities between stacks and queues. The only difference is the way the elements are accessed. &lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;span style=&#34;font-family: Verdana,sans-serif;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;script src=&#34;https://gist.github.com/4436181.js?file=myqueue.py&#34;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;div style=&#34;text-align: left;&#34;&gt;If you are not familiar with &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;__iter__&lt;/span&gt; and &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;__next__ &lt;/span&gt;they are special functions for &lt;a href=&#34;http://www.diveintopython3.net/iterators.html&#34;&gt;implementing iterators in python&lt;/a&gt;. In short, we can now say &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;for i in mq&lt;/span&gt; where &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;mq&lt;/span&gt; is an instance of &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;myqueue&lt;/span&gt;. Quite convenient! I am going to use it in the sample problem.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Sample problem&lt;/h3&gt;Implement a song playlist for a jukebox/media player, etc. New songs are added to the back (left side) of the playlist. The next song to be played is picked from the front (right side) of the playlist.&lt;/div&gt;&lt;br /&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;script src=&#34;https://gist.github.com/4436181.js?file=playlist.py&#34;&gt;&lt;/script&gt;&lt;/div&gt;Obviously that&#39;s not a &#34;real&#34; playlist since it doesn&#39;t track time so that can be automatically triggered after the end of a song. That&#39;s left as an exercise for you dear hacker. Enjoy!&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;References&lt;/h3&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;&lt;i&gt;Mark Pilgrim. &lt;/i&gt;&lt;a href=&#34;http://getpython3.com/diveintopython3/&#34;&gt;Dive Into Python 3&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Robert Sedgewick, Kevin Wayne. &lt;/i&gt;&lt;a href=&#34;http://introcs.cs.princeton.edu/java/43stack/&#34;&gt;Stacks and Queues&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
