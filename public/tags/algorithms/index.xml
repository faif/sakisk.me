<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithms on Sakis Kasampalis - Personal homepage</title>
    <link>http://localhost:1313/tags/algorithms/</link>
    <description>Recent content in Algorithms on Sakis Kasampalis - Personal homepage</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 04 Jan 2013 21:40:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/algorithms/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Data Structures and Algorithms 101 part two: Queues</title>
      <link>http://localhost:1313/blog/2013-01-04-data-structures-and-algorithms-101-part/</link>
      <pubDate>Fri, 04 Jan 2013 21:40:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2013-01-04-data-structures-and-algorithms-101-part/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Definition &lt;/h3&gt;Think of a queue as a line of people waiting to buy a ticket for an event (music concert, film, etc.).&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-KwTq6z26_yo/UNyrDwvyqPI/AAAAAAAAAE8/SImW5YezxFo/s1600/line.jpg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://4.bp.blogspot.com/-KwTq6z26_yo/UNyrDwvyqPI/AAAAAAAAAE8/SImW5YezxFo/s400/line.jpg&#34; height=&#34;300&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Photo Credit: Bryan Bedder/Getty Images for Tribeca Film Festival&lt;/td&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;&lt;div style=&#34;background-color: white; border: medium none; color: black; overflow: hidden; text-align: left; text-decoration: none;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;In the queue shown at the picture, a person who just arrives to buy a ticket goes to the left side (unless cheating) and a person who just bought a ticket leaves the queue from the right side (to avoid conflicts).&lt;br /&gt;&lt;br /&gt;In queue terminology, adding a new item means &lt;b&gt;enqueuing&lt;/b&gt; it to one side of the queue (either side is fine), while removing an item means &lt;b&gt;dequeuing&lt;/b&gt;&lt;b&gt;&lt;/b&gt; it from the opposite side of the queue.&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-6Nzg7D6jK4I/UNy5rhd0LGI/AAAAAAAAAFM/beBuJgq65pk/s1600/queue.jpg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://3.bp.blogspot.com/-6Nzg7D6jK4I/UNy5rhd0LGI/AAAAAAAAAFM/beBuJgq65pk/s400/queue.jpg&#34; height=&#34;98&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Fundamental queue operations&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;The first item that enters a queue is the first item that exits the queue (first come-first served). For that reason, we call queues &lt;b&gt;First In First Out (FIFO)&lt;/b&gt; data structures.&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Usage and performance&lt;/h3&gt;&lt;div style=&#34;text-align: left;&#34;&gt;Queues have many &lt;a href=&#34;http://introcs.cs.princeton.edu/java/43stack/&#34;&gt;practical applications&lt;/a&gt; (search for &#34;applications&#34;). A simple example is printing documents. Documents are sent to the printer using a first come-first served policy (let&#39;s skip priorities for simplicity). If the printer is busy and we are trying to print a document, it will enqueue it and begin printing it only after it has finished with printing (dequeuing) all the existing documents.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;Enqueuing and dequeuing items in a queue takes &lt;b&gt;constant time - O(1)&lt;/b&gt;.  On the other hand, queues (like &lt;a href=&#34;http://sakiskasampalis.blogspot.nl/2012/09/data-structures-and-algorithms-101-part.html&#34;&gt;stacks&lt;/a&gt;) are not optimized for searching or adding/removing items from arbitrary positions. These operations take &lt;b&gt;linear time - O(n)&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Implementation&lt;/h3&gt;Like my &lt;a href=&#34;http://sakiskasampalis.blogspot.nl/2012/09/data-structures-and-algorithms-101-part.html&#34;&gt;stack&lt;/a&gt; implementation, I will use python and the built-in list data structure to implement a queue. Notice the similarities between stacks and queues. The only difference is the way the elements are accessed. &lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;span style=&#34;font-family: Verdana,sans-serif;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;script src=&#34;https://gist.github.com/4436181.js?file=myqueue.py&#34;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;div style=&#34;text-align: left;&#34;&gt;If you are not familiar with &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;__iter__&lt;/span&gt; and &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;__next__ &lt;/span&gt;they are special functions for &lt;a href=&#34;http://www.diveintopython3.net/iterators.html&#34;&gt;implementing iterators in python&lt;/a&gt;. In short, we can now say &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;for i in mq&lt;/span&gt; where &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;mq&lt;/span&gt; is an instance of &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;myqueue&lt;/span&gt;. Quite convenient! I am going to use it in the sample problem.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Sample problem&lt;/h3&gt;Implement a song playlist for a jukebox/media player, etc. New songs are added to the back (left side) of the playlist. The next song to be played is picked from the front (right side) of the playlist.&lt;/div&gt;&lt;br /&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;script src=&#34;https://gist.github.com/4436181.js?file=playlist.py&#34;&gt;&lt;/script&gt;&lt;/div&gt;Obviously that&#39;s not a &#34;real&#34; playlist since it doesn&#39;t track time so that can be automatically triggered after the end of a song. That&#39;s left as an exercise for you dear hacker. Enjoy!&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;References&lt;/h3&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;&lt;i&gt;Mark Pilgrim. &lt;/i&gt;&lt;a href=&#34;http://getpython3.com/diveintopython3/&#34;&gt;Dive Into Python 3&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Robert Sedgewick, Kevin Wayne. &lt;/i&gt;&lt;a href=&#34;http://introcs.cs.princeton.edu/java/43stack/&#34;&gt;Stacks and Queues&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Data Structures and Algorithms 101 part one: Stacks</title>
      <link>http://localhost:1313/blog/2012-09-23-data-structures-and-algorithms-101-part/</link>
      <pubDate>Sun, 23 Sep 2012 20:59:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2012-09-23-data-structures-and-algorithms-101-part/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Rationale (boring)&lt;/h3&gt;I decided to write down some notes about common (and maybe less common) Data Structures and Algorithms. This is the first part, covering stacks.&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Definition&lt;/h3&gt;Think of a stack as a pile of books.&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-89gwMK_cF6Y/UF9MEcR1B0I/AAAAAAAAACw/gNWHlhOk1oA/s1600/2012-09-22+20.18.02.jpg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;107&#34; src=&#34;http://3.bp.blogspot.com/-89gwMK_cF6Y/UF9MEcR1B0I/AAAAAAAAACw/gNWHlhOk1oA/s320/2012-09-22+20.18.02.jpg&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;A stack looks like a pile of books&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;If I want to study &#34;Modern Operating Systems&#34;, I first need to take away all the books that are on top of it (both &#34;ARM microcontrollers&#34; and &#34;The UNIX programming environment&#34;). Conversely, whenever I finish studying a book the easiest place to put it is on top of the most top book (thus above &#34;ARM microcontrollers&#34;).&lt;br /&gt;&lt;br /&gt;In stack terminology, adding a new item means &lt;b&gt;pushing&lt;/b&gt; it to the top of the stack, while removing an item means &lt;b&gt;popping&lt;/b&gt; it from the top of the stack.&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-rZVogzJQJV0/UF9Sf2b_guI/AAAAAAAAADA/6WDtTbTDBZk/s1600/2012-09-22+20.27.57.jpg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;265&#34; src=&#34;http://4.bp.blogspot.com/-rZVogzJQJV0/UF9Sf2b_guI/AAAAAAAAADA/6WDtTbTDBZk/s320/2012-09-22+20.27.57.jpg&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Fundamental stack operations&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;Stacks provide direct access only to their top element, which happens to also be the last (most recent) element that was pushed in the stack. For that reason, we call stacks &lt;b&gt;Last In First Out (LIFO)&lt;/b&gt; data structures.&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Usage and performance&lt;/h3&gt;Why are stacks useful? There are numerous &lt;a href=&#34;https://en.wikipedia.org/wiki/Stack_%28data_structure%29#Applications&#34;&gt;practical applications&lt;/a&gt; of stacks on Wikipedia. A simple example is adding two numbers using a calculator. Implementation details of such an application are outside the context of this article.&lt;br /&gt;&lt;br /&gt;The good thing about stacks is that pushing and popping an item is very fast. Specifically, pushing and popping are &lt;a href=&#34;http://stackoverflow.com/questions/487258/plain-english-explanation-of-big-o&#34;&gt;constant time - O(1)&lt;/a&gt; operations. On the other hand, stacks are not optimized for searching or adding/removing an item from an arbitrary position. Searching and adding/removing from arbitrary stack positions are &lt;b&gt;linear time - O(n)&lt;/b&gt; operations.&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Implementation&lt;/h3&gt;Stacks are usually implemented using arrays, but since I am using python I will use the built-in list data structure for holding and accessing the items of the stack.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/3784185.js?file=stack.py&#34;&gt;&lt;/script&gt; If &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;[::-1]&lt;/span&gt; looks strange to you, it&#39;s a nice way of using &lt;a href=&#34;http://docs.python.org/release/2.3/whatsnew/section-slices.html&#34;&gt;extended slices&lt;/a&gt; for reversing a sequence. In this representation, the top element of the stack is the left-most element of the printed list. The &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;peek&lt;/span&gt; (aka &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;top&lt;/span&gt;) function returns the top element of the stack without removing it.&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;Sample problem&lt;/h3&gt;&lt;div style=&#34;text-align: left;&#34;&gt;Implement a function that sorts a stack in ascending order. You are only allowed to use an extra stack and the fundamental operations &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;push, pop, peek,&lt;/span&gt; and &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;size&lt;/span&gt;.&amp;nbsp;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;The algorithm presented here sorts the stack in &lt;b&gt;quadratic - O(n^2)&lt;/b&gt; time. The idea is to pop an element from the unsorted stack and push it to the &#34;right&#34; position of the sorted stack. Exhaustive error checking (for example ensuring that unsorted is a stack, etc.) is omitted for simplicity.&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/3784185.js?file=sortstack.py&#34;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;Since we only have access to the top item, when the top item of the unsorted stack cannot be pushed to sorted stack (because it violates the sorting order), we move all the items of the sorted stack to the unsorted stack until the &#34;right&#34; position is found.&lt;br /&gt;&lt;br /&gt;&lt;h3 style=&#34;text-align: left;&#34;&gt;&amp;nbsp;References&lt;/h3&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;&lt;i&gt;Wikipedia.&lt;/i&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Stack_%28data_structure%29&#34;&gt;Stack (abstract data type)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;StackOverflow.&lt;/i&gt; &lt;a href=&#34;http://stackoverflow.com/questions/487258/plain-english-explanation-of-big-o&#34;&gt;Plain English explanation of big O&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Gayle Laakman.&lt;/i&gt; &lt;a href=&#34;http://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/098478280X?tag=duckduckgo-canonical-20&#34;&gt;Cracking the Coding Interview&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
