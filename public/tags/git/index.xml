<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on Sakis Kasampalis - Personal homepage</title>
    <link>http://localhost:1313/tags/git/</link>
    <description>Recent content in Git on Sakis Kasampalis - Personal homepage</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 23 Jul 2016 22:30:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Book review: Pragmatic Guide to Git</title>
      <link>http://localhost:1313/blog/2016-07-23-book-review-pragmatic-git/</link>
      <pubDate>Sat, 23 Jul 2016 22:30:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2016-07-23-book-review-pragmatic-git/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://d.gr-assets.com/books/1348576641l/9586547.jpg&#34; alt=&#34;book cover&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;The title of this book describes it correctly. It is a compact guide&#xA;covering the basic (and a few more advanced) use cases of Git. If you&#xA;have already used Git you most likely know everything (or almost&#xA;everything) explained in this book. That was my case, but I&amp;rsquo;ve also&#xA;learnt a few new commands and concepts (like why it&amp;rsquo;s useful to use&#xA;&lt;code&gt;--&lt;/code&gt; before providing any file/path names to avoid clashing).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Course review: Git key user</title>
      <link>http://localhost:1313/blog/2016-04-17-course-review-git-key-user/</link>
      <pubDate>Sun, 17 Apr 2016 21:23:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2016-04-17-course-review-git-key-user/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;Last month I followed a course about Git. The name of the course was &#34;Git key user&#34; and it was organized by &lt;a href=&#34;http://tmcporch.com/&#34;&gt;TMC&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Obviously Git is a tool that you learn by doing, and indeed the lesson of the day was the following: &#34;Do not afraid to experiment&#34;.&lt;br /&gt;&lt;br /&gt;In general Git behaves as a &lt;a href=&#34;http://www.jayway.com/2013/03/03/git-is-a-purely-functional-data-structure/&#34;&gt;purely functional data structure&lt;/a&gt;&amp;nbsp;(or a copy-on-write filesystem)&amp;nbsp;in the sense that it never overwrites or directly removes data. All orphan nodes are kept for two weeks (I assume that this is configurable) and only if you don&#39;t touch them for that period of time they will be cleaned by Git&#39;s garbage collector.&lt;br /&gt;&lt;br /&gt;During the course we have learnt how to use:&lt;br /&gt;&lt;br /&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;&lt;span style=&#34;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&#34;&gt;git commit --amend&lt;/span&gt; to make changes related to the most recent commit. Examples include writing a better commit message or removing a file that is not required. The same actions can be applied &amp;nbsp;to any past commit using a combination of &lt;span style=&#34;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&#34;&gt;git rebase -i&lt;/span&gt; and &lt;span style=&#34;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&#34;&gt;git commit --amend&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&#34;&gt;git cherry-pick&lt;/span&gt; to apply specific changes from one or more branches to a destination branch. This is useful when for instance a required feature was developed to an incorrect branch.&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&#34;&gt;git checkout&lt;/span&gt; combined with &lt;span style=&#34;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&#34;&gt;git stash&lt;/span&gt; to clean up a messed up repository.&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&#34;&gt;git rebase -i&lt;/span&gt; with the options s(quash) and p(ick) to group/restructure related commits and create a better/cleaner commit history.&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&#34;&gt;git bisect&lt;/span&gt; to go back to a good version of a branch. That&#39;s necessary after finding out (too late) that the current branch is broken but you are not sure when the bug that broke the code was introduced.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Overall, it was nice to see some concrete use cases of the commands because Git has so many features that it&#39;s not hard to get lost...&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
