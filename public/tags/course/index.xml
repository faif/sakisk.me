<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Course on Sakis Kasampalis - Personal homepage</title>
    <link>http://localhost:1313/tags/course/</link>
    <description>Recent content in Course on Sakis Kasampalis - Personal homepage</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 17 Apr 2016 21:23:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/course/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Course review: Git key user</title>
      <link>http://localhost:1313/blog/2016-04-17-course-review-git-key-user/</link>
      <pubDate>Sun, 17 Apr 2016 21:23:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2016-04-17-course-review-git-key-user/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;Last month I followed a course about Git. The name of the course was &#34;Git key user&#34; and it was organized by &lt;a href=&#34;http://tmcporch.com/&#34;&gt;TMC&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Obviously Git is a tool that you learn by doing, and indeed the lesson of the day was the following: &#34;Do not afraid to experiment&#34;.&lt;br /&gt;&lt;br /&gt;In general Git behaves as a &lt;a href=&#34;http://www.jayway.com/2013/03/03/git-is-a-purely-functional-data-structure/&#34;&gt;purely functional data structure&lt;/a&gt;&amp;nbsp;(or a copy-on-write filesystem)&amp;nbsp;in the sense that it never overwrites or directly removes data. All orphan nodes are kept for two weeks (I assume that this is configurable) and only if you don&#39;t touch them for that period of time they will be cleaned by Git&#39;s garbage collector.&lt;br /&gt;&lt;br /&gt;During the course we have learnt how to use:&lt;br /&gt;&lt;br /&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;&lt;span style=&#34;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&#34;&gt;git commit --amend&lt;/span&gt; to make changes related to the most recent commit. Examples include writing a better commit message or removing a file that is not required. The same actions can be applied &amp;nbsp;to any past commit using a combination of &lt;span style=&#34;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&#34;&gt;git rebase -i&lt;/span&gt; and &lt;span style=&#34;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&#34;&gt;git commit --amend&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&#34;&gt;git cherry-pick&lt;/span&gt; to apply specific changes from one or more branches to a destination branch. This is useful when for instance a required feature was developed to an incorrect branch.&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&#34;&gt;git checkout&lt;/span&gt; combined with &lt;span style=&#34;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&#34;&gt;git stash&lt;/span&gt; to clean up a messed up repository.&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&#34;&gt;git rebase -i&lt;/span&gt; with the options s(quash) and p(ick) to group/restructure related commits and create a better/cleaner commit history.&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&#34;&gt;git bisect&lt;/span&gt; to go back to a good version of a branch. That&#39;s necessary after finding out (too late) that the current branch is broken but you are not sure when the bug that broke the code was introduced.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Overall, it was nice to see some concrete use cases of the commands because Git has so many features that it&#39;s not hard to get lost...&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Playing with microcontrollers</title>
      <link>http://localhost:1313/blog/2015-03-15-playing-with-microcontrollers/</link>
      <pubDate>Sun, 15 Mar 2015 18:35:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2015-03-15-playing-with-microcontrollers/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;The last training course that I followed was about programming microcontrollers. The course was given by Leon van Snippenberg, who has very good expertise in microcontrollers.&lt;br /&gt;&lt;br /&gt;For the practical part of the course we used the Microchip dsPIC33F, a 16-bit architecture 40 MHZ microcontroller (system on a chip solution). I admit that I&#39;m not very fond of this proprietary platform, so I enjoyed the theoretical part of the course much more than the practical. I would be more excited if we have used an open hardware solution like arduino, Raspberry Pi, or something comparable.&lt;br /&gt;&lt;br /&gt;A few highlights from the course:&lt;br /&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;A three-operand assembly instruction does not necessarily mean that three registers are used. For example &lt;span style=&#34;font-family: Courier New, Courier, monospace;&#34;&gt;ADD W0, W1, W0&lt;/span&gt; uses only one register.&lt;/li&gt;&lt;li&gt;Most microcontrollers use the Harvard instead of the&amp;nbsp;&lt;span style=&#34;color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22px;&#34;&gt;Von Neumann&lt;/span&gt;&amp;nbsp;architecture. This means that there are two distinct address buses, as well as two data buses (instead of one address and one data bus).&lt;/li&gt;&lt;li&gt;When writing code in assembly we should avoid thinking about code optimisation, since the code is usually very fast to execute (but very slow to produce).&lt;/li&gt;&lt;li&gt;A common problem when programming microcontrollers is &lt;a href=&#34;http://www.piclist.com/techref/readmodwrite.htm&#34;&gt;read-modify-write&lt;/a&gt;. One way to solve it is using shadow registers.&lt;/li&gt;&lt;li&gt;When programming a microcontroller using a C interface and interrupts, it is very important to use the &lt;span style=&#34;font-family: Courier New, Courier, monospace;&#34;&gt;volatile&lt;/span&gt; keyword to disable optimisations that might remove code that seems to be dead but is actually used. Because of that, it is also very important to test the code with all compiler optimisation levels enabled, to ensure that it doesn&#39;t break.&lt;/li&gt;&lt;li&gt;The hardware timers of a platform do not need to follow the same architecture with the processor. For example a platform might use a 16-bit processor with 32-bit timers.&lt;/li&gt;&lt;li&gt;Buffers and interrupts are used to solve communication problems between different devices (e.g. a computer communicating with a microcontroller using the serial port).&lt;/li&gt;&lt;li&gt;When dealing with non-deterministic problems, disabling interrupts is the most favoured solution.&lt;/li&gt;&lt;li&gt;Using a real-time operating system (RTOS) simplifies programming, because we avoid the need to write complex state machines and custom schedulers (those problems are already solved in the RTOS).&lt;/li&gt;&lt;li&gt;Multicore support in RTOS is a challenge (unsolved problem?).&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;We (me and my colleague) challenged Leon by questioning why would one prefer a much more expensive solution like the dsPIC* family of Microchip instead of Raspberry Pi or arduino. The price of the latest Pi is unbeatable. The response was that we should use whatever fits our purpose, and that the Pi manages to achieve such a low price because its makers can estimate in advance the minimum numbers of units that will be sold. Those manufacturing deals are critical in forming the end price of a prototyping platform.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;So far I only own an mbed LPC1768 and I&#39;m very satisfied with it. I hope that I&#39;ll build some more advanced prototypes in the future, but you have to start from something. I began with flashing LEDs&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;889&#34; mozallowfullscreen=&#34;&#34; src=&#34;https://player.vimeo.com/video/120307094&#34; webkitallowfullscreen=&#34;&#34; width=&#34;500&#34;&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Continued with adding some basic components like a button&lt;br /&gt;&lt;br /&gt;&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;889&#34; mozallowfullscreen=&#34;&#34; src=&#34;https://player.vimeo.com/video/120957456&#34; webkitallowfullscreen=&#34;&#34; width=&#34;500&#34;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;br /&gt;And at some point I built my first practical prototype: a darkness-activated LED&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;889&#34; mozallowfullscreen=&#34;&#34; src=&#34;https://player.vimeo.com/video/120970019&#34; webkitallowfullscreen=&#34;&#34; width=&#34;500&#34;&gt;&lt;/iframe&gt; &lt;br /&gt;Isn&#39;t that nice? In my future posts the plan is to spend more time on explaining the code of prototypes like the last one. For now you can check my &lt;a href=&#34;http://developer.mbed.org/users/faif/&#34;&gt;mbed repository&lt;/a&gt; page.&lt;/div&gt;</description>
    </item>
    <item>
      <title>Course review: SQL Performance</title>
      <link>http://localhost:1313/blog/2015-01-14-course-review-sql-performance/</link>
      <pubDate>Wed, 14 Jan 2015 21:30:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2015-01-14-course-review-sql-performance/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;&lt;b&gt;Update:&lt;/b&gt; Markus was kind enough to comment on my review. Regarding the &#34;minimise the number of tables to limit joins&#34; he said:&lt;br /&gt;&lt;blockquote class=&#34;tr_bq&#34;&gt;&lt;span style=&#34;font-family: Helvetica; font-size: 12px;&#34;&gt;it is often the best approach to store some attribute redundant (e.g.&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;font-family: Helvetica;&#34;&gt;&lt;span style=&#34;font-size: 12px;&#34;&gt;normalised&amp;nbsp;as before plus wherever needed). Maintenance of this&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;font-family: Helvetica; font-size: 12px;&#34;&gt;redundancy should be delegated to the database whenever possible (e.g.&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;font-family: Helvetica;&#34;&gt;&lt;span style=&#34;font-size: 12px;&#34;&gt;using triggers or&amp;nbsp;materialised&amp;nbsp;view). You should not do that before&amp;nbsp;having those performance problems (avoid &#34;premature&amp;nbsp;optimisation&#34;).&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;font-family: Helvetica; font-size: 12px;&#34;&gt;Reducing the number of joins is a good way to get performance. But only once you are in that situation. And of course, there are other, simpler ways to improve performance that should be leveraged first (e.g, good-old indexing).&lt;/span&gt;&lt;/blockquote&gt;So I&#39;m glad that we agree that normalisation is a good thing and that we should only try to find alternative solutions if nothing else (e.g. proper indexing) works.&lt;br /&gt;&lt;br /&gt;Markus also made an important comment about the column order in the WHERE clause that is not clarified in my original post:&lt;br /&gt;&lt;blockquote class=&#34;tr_bq&#34;&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;&lt;span style=&#34;font-family: Helvetica; font-size: 12px;&#34;&gt;The column order in indexes matters a lot&lt;/span&gt;&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;blockquote class=&#34;tr_bq&#34;&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;&lt;span style=&#34;font-family: Helvetica; font-size: 12px;&#34;&gt;The column order in the WHERE clause doesn&#39;t matter (rare exceptions exist, but generally, it doesn&#39;t!).&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;br /&gt;&lt;br /&gt;The original post starts here...&lt;br /&gt;&lt;br /&gt;Last &lt;strike&gt;October&lt;/strike&gt;&amp;nbsp;November I followed a course related to the performance of SQL. The course was given by &lt;a href=&#34;http://use-the-index-luke.com/&#34;&gt;Markus Winand&lt;/a&gt;. Although we don&#39;t agree on everything (for example I don&#39;t like the &#34;create as few tables as possible to minimise joins and achieve better performance&#34; principle because it is against normalisation) Markus has a great knowledge of general and RDBMS-specific performance related issues.&lt;br /&gt;&lt;br /&gt;I&#39;m glad that I followed this course. Markus gave us a copy of &lt;a href=&#34;http://sql-performance-explained.com/?utm_source=UTIL&amp;amp;utm_medium=main&amp;amp;utm_campaign=second&#34;&gt;his book&lt;/a&gt; which is very compact and to the point. This is an example of a book that I would never consider reading but it turns out to be a hidden gem. I recommend it to everyone working with relational databases.&lt;br /&gt;&lt;br /&gt;It took me some time to write this post because I wanted to read the book first. In this book you will find things that you don&#39;t know for sure. For example, did you know that:&lt;br /&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;When building indexes on more than one columns (concatenated indexes), the order of the columns matters a lot?&lt;/li&gt;&lt;li&gt;The order of the statements in the &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;WHERE&lt;/span&gt; part of a query affects whether a concatenated index is used or not?&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;LIKE&lt;/span&gt; expressions with leading wildcards (eg. &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;&#39;%SQL&#39;&lt;/span&gt;) cannot make use of an index?&lt;/li&gt;&lt;li&gt;ORMs can cause big performance problems because of the bad queries that they generate?&lt;/li&gt;&lt;li&gt;Selecting only the necessary columns (avoid &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;SELECT *&lt;/span&gt;) can improve the performance of joins?&lt;/li&gt;&lt;li&gt;An index that covers all the columns of an SQL query (including the columns of the &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;SELECT&lt;/span&gt; part) does not need to access any other data structures except the index and improves the performance of a query enormously?&lt;/li&gt;&lt;li&gt;&lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;ORDER BY&lt;/span&gt; and &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;GROUP BY&lt;/span&gt; can also be indexed?&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;The main message of the book is that indexes should be built by us, the developers, not by DBAs or anyone else. That&#39;s because only we know how the data are queried, and therefore only we can build the proper indexes.&lt;br /&gt;&lt;br /&gt;Personally, I&#39;m very sad to see how many features that are supported by other RDBMS are not supported by MySQL. To mention a few: indexing functions and expressions, partial indexes, indexing using &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;ASC&lt;/span&gt; and &lt;span style=&#34;font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;&#34;&gt;DESC&lt;/span&gt;, window functions. Fortunately, MariaDB is getting there and I hope that we&#39;ll switch to it (at work) at some point.&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
