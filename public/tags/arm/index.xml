<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Arm on Sakis Kasampalis - Personal homepage</title>
    <link>http://localhost:1313/tags/arm/</link>
    <description>Recent content in Arm on Sakis Kasampalis - Personal homepage</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 15 Mar 2015 18:35:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/arm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Playing with microcontrollers</title>
      <link>http://localhost:1313/blog/2015-03-15-playing-with-microcontrollers/</link>
      <pubDate>Sun, 15 Mar 2015 18:35:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2015-03-15-playing-with-microcontrollers/</guid>
      <description>&lt;div dir=&#34;ltr&#34; style=&#34;text-align: left;&#34; trbidi=&#34;on&#34;&gt;The last training course that I followed was about programming microcontrollers. The course was given by Leon van Snippenberg, who has very good expertise in microcontrollers.&lt;br /&gt;&lt;br /&gt;For the practical part of the course we used the Microchip dsPIC33F, a 16-bit architecture 40 MHZ microcontroller (system on a chip solution). I admit that I&#39;m not very fond of this proprietary platform, so I enjoyed the theoretical part of the course much more than the practical. I would be more excited if we have used an open hardware solution like arduino, Raspberry Pi, or something comparable.&lt;br /&gt;&lt;br /&gt;A few highlights from the course:&lt;br /&gt;&lt;ul style=&#34;text-align: left;&#34;&gt;&lt;li&gt;A three-operand assembly instruction does not necessarily mean that three registers are used. For example &lt;span style=&#34;font-family: Courier New, Courier, monospace;&#34;&gt;ADD W0, W1, W0&lt;/span&gt; uses only one register.&lt;/li&gt;&lt;li&gt;Most microcontrollers use the Harvard instead of the&amp;nbsp;&lt;span style=&#34;color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22px;&#34;&gt;Von Neumann&lt;/span&gt;&amp;nbsp;architecture. This means that there are two distinct address buses, as well as two data buses (instead of one address and one data bus).&lt;/li&gt;&lt;li&gt;When writing code in assembly we should avoid thinking about code optimisation, since the code is usually very fast to execute (but very slow to produce).&lt;/li&gt;&lt;li&gt;A common problem when programming microcontrollers is &lt;a href=&#34;http://www.piclist.com/techref/readmodwrite.htm&#34;&gt;read-modify-write&lt;/a&gt;. One way to solve it is using shadow registers.&lt;/li&gt;&lt;li&gt;When programming a microcontroller using a C interface and interrupts, it is very important to use the &lt;span style=&#34;font-family: Courier New, Courier, monospace;&#34;&gt;volatile&lt;/span&gt; keyword to disable optimisations that might remove code that seems to be dead but is actually used. Because of that, it is also very important to test the code with all compiler optimisation levels enabled, to ensure that it doesn&#39;t break.&lt;/li&gt;&lt;li&gt;The hardware timers of a platform do not need to follow the same architecture with the processor. For example a platform might use a 16-bit processor with 32-bit timers.&lt;/li&gt;&lt;li&gt;Buffers and interrupts are used to solve communication problems between different devices (e.g. a computer communicating with a microcontroller using the serial port).&lt;/li&gt;&lt;li&gt;When dealing with non-deterministic problems, disabling interrupts is the most favoured solution.&lt;/li&gt;&lt;li&gt;Using a real-time operating system (RTOS) simplifies programming, because we avoid the need to write complex state machines and custom schedulers (those problems are already solved in the RTOS).&lt;/li&gt;&lt;li&gt;Multicore support in RTOS is a challenge (unsolved problem?).&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;We (me and my colleague) challenged Leon by questioning why would one prefer a much more expensive solution like the dsPIC* family of Microchip instead of Raspberry Pi or arduino. The price of the latest Pi is unbeatable. The response was that we should use whatever fits our purpose, and that the Pi manages to achieve such a low price because its makers can estimate in advance the minimum numbers of units that will be sold. Those manufacturing deals are critical in forming the end price of a prototyping platform.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;So far I only own an mbed LPC1768 and I&#39;m very satisfied with it. I hope that I&#39;ll build some more advanced prototypes in the future, but you have to start from something. I began with flashing LEDs&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;889&#34; mozallowfullscreen=&#34;&#34; src=&#34;https://player.vimeo.com/video/120307094&#34; webkitallowfullscreen=&#34;&#34; width=&#34;500&#34;&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Continued with adding some basic components like a button&lt;br /&gt;&lt;br /&gt;&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;889&#34; mozallowfullscreen=&#34;&#34; src=&#34;https://player.vimeo.com/video/120957456&#34; webkitallowfullscreen=&#34;&#34; width=&#34;500&#34;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;br /&gt;And at some point I built my first practical prototype: a darkness-activated LED&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;889&#34; mozallowfullscreen=&#34;&#34; src=&#34;https://player.vimeo.com/video/120970019&#34; webkitallowfullscreen=&#34;&#34; width=&#34;500&#34;&gt;&lt;/iframe&gt; &lt;br /&gt;Isn&#39;t that nice? In my future posts the plan is to spend more time on explaining the code of prototypes like the last one. For now you can check my &lt;a href=&#34;http://developer.mbed.org/users/faif/&#34;&gt;mbed repository&lt;/a&gt; page.&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
